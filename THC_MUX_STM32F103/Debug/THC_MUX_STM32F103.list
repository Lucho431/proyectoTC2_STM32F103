
THC_MUX_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08006108  08006108  00016108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006968  08006968  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006968  08006968  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006968  08006968  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e0  20000084  080069f4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001464  080069f4  00021464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fc2  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002790  00000000  00000000  0003106f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00033800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00034758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195b7  00000000  00000000  00035580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0f9  00000000  00000000  0004eb37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090a23  00000000  00000000  0005cc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed653  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004684  00000000  00000000  000ed6d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	080060f0 	.word	0x080060f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	080060f0 	.word	0x080060f0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a7a:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <MX_ADC1_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a92:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_ADC1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_ADC1_Init+0x74>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_ADC1_Init+0x74>)
 8000aa6:	f001 f9d5 	bl	8001e54 <HAL_ADC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 fd80 	bl	80015b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000abc:	2301      	movs	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_ADC1_Init+0x74>)
 8000ac6:	f001 fc2b 	bl	8002320 <HAL_ADC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ad0:	f000 fd70 	bl	80015b4 <Error_Handler>
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200004d4 	.word	0x200004d4
 8000ae0:	40012400 	.word	0x40012400

08000ae4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <HAL_ADC_MspInit+0x7c>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d129      	bne.n	8000b58 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_ADC_MspInit+0x80>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b34:	2301      	movs	r3, #1
 8000b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	4809      	ldr	r0, [pc, #36]	; (8000b68 <HAL_ADC_MspInit+0x84>)
 8000b44:	f001 fe88 	bl	8002858 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2012      	movs	r0, #18
 8000b4e:	f001 fe4c 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b52:	2012      	movs	r0, #18
 8000b54:	f001 fe65 	bl	8002822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40012400 	.word	0x40012400
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010800 	.word	0x40010800

08000b6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a38      	ldr	r2, [pc, #224]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b98:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a32      	ldr	r2, [pc, #200]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000b9e:	f043 0320 	orr.w	r3, r3, #32
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0320 	and.w	r3, r3, #32
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a2c      	ldr	r2, [pc, #176]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a26      	ldr	r2, [pc, #152]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000bce:	f043 0308 	orr.w	r3, r3, #8
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <MX_GPIO_Init+0xfc>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0308 	and.w	r3, r3, #8
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be6:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_GPIO_Init+0x100>)
 8000be8:	f001 ff90 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mux_A_Pin|mux_B_Pin|mux_C_Pin|mux_D_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000bf2:	481f      	ldr	r0, [pc, #124]	; (8000c70 <MX_GPIO_Init+0x104>)
 8000bf4:	f001 ff8a 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, K1_Pin|K2_Pin|K3_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000bfe:	481d      	ldr	r0, [pc, #116]	; (8000c74 <MX_GPIO_Init+0x108>)
 8000c00:	f001 ff84 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <MX_GPIO_Init+0x100>)
 8000c1e:	f001 fe1b 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = mux_A_Pin|mux_B_Pin|mux_C_Pin|mux_D_Pin;
 8000c22:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <MX_GPIO_Init+0x104>)
 8000c3c:	f001 fe0c 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = K1_Pin|K2_Pin|K3_Pin;
 8000c40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_GPIO_Init+0x108>)
 8000c5a:	f001 fdfd 	bl	8002858 <HAL_GPIO_Init>

}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40011000 	.word	0x40011000
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	40010800 	.word	0x40010800

08000c78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_I2C1_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_I2C1_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb6:	f001 ff41 	bl	8002b3c <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f000 fc78 	bl	80015b4 <Error_Handler>
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000504 	.word	0x20000504
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	00061a80 	.word	0x00061a80

08000cd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <HAL_I2C_MspInit+0x70>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d123      	bne.n	8000d3c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_I2C_MspInit+0x74>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <HAL_I2C_MspInit+0x74>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_I2C_MspInit+0x74>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0c:	23c0      	movs	r3, #192	; 0xc0
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d10:	2312      	movs	r3, #18
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <HAL_I2C_MspInit+0x78>)
 8000d20:	f001 fd9a 	bl	8002858 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_I2C_MspInit+0x74>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_I2C_MspInit+0x74>)
 8000d2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d2e:	61d3      	str	r3, [r2, #28]
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_I2C_MspInit+0x74>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40005400 	.word	0x40005400
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010c00 	.word	0x40010c00

08000d50 <checkRango>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void checkRango (void){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
	uint32_t max = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
	for (uint8_t j = 0; j < MUESTRAS; j++){
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	70fb      	strb	r3, [r7, #3]
 8000d5e:	e00e      	b.n	8000d7e <checkRango+0x2e>
		if (arm1[j] > max)
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <checkRango+0xb8>)
 8000d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d204      	bcs.n	8000d78 <checkRango+0x28>
			max = arm1[j];
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <checkRango+0xb8>)
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	607b      	str	r3, [r7, #4]
	for (uint8_t j = 0; j < MUESTRAS; j++){
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	70fb      	strb	r3, [r7, #3]
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	2b9b      	cmp	r3, #155	; 0x9b
 8000d82:	d9ed      	bls.n	8000d60 <checkRango+0x10>
	}

	if (max > UMBRAL_H && rango < 5){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <checkRango+0xbc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d91a      	bls.n	8000dc2 <checkRango+0x72>
 8000d8c:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <checkRango+0xc0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d816      	bhi.n	8000dc2 <checkRango+0x72>
		rango++;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <checkRango+0xc0>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <checkRango+0xc0>)
 8000d9e:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR = (uint32_t)(reles[rango-1] << 26u) + (uint32_t)(reles[rango] << 10u);
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <checkRango+0xc0>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <checkRango+0xc4>)
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	069b      	lsls	r3, r3, #26
 8000dac:	4619      	mov	r1, r3
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <checkRango+0xc0>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <checkRango+0xc4>)
 8000db6:	5c9b      	ldrb	r3, [r3, r2]
 8000db8:	029b      	lsls	r3, r3, #10
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <checkRango+0xc8>)
 8000dbc:	440b      	add	r3, r1
 8000dbe:	6113      	str	r3, [r2, #16]
	}else if (max < UMBRAL_L && rango > 0){
		rango--;
		GPIOA->BSRR = (uint32_t)(reles[rango+1] << 26u) + (uint32_t)(reles[rango] << 10u);
	}
}
 8000dc0:	e01d      	b.n	8000dfe <checkRango+0xae>
	}else if (max < UMBRAL_L && rango > 0){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <checkRango+0xcc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d819      	bhi.n	8000dfe <checkRango+0xae>
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <checkRango+0xc0>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d015      	beq.n	8000dfe <checkRango+0xae>
		rango--;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <checkRango+0xc0>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <checkRango+0xc0>)
 8000ddc:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR = (uint32_t)(reles[rango+1] << 26u) + (uint32_t)(reles[rango] << 10u);
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <checkRango+0xc0>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <checkRango+0xc4>)
 8000de6:	5cd3      	ldrb	r3, [r2, r3]
 8000de8:	069b      	lsls	r3, r3, #26
 8000dea:	4619      	mov	r1, r3
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <checkRango+0xc0>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <checkRango+0xc4>)
 8000df4:	5c9b      	ldrb	r3, [r3, r2]
 8000df6:	029b      	lsls	r3, r3, #10
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <checkRango+0xc8>)
 8000dfa:	440b      	add	r3, r1
 8000dfc:	6113      	str	r3, [r2, #16]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000a38 	.word	0x20000a38
 8000e0c:	00f84f04 	.word	0x00f84f04
 8000e10:	200000bf 	.word	0x200000bf
 8000e14:	20000008 	.word	0x20000008
 8000e18:	40010800 	.word	0x40010800
 8000e1c:	007b3ea3 	.word	0x007b3ea3

08000e20 <RMS>:

void RMS (void){
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0

	rms1=0;
 8000e26:	4b81      	ldr	r3, [pc, #516]	; (800102c <RMS+0x20c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
	rms3=0;
 8000e2c:	4b80      	ldr	r3, [pc, #512]	; (8001030 <RMS+0x210>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
	rms5=0;
 8000e32:	4b80      	ldr	r3, [pc, #512]	; (8001034 <RMS+0x214>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
	rms7=0;
 8000e38:	4b7f      	ldr	r3, [pc, #508]	; (8001038 <RMS+0x218>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
	rms11=0;
 8000e3e:	4b7f      	ldr	r3, [pc, #508]	; (800103c <RMS+0x21c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
	rms13=0;
 8000e44:	4b7e      	ldr	r3, [pc, #504]	; (8001040 <RMS+0x220>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]

	for (uint8_t j = 0; j < MUESTRAS; j++){
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	e038      	b.n	8000ec2 <RMS+0xa2>
		rms1+=arm1[j];
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	4a7c      	ldr	r2, [pc, #496]	; (8001044 <RMS+0x224>)
 8000e54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e58:	4b74      	ldr	r3, [pc, #464]	; (800102c <RMS+0x20c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a73      	ldr	r2, [pc, #460]	; (800102c <RMS+0x20c>)
 8000e60:	6013      	str	r3, [r2, #0]
		rms3+=arm3[j];
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4a78      	ldr	r2, [pc, #480]	; (8001048 <RMS+0x228>)
 8000e66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6a:	4b71      	ldr	r3, [pc, #452]	; (8001030 <RMS+0x210>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a6f      	ldr	r2, [pc, #444]	; (8001030 <RMS+0x210>)
 8000e72:	6013      	str	r3, [r2, #0]
		rms5+=arm5[j];
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4a75      	ldr	r2, [pc, #468]	; (800104c <RMS+0x22c>)
 8000e78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e7c:	4b6d      	ldr	r3, [pc, #436]	; (8001034 <RMS+0x214>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4413      	add	r3, r2
 8000e82:	4a6c      	ldr	r2, [pc, #432]	; (8001034 <RMS+0x214>)
 8000e84:	6013      	str	r3, [r2, #0]
		rms7+=arm7[j];
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	4a71      	ldr	r2, [pc, #452]	; (8001050 <RMS+0x230>)
 8000e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e8e:	4b6a      	ldr	r3, [pc, #424]	; (8001038 <RMS+0x218>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a68      	ldr	r2, [pc, #416]	; (8001038 <RMS+0x218>)
 8000e96:	6013      	str	r3, [r2, #0]
		rms11+=arm11[j];
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4a6e      	ldr	r2, [pc, #440]	; (8001054 <RMS+0x234>)
 8000e9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ea0:	4b66      	ldr	r3, [pc, #408]	; (800103c <RMS+0x21c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a65      	ldr	r2, [pc, #404]	; (800103c <RMS+0x21c>)
 8000ea8:	6013      	str	r3, [r2, #0]
		rms13+=arm13[j];
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4a6a      	ldr	r2, [pc, #424]	; (8001058 <RMS+0x238>)
 8000eae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eb2:	4b63      	ldr	r3, [pc, #396]	; (8001040 <RMS+0x220>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a61      	ldr	r2, [pc, #388]	; (8001040 <RMS+0x220>)
 8000eba:	6013      	str	r3, [r2, #0]
	for (uint8_t j = 0; j < MUESTRAS; j++){
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b9b      	cmp	r3, #155	; 0x9b
 8000ec6:	d9c3      	bls.n	8000e50 <RMS+0x30>
	}

	rms1/=MUESTRAS;
 8000ec8:	4b58      	ldr	r3, [pc, #352]	; (800102c <RMS+0x20c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	4a63      	ldr	r2, [pc, #396]	; (800105c <RMS+0x23c>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	4a55      	ldr	r2, [pc, #340]	; (800102c <RMS+0x20c>)
 8000ed8:	6013      	str	r3, [r2, #0]
	rms3/=MUESTRAS;
 8000eda:	4b55      	ldr	r3, [pc, #340]	; (8001030 <RMS+0x210>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	4a5e      	ldr	r2, [pc, #376]	; (800105c <RMS+0x23c>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	08db      	lsrs	r3, r3, #3
 8000ee8:	4a51      	ldr	r2, [pc, #324]	; (8001030 <RMS+0x210>)
 8000eea:	6013      	str	r3, [r2, #0]
	rms5/=MUESTRAS;
 8000eec:	4b51      	ldr	r3, [pc, #324]	; (8001034 <RMS+0x214>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	4a5a      	ldr	r2, [pc, #360]	; (800105c <RMS+0x23c>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	4a4e      	ldr	r2, [pc, #312]	; (8001034 <RMS+0x214>)
 8000efc:	6013      	str	r3, [r2, #0]
	rms7/=MUESTRAS;
 8000efe:	4b4e      	ldr	r3, [pc, #312]	; (8001038 <RMS+0x218>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	4a55      	ldr	r2, [pc, #340]	; (800105c <RMS+0x23c>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	4a4a      	ldr	r2, [pc, #296]	; (8001038 <RMS+0x218>)
 8000f0e:	6013      	str	r3, [r2, #0]
	rms11/=MUESTRAS;
 8000f10:	4b4a      	ldr	r3, [pc, #296]	; (800103c <RMS+0x21c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	4a51      	ldr	r2, [pc, #324]	; (800105c <RMS+0x23c>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	4a47      	ldr	r2, [pc, #284]	; (800103c <RMS+0x21c>)
 8000f20:	6013      	str	r3, [r2, #0]
	rms13/=MUESTRAS;
 8000f22:	4b47      	ldr	r3, [pc, #284]	; (8001040 <RMS+0x220>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <RMS+0x23c>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	4a43      	ldr	r2, [pc, #268]	; (8001040 <RMS+0x220>)
 8000f32:	6013      	str	r3, [r2, #0]

	rms1=sqrt(rms1);
 8000f34:	4b3d      	ldr	r3, [pc, #244]	; (800102c <RMS+0x20c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fa4b 	bl	80003d4 <__aeabi_ui2d>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	460c      	mov	r4, r1
 8000f42:	4618      	mov	r0, r3
 8000f44:	4621      	mov	r1, r4
 8000f46:	f004 f9b1 	bl	80052ac <sqrt>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	4621      	mov	r1, r4
 8000f52:	f7ff fd69 	bl	8000a28 <__aeabi_d2uiz>
 8000f56:	4602      	mov	r2, r0
 8000f58:	4b34      	ldr	r3, [pc, #208]	; (800102c <RMS+0x20c>)
 8000f5a:	601a      	str	r2, [r3, #0]
	rms3=sqrt(rms3);
 8000f5c:	4b34      	ldr	r3, [pc, #208]	; (8001030 <RMS+0x210>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fa37 	bl	80003d4 <__aeabi_ui2d>
 8000f66:	4603      	mov	r3, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	f004 f99d 	bl	80052ac <sqrt>
 8000f72:	4603      	mov	r3, r0
 8000f74:	460c      	mov	r4, r1
 8000f76:	4618      	mov	r0, r3
 8000f78:	4621      	mov	r1, r4
 8000f7a:	f7ff fd55 	bl	8000a28 <__aeabi_d2uiz>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <RMS+0x210>)
 8000f82:	601a      	str	r2, [r3, #0]
	rms5=sqrt(rms5);
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <RMS+0x214>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fa23 	bl	80003d4 <__aeabi_ui2d>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	4618      	mov	r0, r3
 8000f94:	4621      	mov	r1, r4
 8000f96:	f004 f989 	bl	80052ac <sqrt>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460c      	mov	r4, r1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	f7ff fd41 	bl	8000a28 <__aeabi_d2uiz>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <RMS+0x214>)
 8000faa:	601a      	str	r2, [r3, #0]
	rms7=sqrt(rms7);
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <RMS+0x218>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa0f 	bl	80003d4 <__aeabi_ui2d>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460c      	mov	r4, r1
 8000fba:	4618      	mov	r0, r3
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	f004 f975 	bl	80052ac <sqrt>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460c      	mov	r4, r1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	4621      	mov	r1, r4
 8000fca:	f7ff fd2d 	bl	8000a28 <__aeabi_d2uiz>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <RMS+0x218>)
 8000fd2:	601a      	str	r2, [r3, #0]
	rms11=sqrt(rms11);
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <RMS+0x21c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f9fb 	bl	80003d4 <__aeabi_ui2d>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	f004 f961 	bl	80052ac <sqrt>
 8000fea:	4603      	mov	r3, r0
 8000fec:	460c      	mov	r4, r1
 8000fee:	4618      	mov	r0, r3
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f7ff fd19 	bl	8000a28 <__aeabi_d2uiz>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <RMS+0x21c>)
 8000ffa:	601a      	str	r2, [r3, #0]
	rms13=sqrt(rms13);
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <RMS+0x220>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff f9e7 	bl	80003d4 <__aeabi_ui2d>
 8001006:	4603      	mov	r3, r0
 8001008:	460c      	mov	r4, r1
 800100a:	4618      	mov	r0, r3
 800100c:	4621      	mov	r1, r4
 800100e:	f004 f94d 	bl	80052ac <sqrt>
 8001012:	4603      	mov	r3, r0
 8001014:	460c      	mov	r4, r1
 8001016:	4618      	mov	r0, r3
 8001018:	4621      	mov	r1, r4
 800101a:	f7ff fd05 	bl	8000a28 <__aeabi_d2uiz>
 800101e:	4602      	mov	r2, r0
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <RMS+0x220>)
 8001022:	601a      	str	r2, [r3, #0]

}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	200000a4 	.word	0x200000a4
 8001030:	200000a8 	.word	0x200000a8
 8001034:	200000ac 	.word	0x200000ac
 8001038:	200000b0 	.word	0x200000b0
 800103c:	200000b4 	.word	0x200000b4
 8001040:	200000b8 	.word	0x200000b8
 8001044:	20000a38 	.word	0x20000a38
 8001048:	200011a4 	.word	0x200011a4
 800104c:	20000f34 	.word	0x20000f34
 8001050:	20000cc4 	.word	0x20000cc4
 8001054:	20000558 	.word	0x20000558
 8001058:	200007c8 	.word	0x200007c8
 800105c:	34834835 	.word	0x34834835

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b598      	push	{r3, r4, r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 fe94 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 fa2c 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106c:	f7ff fd7e 	bl	8000b6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001070:	f7ff fcfa 	bl	8000a68 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001074:	f000 fdf6 	bl	8001c64 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001078:	f7ff fdfe 	bl	8000c78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800107c:	f000 faa0 	bl	80015c0 <SSD1306_Init>
  SSD1306_Clear();
 8001080:	f000 fcc1 	bl	8001a06 <SSD1306_Clear>
  HAL_TIM_Base_Start_IT(&htim2);
 8001084:	488a      	ldr	r0, [pc, #552]	; (80012b0 <main+0x250>)
 8001086:	f002 ffd3 	bl	8004030 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_adcStart){
 800108a:	4b8a      	ldr	r3, [pc, #552]	; (80012b4 <main+0x254>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00f      	beq.n	80010b2 <main+0x52>
		  GPIOB->BSRR = (uint32_t)(last_mux_ABC << 28u) + (uint32_t)(muxABC << 12u);
 8001092:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <main+0x258>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	071b      	lsls	r3, r3, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4b88      	ldr	r3, [pc, #544]	; (80012bc <main+0x25c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	4a87      	ldr	r2, [pc, #540]	; (80012c0 <main+0x260>)
 80010a2:	440b      	add	r3, r1
 80010a4:	6113      	str	r3, [r2, #16]
		  //HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState) //se conserva unicamente para hallar la definicion de la funcion
		  HAL_ADC_Start_IT(&hadc1);
 80010a6:	4887      	ldr	r0, [pc, #540]	; (80012c4 <main+0x264>)
 80010a8:	f000 ffac 	bl	8002004 <HAL_ADC_Start_IT>
//		  HAL_ADC_Start(&hadc1);
//		  flag_adcDone = 1;
		  flag_adcStart = 0;
 80010ac:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <main+0x254>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	  }//end if flag_adcStart

	  if (flag_adcDone){
 80010b2:	4b85      	ldr	r3, [pc, #532]	; (80012c8 <main+0x268>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8155 	beq.w	8001366 <main+0x306>
		  last_mux_ABC = muxABC;
 80010bc:	4b7f      	ldr	r3, [pc, #508]	; (80012bc <main+0x25c>)
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	4b7d      	ldr	r3, [pc, #500]	; (80012b8 <main+0x258>)
 80010c2:	701a      	strb	r2, [r3, #0]
		  switch (muxABC){
 80010c4:	4b7d      	ldr	r3, [pc, #500]	; (80012bc <main+0x25c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	f200 8149 	bhi.w	8001360 <main+0x300>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <main+0x74>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010ed 	.word	0x080010ed
 80010d8:	08001147 	.word	0x08001147
 80010dc:	080011a1 	.word	0x080011a1
 80010e0:	080011fb 	.word	0x080011fb
 80010e4:	08001255 	.word	0x08001255
 80010e8:	080012e5 	.word	0x080012e5
		  	  case 0:
		  		  arm1[i] = HAL_ADC_GetValue(&hadc1);
 80010ec:	4b77      	ldr	r3, [pc, #476]	; (80012cc <main+0x26c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461c      	mov	r4, r3
 80010f2:	4874      	ldr	r0, [pc, #464]	; (80012c4 <main+0x264>)
 80010f4:	f001 f83c 	bl	8002170 <HAL_ADC_GetValue>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b75      	ldr	r3, [pc, #468]	; (80012d0 <main+0x270>)
 80010fc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  arm1 [i] = pow(arm1[i],2);
 8001100:	4b72      	ldr	r3, [pc, #456]	; (80012cc <main+0x26c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b72      	ldr	r3, [pc, #456]	; (80012d0 <main+0x270>)
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f961 	bl	80003d4 <__aeabi_ui2d>
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111a:	f003 ff6b 	bl	8004ff4 <pow>
 800111e:	460a      	mov	r2, r1
 8001120:	4601      	mov	r1, r0
 8001122:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <main+0x26c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461c      	mov	r4, r3
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	f7ff fc7c 	bl	8000a28 <__aeabi_d2uiz>
 8001130:	4602      	mov	r2, r0
 8001132:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <main+0x270>)
 8001134:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  muxABC++;
 8001138:	4b60      	ldr	r3, [pc, #384]	; (80012bc <main+0x25c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b5e      	ldr	r3, [pc, #376]	; (80012bc <main+0x25c>)
 8001142:	701a      	strb	r2, [r3, #0]
			  break;
 8001144:	e10c      	b.n	8001360 <main+0x300>
		  	  case 1:
		  		  arm3[i] = HAL_ADC_GetValue(&hadc1);
 8001146:	4b61      	ldr	r3, [pc, #388]	; (80012cc <main+0x26c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461c      	mov	r4, r3
 800114c:	485d      	ldr	r0, [pc, #372]	; (80012c4 <main+0x264>)
 800114e:	f001 f80f 	bl	8002170 <HAL_ADC_GetValue>
 8001152:	4602      	mov	r2, r0
 8001154:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <main+0x274>)
 8001156:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  arm3 [i] = pow(arm3[i],2);
 800115a:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <main+0x26c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <main+0x274>)
 8001162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f934 	bl	80003d4 <__aeabi_ui2d>
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001174:	f003 ff3e 	bl	8004ff4 <pow>
 8001178:	460a      	mov	r2, r1
 800117a:	4601      	mov	r1, r0
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <main+0x26c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461c      	mov	r4, r3
 8001182:	4608      	mov	r0, r1
 8001184:	4611      	mov	r1, r2
 8001186:	f7ff fc4f 	bl	8000a28 <__aeabi_d2uiz>
 800118a:	4602      	mov	r2, r0
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <main+0x274>)
 800118e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  muxABC++;
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <main+0x25c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b48      	ldr	r3, [pc, #288]	; (80012bc <main+0x25c>)
 800119c:	701a      	strb	r2, [r3, #0]
			  break;
 800119e:	e0df      	b.n	8001360 <main+0x300>
		  	  case 2:
		  		  arm5[i] = HAL_ADC_GetValue(&hadc1);
 80011a0:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <main+0x26c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461c      	mov	r4, r3
 80011a6:	4847      	ldr	r0, [pc, #284]	; (80012c4 <main+0x264>)
 80011a8:	f000 ffe2 	bl	8002170 <HAL_ADC_GetValue>
 80011ac:	4602      	mov	r2, r0
 80011ae:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <main+0x278>)
 80011b0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  arm5 [i] = pow(arm5[i],2);
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <main+0x26c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <main+0x278>)
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f907 	bl	80003d4 <__aeabi_ui2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ce:	f003 ff11 	bl	8004ff4 <pow>
 80011d2:	460a      	mov	r2, r1
 80011d4:	4601      	mov	r1, r0
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <main+0x26c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461c      	mov	r4, r3
 80011dc:	4608      	mov	r0, r1
 80011de:	4611      	mov	r1, r2
 80011e0:	f7ff fc22 	bl	8000a28 <__aeabi_d2uiz>
 80011e4:	4602      	mov	r2, r0
 80011e6:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <main+0x278>)
 80011e8:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  muxABC++;
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <main+0x25c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <main+0x25c>)
 80011f6:	701a      	strb	r2, [r3, #0]
			  break;
 80011f8:	e0b2      	b.n	8001360 <main+0x300>

		  	  case 3:
		  		  arm7[i] = HAL_ADC_GetValue(&hadc1);
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <main+0x26c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	461c      	mov	r4, r3
 8001200:	4830      	ldr	r0, [pc, #192]	; (80012c4 <main+0x264>)
 8001202:	f000 ffb5 	bl	8002170 <HAL_ADC_GetValue>
 8001206:	4602      	mov	r2, r0
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <main+0x27c>)
 800120a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  arm7 [i] = pow(arm7[i],2);
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <main+0x26c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <main+0x27c>)
 8001216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f8da 	bl	80003d4 <__aeabi_ui2d>
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001228:	f003 fee4 	bl	8004ff4 <pow>
 800122c:	460a      	mov	r2, r1
 800122e:	4601      	mov	r1, r0
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <main+0x26c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461c      	mov	r4, r3
 8001236:	4608      	mov	r0, r1
 8001238:	4611      	mov	r1, r2
 800123a:	f7ff fbf5 	bl	8000a28 <__aeabi_d2uiz>
 800123e:	4602      	mov	r2, r0
 8001240:	4b26      	ldr	r3, [pc, #152]	; (80012dc <main+0x27c>)
 8001242:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  muxABC++;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <main+0x25c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <main+0x25c>)
 8001250:	701a      	strb	r2, [r3, #0]
			  break;
 8001252:	e085      	b.n	8001360 <main+0x300>
		  	  case 4:
		  		  arm11[i] = HAL_ADC_GetValue(&hadc1);
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <main+0x26c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461c      	mov	r4, r3
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <main+0x264>)
 800125c:	f000 ff88 	bl	8002170 <HAL_ADC_GetValue>
 8001260:	4602      	mov	r2, r0
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <main+0x280>)
 8001264:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  arm11 [i] = pow(arm11[i],2);
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <main+0x26c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <main+0x280>)
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8ad 	bl	80003d4 <__aeabi_ui2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001282:	f003 feb7 	bl	8004ff4 <pow>
 8001286:	460a      	mov	r2, r1
 8001288:	4601      	mov	r1, r0
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <main+0x26c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461c      	mov	r4, r3
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	f7ff fbc8 	bl	8000a28 <__aeabi_d2uiz>
 8001298:	4602      	mov	r2, r0
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <main+0x280>)
 800129c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  muxABC++;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <main+0x25c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <main+0x25c>)
 80012aa:	701a      	strb	r2, [r3, #0]
			  break;
 80012ac:	e058      	b.n	8001360 <main+0x300>
 80012ae:	bf00      	nop
 80012b0:	20001414 	.word	0x20001414
 80012b4:	200000a0 	.word	0x200000a0
 80012b8:	200000be 	.word	0x200000be
 80012bc:	200000bd 	.word	0x200000bd
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	200004d4 	.word	0x200004d4
 80012c8:	200000a1 	.word	0x200000a1
 80012cc:	200000bc 	.word	0x200000bc
 80012d0:	20000a38 	.word	0x20000a38
 80012d4:	200011a4 	.word	0x200011a4
 80012d8:	20000f34 	.word	0x20000f34
 80012dc:	20000cc4 	.word	0x20000cc4
 80012e0:	20000558 	.word	0x20000558
		  	  case 5:
		  		  arm13[i] = HAL_ADC_GetValue(&hadc1);
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <main+0x418>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461c      	mov	r4, r3
 80012ea:	4864      	ldr	r0, [pc, #400]	; (800147c <main+0x41c>)
 80012ec:	f000 ff40 	bl	8002170 <HAL_ADC_GetValue>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b63      	ldr	r3, [pc, #396]	; (8001480 <main+0x420>)
 80012f4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  		  arm13[i] = pow(arm13[i],2);
 80012f8:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <main+0x418>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b60      	ldr	r3, [pc, #384]	; (8001480 <main+0x420>)
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f865 	bl	80003d4 <__aeabi_ui2d>
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001312:	f003 fe6f 	bl	8004ff4 <pow>
 8001316:	460a      	mov	r2, r1
 8001318:	4601      	mov	r1, r0
 800131a:	4b57      	ldr	r3, [pc, #348]	; (8001478 <main+0x418>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461c      	mov	r4, r3
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	f7ff fb80 	bl	8000a28 <__aeabi_d2uiz>
 8001328:	4602      	mov	r2, r0
 800132a:	4b55      	ldr	r3, [pc, #340]	; (8001480 <main+0x420>)
 800132c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		  		  i++;
 8001330:	4b51      	ldr	r3, [pc, #324]	; (8001478 <main+0x418>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b4f      	ldr	r3, [pc, #316]	; (8001478 <main+0x418>)
 800133a:	701a      	strb	r2, [r3, #0]
		  		  if (i > MUESTRAS-1){
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <main+0x418>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b9b      	cmp	r3, #155	; 0x9b
 8001342:	d909      	bls.n	8001358 <main+0x2f8>
		  			  checkRango();
 8001344:	f7ff fd04 	bl	8000d50 <checkRango>
		  			  RMS();
 8001348:	f7ff fd6a 	bl	8000e20 <RMS>
		  			  flag_print = 1;
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <main+0x424>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
		  			  i = 0;
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <main+0x418>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
		  		  }
		  		  muxABC = 0;
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <main+0x428>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
			  break;
 800135e:	bf00      	nop
		  }

		  flag_adcDone = 0;
 8001360:	4b4a      	ldr	r3, [pc, #296]	; (800148c <main+0x42c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
	  }//end if flag_adcDone

	  if (flag_print){
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <main+0x424>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f43f ae8d 	beq.w	800108a <main+0x2a>

		  SSD1306_Fill(0);
 8001370:	2000      	movs	r0, #0
 8001372:	f000 fa17 	bl	80017a4 <SSD1306_Fill>
		  SSD1306_GotoXY(0, 0);
 8001376:	2100      	movs	r1, #0
 8001378:	2000      	movs	r0, #0
 800137a:	f000 fa89 	bl	8001890 <SSD1306_GotoXY>
		  sprintf (texto, "Armonicos:");
 800137e:	4a44      	ldr	r2, [pc, #272]	; (8001490 <main+0x430>)
 8001380:	4b44      	ldr	r3, [pc, #272]	; (8001494 <main+0x434>)
 8001382:	cb03      	ldmia	r3!, {r0, r1}
 8001384:	6010      	str	r0, [r2, #0]
 8001386:	6051      	str	r1, [r2, #4]
 8001388:	8819      	ldrh	r1, [r3, #0]
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	8111      	strh	r1, [r2, #8]
 800138e:	7293      	strb	r3, [r2, #10]
		  SSD1306_Puts(texto, &Font_7x10, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	4941      	ldr	r1, [pc, #260]	; (8001498 <main+0x438>)
 8001394:	483e      	ldr	r0, [pc, #248]	; (8001490 <main+0x430>)
 8001396:	f000 fb11 	bl	80019bc <SSD1306_Puts>
		  SSD1306_GotoXY(0, 11);
 800139a:	210b      	movs	r1, #11
 800139c:	2000      	movs	r0, #0
 800139e:	f000 fa77 	bl	8001890 <SSD1306_GotoXY>
		  sprintf (texto, "nivel 1ro: %d", (int)(rms1));
 80013a2:	4b3e      	ldr	r3, [pc, #248]	; (800149c <main+0x43c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	493d      	ldr	r1, [pc, #244]	; (80014a0 <main+0x440>)
 80013aa:	4839      	ldr	r0, [pc, #228]	; (8001490 <main+0x430>)
 80013ac:	f003 fa10 	bl	80047d0 <siprintf>
		  SSD1306_Puts(texto, &Font_7x10, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	4939      	ldr	r1, [pc, #228]	; (8001498 <main+0x438>)
 80013b4:	4836      	ldr	r0, [pc, #216]	; (8001490 <main+0x430>)
 80013b6:	f000 fb01 	bl	80019bc <SSD1306_Puts>
		  SSD1306_GotoXY(0, 22);
 80013ba:	2116      	movs	r1, #22
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fa67 	bl	8001890 <SSD1306_GotoXY>
		  sprintf (texto, "3ro: %d 5to: %d", (int)(rms3*100/rms1), (int)(rms5*100/rms1));
 80013c2:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <main+0x444>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2264      	movs	r2, #100	; 0x64
 80013c8:	fb02 f203 	mul.w	r2, r2, r3
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <main+0x43c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	4619      	mov	r1, r3
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <main+0x448>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2264      	movs	r2, #100	; 0x64
 80013dc:	fb02 f203 	mul.w	r2, r2, r3
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <main+0x43c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e8:	460a      	mov	r2, r1
 80013ea:	4930      	ldr	r1, [pc, #192]	; (80014ac <main+0x44c>)
 80013ec:	4828      	ldr	r0, [pc, #160]	; (8001490 <main+0x430>)
 80013ee:	f003 f9ef 	bl	80047d0 <siprintf>
		  SSD1306_Puts(texto, &Font_7x10, 1);
 80013f2:	2201      	movs	r2, #1
 80013f4:	4928      	ldr	r1, [pc, #160]	; (8001498 <main+0x438>)
 80013f6:	4826      	ldr	r0, [pc, #152]	; (8001490 <main+0x430>)
 80013f8:	f000 fae0 	bl	80019bc <SSD1306_Puts>
		  SSD1306_GotoXY(0, 33);
 80013fc:	2121      	movs	r1, #33	; 0x21
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 fa46 	bl	8001890 <SSD1306_GotoXY>
		  sprintf (texto, "7mo: %d 11vo: %d", (int)(rms7*100/rms1), (int)(rms11*100/rms1));
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <main+0x450>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2264      	movs	r2, #100	; 0x64
 800140a:	fb02 f203 	mul.w	r2, r2, r3
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <main+0x43c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4619      	mov	r1, r3
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <main+0x454>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2264      	movs	r2, #100	; 0x64
 800141e:	fb02 f203 	mul.w	r2, r2, r3
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <main+0x43c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	460a      	mov	r2, r1
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <main+0x458>)
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <main+0x430>)
 8001430:	f003 f9ce 	bl	80047d0 <siprintf>
		  SSD1306_Puts(texto, &Font_7x10, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	4918      	ldr	r1, [pc, #96]	; (8001498 <main+0x438>)
 8001438:	4815      	ldr	r0, [pc, #84]	; (8001490 <main+0x430>)
 800143a:	f000 fabf 	bl	80019bc <SSD1306_Puts>
		  SSD1306_GotoXY(0, 44);
 800143e:	212c      	movs	r1, #44	; 0x2c
 8001440:	2000      	movs	r0, #0
 8001442:	f000 fa25 	bl	8001890 <SSD1306_GotoXY>
		  sprintf (texto, "13vo: %d", (int)(rms13*100/rms1));
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <main+0x45c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2264      	movs	r2, #100	; 0x64
 800144c:	fb02 f203 	mul.w	r2, r2, r3
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <main+0x43c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fbb2 f3f3 	udiv	r3, r2, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4919      	ldr	r1, [pc, #100]	; (80014c0 <main+0x460>)
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <main+0x430>)
 800145e:	f003 f9b7 	bl	80047d0 <siprintf>
		  SSD1306_Puts(texto, &Font_7x10, 1);
 8001462:	2201      	movs	r2, #1
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <main+0x438>)
 8001466:	480a      	ldr	r0, [pc, #40]	; (8001490 <main+0x430>)
 8001468:	f000 faa8 	bl	80019bc <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800146c:	f000 f96c 	bl	8001748 <SSD1306_UpdateScreen>


		  flag_print = 0;
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <main+0x424>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	  if (flag_adcStart){
 8001476:	e608      	b.n	800108a <main+0x2a>
 8001478:	200000bc 	.word	0x200000bc
 800147c:	200004d4 	.word	0x200004d4
 8001480:	200007c8 	.word	0x200007c8
 8001484:	200000a2 	.word	0x200000a2
 8001488:	200000bd 	.word	0x200000bd
 800148c:	200000a1 	.word	0x200000a1
 8001490:	20000ca8 	.word	0x20000ca8
 8001494:	08006108 	.word	0x08006108
 8001498:	20000000 	.word	0x20000000
 800149c:	200000a4 	.word	0x200000a4
 80014a0:	08006114 	.word	0x08006114
 80014a4:	200000a8 	.word	0x200000a8
 80014a8:	200000ac 	.word	0x200000ac
 80014ac:	08006124 	.word	0x08006124
 80014b0:	200000b0 	.word	0x200000b0
 80014b4:	200000b4 	.word	0x200000b4
 80014b8:	08006134 	.word	0x08006134
 80014bc:	200000b8 	.word	0x200000b8
 80014c0:	08006148 	.word	0x08006148

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	2228      	movs	r2, #40	; 0x28
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 f974 	bl	80047c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f4:	2301      	movs	r3, #1
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001502:	2301      	movs	r3, #1
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001510:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001514:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151a:	4618      	mov	r0, r3
 800151c:	f002 f87a 	bl	8003614 <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001526:	f000 f845 	bl	80015b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	230f      	movs	r3, #15
 800152c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800153a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2102      	movs	r1, #2
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fae4 	bl	8003b14 <HAL_RCC_ClockConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001552:	f000 f82f 	bl	80015b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001556:	2302      	movs	r3, #2
 8001558:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800155a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800155e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fc5e 	bl	8003e24 <HAL_RCCEx_PeriphCLKConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800156e:	f000 f821 	bl	80015b4 <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	; 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	flag_adcStart = 1;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	200000a0 	.word	0x200000a0

08001598 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	flag_adcDone = 1;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_ADC_ConvCpltCallback+0x18>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	200000a1 	.word	0x200000a1

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80015c6:	f000 fa27 	bl	8001a18 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 80015ce:	2201      	movs	r2, #1
 80015d0:	2178      	movs	r1, #120	; 0x78
 80015d2:	485b      	ldr	r0, [pc, #364]	; (8001740 <SSD1306_Init+0x180>)
 80015d4:	f001 fce8 	bl	8002fa8 <HAL_I2C_IsDeviceReady>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	e0a9      	b.n	8001736 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80015e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80015e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015e8:	e002      	b.n	80015f0 <SSD1306_Init+0x30>
		p--;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f9      	bne.n	80015ea <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80015f6:	22ae      	movs	r2, #174	; 0xae
 80015f8:	2100      	movs	r1, #0
 80015fa:	2078      	movs	r0, #120	; 0x78
 80015fc:	f000 fa68 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001600:	2220      	movs	r2, #32
 8001602:	2100      	movs	r1, #0
 8001604:	2078      	movs	r0, #120	; 0x78
 8001606:	f000 fa63 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800160a:	2210      	movs	r2, #16
 800160c:	2100      	movs	r1, #0
 800160e:	2078      	movs	r0, #120	; 0x78
 8001610:	f000 fa5e 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001614:	22b0      	movs	r2, #176	; 0xb0
 8001616:	2100      	movs	r1, #0
 8001618:	2078      	movs	r0, #120	; 0x78
 800161a:	f000 fa59 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800161e:	22c8      	movs	r2, #200	; 0xc8
 8001620:	2100      	movs	r1, #0
 8001622:	2078      	movs	r0, #120	; 0x78
 8001624:	f000 fa54 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	2078      	movs	r0, #120	; 0x78
 800162e:	f000 fa4f 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001632:	2210      	movs	r2, #16
 8001634:	2100      	movs	r1, #0
 8001636:	2078      	movs	r0, #120	; 0x78
 8001638:	f000 fa4a 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800163c:	2240      	movs	r2, #64	; 0x40
 800163e:	2100      	movs	r1, #0
 8001640:	2078      	movs	r0, #120	; 0x78
 8001642:	f000 fa45 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001646:	2281      	movs	r2, #129	; 0x81
 8001648:	2100      	movs	r1, #0
 800164a:	2078      	movs	r0, #120	; 0x78
 800164c:	f000 fa40 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001650:	22ff      	movs	r2, #255	; 0xff
 8001652:	2100      	movs	r1, #0
 8001654:	2078      	movs	r0, #120	; 0x78
 8001656:	f000 fa3b 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800165a:	22a1      	movs	r2, #161	; 0xa1
 800165c:	2100      	movs	r1, #0
 800165e:	2078      	movs	r0, #120	; 0x78
 8001660:	f000 fa36 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001664:	22a6      	movs	r2, #166	; 0xa6
 8001666:	2100      	movs	r1, #0
 8001668:	2078      	movs	r0, #120	; 0x78
 800166a:	f000 fa31 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800166e:	22a8      	movs	r2, #168	; 0xa8
 8001670:	2100      	movs	r1, #0
 8001672:	2078      	movs	r0, #120	; 0x78
 8001674:	f000 fa2c 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001678:	223f      	movs	r2, #63	; 0x3f
 800167a:	2100      	movs	r1, #0
 800167c:	2078      	movs	r0, #120	; 0x78
 800167e:	f000 fa27 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001682:	22a4      	movs	r2, #164	; 0xa4
 8001684:	2100      	movs	r1, #0
 8001686:	2078      	movs	r0, #120	; 0x78
 8001688:	f000 fa22 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800168c:	22d3      	movs	r2, #211	; 0xd3
 800168e:	2100      	movs	r1, #0
 8001690:	2078      	movs	r0, #120	; 0x78
 8001692:	f000 fa1d 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2078      	movs	r0, #120	; 0x78
 800169c:	f000 fa18 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016a0:	22d5      	movs	r2, #213	; 0xd5
 80016a2:	2100      	movs	r1, #0
 80016a4:	2078      	movs	r0, #120	; 0x78
 80016a6:	f000 fa13 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016aa:	22f0      	movs	r2, #240	; 0xf0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2078      	movs	r0, #120	; 0x78
 80016b0:	f000 fa0e 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80016b4:	22d9      	movs	r2, #217	; 0xd9
 80016b6:	2100      	movs	r1, #0
 80016b8:	2078      	movs	r0, #120	; 0x78
 80016ba:	f000 fa09 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80016be:	2222      	movs	r2, #34	; 0x22
 80016c0:	2100      	movs	r1, #0
 80016c2:	2078      	movs	r0, #120	; 0x78
 80016c4:	f000 fa04 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016c8:	22da      	movs	r2, #218	; 0xda
 80016ca:	2100      	movs	r1, #0
 80016cc:	2078      	movs	r0, #120	; 0x78
 80016ce:	f000 f9ff 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80016d2:	2212      	movs	r2, #18
 80016d4:	2100      	movs	r1, #0
 80016d6:	2078      	movs	r0, #120	; 0x78
 80016d8:	f000 f9fa 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016dc:	22db      	movs	r2, #219	; 0xdb
 80016de:	2100      	movs	r1, #0
 80016e0:	2078      	movs	r0, #120	; 0x78
 80016e2:	f000 f9f5 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80016e6:	2220      	movs	r2, #32
 80016e8:	2100      	movs	r1, #0
 80016ea:	2078      	movs	r0, #120	; 0x78
 80016ec:	f000 f9f0 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80016f0:	228d      	movs	r2, #141	; 0x8d
 80016f2:	2100      	movs	r1, #0
 80016f4:	2078      	movs	r0, #120	; 0x78
 80016f6:	f000 f9eb 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80016fa:	2214      	movs	r2, #20
 80016fc:	2100      	movs	r1, #0
 80016fe:	2078      	movs	r0, #120	; 0x78
 8001700:	f000 f9e6 	bl	8001ad0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001704:	22af      	movs	r2, #175	; 0xaf
 8001706:	2100      	movs	r1, #0
 8001708:	2078      	movs	r0, #120	; 0x78
 800170a:	f000 f9e1 	bl	8001ad0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800170e:	222e      	movs	r2, #46	; 0x2e
 8001710:	2100      	movs	r1, #0
 8001712:	2078      	movs	r0, #120	; 0x78
 8001714:	f000 f9dc 	bl	8001ad0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001718:	2000      	movs	r0, #0
 800171a:	f000 f843 	bl	80017a4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800171e:	f000 f813 	bl	8001748 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <SSD1306_Init+0x184>)
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <SSD1306_Init+0x184>)
 800172a:	2200      	movs	r2, #0
 800172c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SSD1306_Init+0x184>)
 8001730:	2201      	movs	r2, #1
 8001732:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001734:	2301      	movs	r3, #1
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000504 	.word	0x20000504
 8001744:	200004c0 	.word	0x200004c0

08001748 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800174e:	2300      	movs	r3, #0
 8001750:	71fb      	strb	r3, [r7, #7]
 8001752:	e01d      	b.n	8001790 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	3b50      	subs	r3, #80	; 0x50
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	; 0x78
 8001760:	f000 f9b6 	bl	8001ad0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2078      	movs	r0, #120	; 0x78
 800176a:	f000 f9b1 	bl	8001ad0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800176e:	2210      	movs	r2, #16
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 f9ac 	bl	8001ad0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	01db      	lsls	r3, r3, #7
 800177c:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <SSD1306_UpdateScreen+0x58>)
 800177e:	441a      	add	r2, r3
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	2078      	movs	r0, #120	; 0x78
 8001786:	f000 f95b 	bl	8001a40 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	3301      	adds	r3, #1
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b07      	cmp	r3, #7
 8001794:	d9de      	bls.n	8001754 <SSD1306_UpdateScreen+0xc>
	}
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000c0 	.word	0x200000c0

080017a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <SSD1306_Fill+0x14>
 80017b4:	2300      	movs	r3, #0
 80017b6:	e000      	b.n	80017ba <SSD1306_Fill+0x16>
 80017b8:	23ff      	movs	r3, #255	; 0xff
 80017ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017be:	4619      	mov	r1, r3
 80017c0:	4803      	ldr	r0, [pc, #12]	; (80017d0 <SSD1306_Fill+0x2c>)
 80017c2:	f002 fffd 	bl	80047c0 <memset>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200000c0 	.word	0x200000c0

080017d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	460b      	mov	r3, r1
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	70fb      	strb	r3, [r7, #3]
	if (
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	2b7f      	cmp	r3, #127	; 0x7f
 80017ea:	d848      	bhi.n	800187e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	2b3f      	cmp	r3, #63	; 0x3f
 80017f0:	d845      	bhi.n	800187e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <SSD1306_DrawPixel+0xb4>)
 80017f4:	791b      	ldrb	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d11a      	bne.n	8001844 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800180e:	88fa      	ldrh	r2, [r7, #6]
 8001810:	88bb      	ldrh	r3, [r7, #4]
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	b298      	uxth	r0, r3
 8001816:	4603      	mov	r3, r0
 8001818:	01db      	lsls	r3, r3, #7
 800181a:	4413      	add	r3, r2
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <SSD1306_DrawPixel+0xb8>)
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	b25a      	sxtb	r2, r3
 8001822:	88bb      	ldrh	r3, [r7, #4]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	b25b      	sxtb	r3, r3
 8001830:	4313      	orrs	r3, r2
 8001832:	b259      	sxtb	r1, r3
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	4603      	mov	r3, r0
 8001838:	01db      	lsls	r3, r3, #7
 800183a:	4413      	add	r3, r2
 800183c:	b2c9      	uxtb	r1, r1
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <SSD1306_DrawPixel+0xb8>)
 8001840:	54d1      	strb	r1, [r2, r3]
 8001842:	e01d      	b.n	8001880 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	b298      	uxth	r0, r3
 800184c:	4603      	mov	r3, r0
 800184e:	01db      	lsls	r3, r3, #7
 8001850:	4413      	add	r3, r2
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <SSD1306_DrawPixel+0xb8>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	b25a      	sxtb	r2, r3
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	b25b      	sxtb	r3, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	b25b      	sxtb	r3, r3
 800186a:	4013      	ands	r3, r2
 800186c:	b259      	sxtb	r1, r3
 800186e:	88fa      	ldrh	r2, [r7, #6]
 8001870:	4603      	mov	r3, r0
 8001872:	01db      	lsls	r3, r3, #7
 8001874:	4413      	add	r3, r2
 8001876:	b2c9      	uxtb	r1, r1
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <SSD1306_DrawPixel+0xb8>)
 800187a:	54d1      	strb	r1, [r2, r3]
 800187c:	e000      	b.n	8001880 <SSD1306_DrawPixel+0xac>
		return;
 800187e:	bf00      	nop
	}
}
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	200004c0 	.word	0x200004c0
 800188c:	200000c0 	.word	0x200000c0

08001890 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	80fb      	strh	r3, [r7, #6]
 800189c:	4613      	mov	r3, r2
 800189e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <SSD1306_GotoXY+0x28>)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <SSD1306_GotoXY+0x28>)
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	8053      	strh	r3, [r2, #2]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200004c0 	.word	0x200004c0

080018bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018cc:	4b3a      	ldr	r3, [pc, #232]	; (80019b8 <SSD1306_Putc+0xfc>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
	if (
 80018d8:	2b7f      	cmp	r3, #127	; 0x7f
 80018da:	dc07      	bgt.n	80018ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018dc:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <SSD1306_Putc+0xfc>)
 80018de:	885b      	ldrh	r3, [r3, #2]
 80018e0:	461a      	mov	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	785b      	ldrb	r3, [r3, #1]
 80018e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018e8:	2b3f      	cmp	r3, #63	; 0x3f
 80018ea:	dd01      	ble.n	80018f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e05e      	b.n	80019ae <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e04b      	b.n	800198e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	3b20      	subs	r3, #32
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	7849      	ldrb	r1, [r1, #1]
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4619      	mov	r1, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	440b      	add	r3, r1
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	e030      	b.n	800197c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800192a:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <SSD1306_Putc+0xfc>)
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	b298      	uxth	r0, r3
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <SSD1306_Putc+0xfc>)
 8001938:	885a      	ldrh	r2, [r3, #2]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	b29b      	uxth	r3, r3
 800193e:	4413      	add	r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	79ba      	ldrb	r2, [r7, #6]
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff ff45 	bl	80017d4 <SSD1306_DrawPixel>
 800194a:	e014      	b.n	8001976 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <SSD1306_Putc+0xfc>)
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	b29b      	uxth	r3, r3
 8001954:	4413      	add	r3, r2
 8001956:	b298      	uxth	r0, r3
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <SSD1306_Putc+0xfc>)
 800195a:	885a      	ldrh	r2, [r3, #2]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	b29b      	uxth	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	b299      	uxth	r1, r3
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	f7ff ff2f 	bl	80017d4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3301      	adds	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4293      	cmp	r3, r2
 8001986:	d3c8      	bcc.n	800191a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	461a      	mov	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4293      	cmp	r3, r2
 8001998:	d3ad      	bcc.n	80018f6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <SSD1306_Putc+0xfc>)
 800199c:	881a      	ldrh	r2, [r3, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <SSD1306_Putc+0xfc>)
 80019aa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80019ac:	79fb      	ldrb	r3, [r7, #7]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200004c0 	.word	0x200004c0

080019bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	4613      	mov	r3, r2
 80019c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019ca:	e012      	b.n	80019f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	79fa      	ldrb	r2, [r7, #7]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff71 	bl	80018bc <SSD1306_Putc>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d002      	beq.n	80019ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	e008      	b.n	80019fe <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1e8      	bne.n	80019cc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	781b      	ldrb	r3, [r3, #0]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff feca 	bl	80017a4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001a10:	f7ff fe9a 	bl	8001748 <SSD1306_UpdateScreen>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <ssd1306_I2C_Init+0x24>)
 8001a20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a22:	e002      	b.n	8001a2a <ssd1306_I2C_Init+0x12>
		p--;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	0003d090 	.word	0x0003d090

08001a40 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b0c7      	sub	sp, #284	; 0x11c
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	4604      	mov	r4, r0
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4639      	mov	r1, r7
 8001a4c:	600a      	str	r2, [r1, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	4622      	mov	r2, r4
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	1dbb      	adds	r3, r7, #6
 8001a58:	4602      	mov	r2, r0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	460a      	mov	r2, r1
 8001a60:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	1dba      	adds	r2, r7, #6
 8001a68:	7812      	ldrb	r2, [r2, #0]
 8001a6a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a72:	e010      	b.n	8001a96 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001a74:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a78:	463a      	mov	r2, r7
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a82:	3301      	adds	r3, #1
 8001a84:	7811      	ldrb	r1, [r2, #0]
 8001a86:	f107 020c 	add.w	r2, r7, #12
 8001a8a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001a8c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a90:	3301      	adds	r3, #1
 8001a92:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	1d3a      	adds	r2, r7, #4
 8001a9e:	8812      	ldrh	r2, [r2, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8e7      	bhi.n	8001a74 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001aa4:	1dfb      	adds	r3, r7, #7
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b299      	uxth	r1, r3
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b298      	uxth	r0, r3
 8001ab2:	f107 020c 	add.w	r2, r7, #12
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4603      	mov	r3, r0
 8001abc:	4803      	ldr	r0, [pc, #12]	; (8001acc <ssd1306_I2C_WriteMulti+0x8c>)
 8001abe:	f001 f975 	bl	8002dac <HAL_I2C_Master_Transmit>
}
 8001ac2:	bf00      	nop
 8001ac4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	20000504 	.word	0x20000504

08001ad0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	460b      	mov	r3, r1
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	b299      	uxth	r1, r3
 8001aee:	f107 020c 	add.w	r2, r7, #12
 8001af2:	230a      	movs	r3, #10
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2302      	movs	r3, #2
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <ssd1306_I2C_Write+0x38>)
 8001afa:	f001 f957 	bl	8002dac <HAL_I2C_Master_Transmit>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000504 	.word	0x20000504

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_MspInit+0x60>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_MspInit+0x60>)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <HardFault_Handler+0x4>

08001b82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <MemManage_Handler+0x4>

08001b88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <BusFault_Handler+0x4>

08001b8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <UsageFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbc:	f000 f92e 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <ADC1_2_IRQHandler+0x10>)
 8001bca:	f000 fadd 	bl	8002188 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200004d4 	.word	0x200004d4

08001bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <TIM2_IRQHandler+0x10>)
 8001bde:	f002 fa79 	bl	80040d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20001414 	.word	0x20001414

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f002 fda6 	bl	800476c <__errno>
 8001c20:	4602      	mov	r2, r0
 8001c22:	230c      	movs	r3, #12
 8001c24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20005000 	.word	0x20005000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	200004c8 	.word	0x200004c8
 8001c54:	20001468 	.word	0x20001468

08001c58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001c8a:	2209      	movs	r2, #9
 8001c8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 923-1;
 8001c94:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001c96:	f240 329a 	movw	r2, #922	; 0x39a
 8001c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ca8:	4813      	ldr	r0, [pc, #76]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001caa:	f002 f971 	bl	8003f90 <HAL_TIM_Base_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001cb4:	f7ff fc7e 	bl	80015b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001cc6:	f002 fb0d 	bl	80042e4 <HAL_TIM_ConfigClockSource>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cd0:	f7ff fc70 	bl	80015b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_TIM2_Init+0x94>)
 8001ce2:	f002 fcd3 	bl	800468c <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cec:	f7ff fc62 	bl	80015b4 <Error_Handler>
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20001414 	.word	0x20001414

08001cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0c:	d113      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	201c      	movs	r0, #28
 8001d2c:	f000 fd5d 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d30:	201c      	movs	r0, #28
 8001d32:	f000 fd76 	bl	8002822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d46:	e003      	b.n	8001d50 <LoopCopyDataInit>

08001d48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d4e:	3104      	adds	r1, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d50:	480a      	ldr	r0, [pc, #40]	; (8001d7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d58:	d3f6      	bcc.n	8001d48 <CopyDataInit>
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d5c:	e002      	b.n	8001d64 <LoopFillZerobss>

08001d5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d60:	f842 3b04 	str.w	r3, [r2], #4

08001d64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d68:	d3f9      	bcc.n	8001d5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d6a:	f7ff ff75 	bl	8001c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f002 fd03 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d72:	f7ff f975 	bl	8001060 <main>
  bx lr
 8001d76:	4770      	bx	lr
  ldr r3, =_sidata
 8001d78:	08006970 	.word	0x08006970
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d80:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8001d84:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8001d88:	20001464 	.word	0x20001464

08001d8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <CAN1_RX1_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <HAL_Init+0x28>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_Init+0x28>)
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 fd17 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff feae 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fd2f 	bl	800283e <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df8:	f000 fcf7 	bl	80027ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000010 	.word	0x20000010
 8001e14:	20000018 	.word	0x20000018
 8001e18:	20000014 	.word	0x20000014

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	20000018 	.word	0x20000018
 8001e3c:	2000145c 	.word	0x2000145c

08001e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	2000145c 	.word	0x2000145c

08001e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0be      	b.n	8001ff4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe fe26 	bl	8000ae4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fb8b 	bl	80025b4 <ADC_ConversionStop_Disable>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 8099 	bne.w	8001fe2 <HAL_ADC_Init+0x18e>
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 8095 	bne.w	8001fe2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ec0:	f023 0302 	bic.w	r3, r3, #2
 8001ec4:	f043 0202 	orr.w	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ed4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7b1b      	ldrb	r3, [r3, #12]
 8001eda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001edc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eec:	d003      	beq.n	8001ef6 <HAL_ADC_Init+0xa2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_ADC_Init+0xa8>
 8001ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efa:	e000      	b.n	8001efe <HAL_ADC_Init+0xaa>
 8001efc:	2300      	movs	r3, #0
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7d1b      	ldrb	r3, [r3, #20]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d119      	bne.n	8001f40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7b1b      	ldrb	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	035a      	lsls	r2, r3, #13
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	e00b      	b.n	8001f40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f043 0220 	orr.w	r2, r3, #32
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_ADC_Init+0x1a8>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	430b      	orrs	r3, r1
 8001f66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f70:	d003      	beq.n	8001f7a <HAL_ADC_Init+0x126>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d104      	bne.n	8001f84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	051b      	lsls	r3, r3, #20
 8001f82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_ADC_Init+0x1ac>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	f023 0303 	bic.w	r3, r3, #3
 8001fb6:	f043 0201 	orr.w	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fbe:	e018      	b.n	8001ff2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	f023 0312 	bic.w	r3, r3, #18
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fe0:	e007      	b.n	8001ff2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	f043 0210 	orr.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	ffe1f7fd 	.word	0xffe1f7fd
 8002000:	ff1f0efe 	.word	0xff1f0efe

08002004 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_ADC_Start_IT+0x1a>
 800201a:	2302      	movs	r3, #2
 800201c:	e0a0      	b.n	8002160 <HAL_ADC_Start_IT+0x15c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa72 	bl	8002510 <ADC_Enable>
 800202c:	4603      	mov	r3, r0
 800202e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 808f 	bne.w	8002156 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a45      	ldr	r2, [pc, #276]	; (8002168 <HAL_ADC_Start_IT+0x164>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d105      	bne.n	8002062 <HAL_ADC_Start_IT+0x5e>
 8002056:	4b45      	ldr	r3, [pc, #276]	; (800216c <HAL_ADC_Start_IT+0x168>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d026      	beq.n	80020ca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002084:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208c:	e01d      	b.n	80020ca <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a33      	ldr	r2, [pc, #204]	; (800216c <HAL_ADC_Start_IT+0x168>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d004      	beq.n	80020ae <HAL_ADC_Start_IT+0xaa>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <HAL_ADC_Start_IT+0x164>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10d      	bne.n	80020ca <HAL_ADC_Start_IT+0xc6>
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <HAL_ADC_Start_IT+0x168>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	f023 0206 	bic.w	r2, r3, #6
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020e2:	e002      	b.n	80020ea <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f06f 0202 	mvn.w	r2, #2
 80020fa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002116:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800211a:	d113      	bne.n	8002144 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_ADC_Start_IT+0x164>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d105      	bne.n	8002132 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_ADC_Start_IT+0x168>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d108      	bne.n	8002144 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	e00c      	b.n	800215e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	e003      	b.n	800215e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40012800 	.word	0x40012800
 800216c:	40012400 	.word	0x40012400

08002170 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d140      	bne.n	8002220 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d139      	bne.n	8002220 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021d2:	d11d      	bne.n	8002210 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d119      	bne.n	8002210 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0220 	bic.w	r2, r2, #32
 80021ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff f9c1 	bl	8001598 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f06f 0212 	mvn.w	r2, #18
 800221e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b80      	cmp	r3, #128	; 0x80
 800222c:	d14f      	bne.n	80022ce <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b04      	cmp	r3, #4
 800223a:	d148      	bne.n	80022ce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800225e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002262:	d012      	beq.n	800228a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800226e:	2b00      	cmp	r3, #0
 8002270:	d125      	bne.n	80022be <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800227c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002280:	d11d      	bne.n	80022be <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002286:	2b00      	cmp	r3, #0
 8002288:	d119      	bne.n	80022be <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002298:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f043 0201 	orr.w	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9b2 	bl	8002628 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 020c 	mvn.w	r2, #12
 80022cc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b40      	cmp	r3, #64	; 0x40
 80022da:	d114      	bne.n	8002306 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10d      	bne.n	8002306 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f809 	bl	800230e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0201 	mvn.w	r2, #1
 8002304:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x20>
 800233c:	2302      	movs	r3, #2
 800233e:	e0dc      	b.n	80024fa <HAL_ADC_ConfigChannel+0x1da>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b06      	cmp	r3, #6
 800234e:	d81c      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	3b05      	subs	r3, #5
 8002362:	221f      	movs	r2, #31
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	4019      	ands	r1, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b05      	subs	r3, #5
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	635a      	str	r2, [r3, #52]	; 0x34
 8002388:	e03c      	b.n	8002404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d81c      	bhi.n	80023cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	3b23      	subs	r3, #35	; 0x23
 80023a4:	221f      	movs	r2, #31
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	4019      	ands	r1, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	3b23      	subs	r3, #35	; 0x23
 80023be:	fa00 f203 	lsl.w	r2, r0, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
 80023ca:	e01b      	b.n	8002404 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b41      	subs	r3, #65	; 0x41
 80023de:	221f      	movs	r2, #31
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4019      	ands	r1, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	3b41      	subs	r3, #65	; 0x41
 80023f8:	fa00 f203 	lsl.w	r2, r0, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b09      	cmp	r3, #9
 800240a:	d91c      	bls.n	8002446 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68d9      	ldr	r1, [r3, #12]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	3b1e      	subs	r3, #30
 800241e:	2207      	movs	r2, #7
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	4019      	ands	r1, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6898      	ldr	r0, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	3b1e      	subs	r3, #30
 8002438:	fa00 f203 	lsl.w	r2, r0, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	e019      	b.n	800247a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6919      	ldr	r1, [r3, #16]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	2207      	movs	r2, #7
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	4019      	ands	r1, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6898      	ldr	r0, [r3, #8]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	fa00 f203 	lsl.w	r2, r0, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d003      	beq.n	800248a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002486:	2b11      	cmp	r3, #17
 8002488:	d132      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_ADC_ConfigChannel+0x1e4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d125      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d126      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d11a      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <HAL_ADC_ConfigChannel+0x1e8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_ADC_ConfigChannel+0x1ec>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	0c9a      	lsrs	r2, r3, #18
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024d0:	e002      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x1b2>
 80024de:	e007      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40012400 	.word	0x40012400
 8002508:	20000010 	.word	0x20000010
 800250c:	431bde83 	.word	0x431bde83

08002510 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d039      	beq.n	80025a2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <ADC_Enable+0x9c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <ADC_Enable+0xa0>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800254c:	e002      	b.n	8002554 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3b01      	subs	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f9      	bne.n	800254e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800255a:	f7ff fc71 	bl	8001e40 <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002560:	e018      	b.n	8002594 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002562:	f7ff fc6d 	bl	8001e40 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d911      	bls.n	8002594 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f043 0210 	orr.w	r2, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e007      	b.n	80025a4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d1df      	bne.n	8002562 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000010 	.word	0x20000010
 80025b0:	431bde83 	.word	0x431bde83

080025b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d127      	bne.n	800261e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025de:	f7ff fc2f 	bl	8001e40 <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025e4:	e014      	b.n	8002610 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025e6:	f7ff fc2b 	bl	8001e40 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d90d      	bls.n	8002610 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	f043 0210 	orr.w	r2, r3, #16
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e007      	b.n	8002620 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d0e3      	beq.n	80025e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
	...

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4906      	ldr	r1, [pc, #24]	; (80026d4 <__NVIC_EnableIRQ+0x34>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027b4:	f7ff ff90 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff2d 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff42 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ff90 	bl	800272c <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff5f 	bl	80026d8 <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff35 	bl	80026a0 <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffa2 	bl	8002790 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b08b      	sub	sp, #44	; 0x2c
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286a:	e127      	b.n	8002abc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800286c:	2201      	movs	r2, #1
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 8116 	bne.w	8002ab6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b12      	cmp	r3, #18
 8002890:	d034      	beq.n	80028fc <HAL_GPIO_Init+0xa4>
 8002892:	2b12      	cmp	r3, #18
 8002894:	d80d      	bhi.n	80028b2 <HAL_GPIO_Init+0x5a>
 8002896:	2b02      	cmp	r3, #2
 8002898:	d02b      	beq.n	80028f2 <HAL_GPIO_Init+0x9a>
 800289a:	2b02      	cmp	r3, #2
 800289c:	d804      	bhi.n	80028a8 <HAL_GPIO_Init+0x50>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d031      	beq.n	8002906 <HAL_GPIO_Init+0xae>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d01c      	beq.n	80028e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028a6:	e048      	b.n	800293a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d043      	beq.n	8002934 <HAL_GPIO_Init+0xdc>
 80028ac:	2b11      	cmp	r3, #17
 80028ae:	d01b      	beq.n	80028e8 <HAL_GPIO_Init+0x90>
          break;
 80028b0:	e043      	b.n	800293a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028b2:	4a89      	ldr	r2, [pc, #548]	; (8002ad8 <HAL_GPIO_Init+0x280>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d026      	beq.n	8002906 <HAL_GPIO_Init+0xae>
 80028b8:	4a87      	ldr	r2, [pc, #540]	; (8002ad8 <HAL_GPIO_Init+0x280>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d806      	bhi.n	80028cc <HAL_GPIO_Init+0x74>
 80028be:	4a87      	ldr	r2, [pc, #540]	; (8002adc <HAL_GPIO_Init+0x284>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d020      	beq.n	8002906 <HAL_GPIO_Init+0xae>
 80028c4:	4a86      	ldr	r2, [pc, #536]	; (8002ae0 <HAL_GPIO_Init+0x288>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01d      	beq.n	8002906 <HAL_GPIO_Init+0xae>
          break;
 80028ca:	e036      	b.n	800293a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028cc:	4a85      	ldr	r2, [pc, #532]	; (8002ae4 <HAL_GPIO_Init+0x28c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0xae>
 80028d2:	4a85      	ldr	r2, [pc, #532]	; (8002ae8 <HAL_GPIO_Init+0x290>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d016      	beq.n	8002906 <HAL_GPIO_Init+0xae>
 80028d8:	4a84      	ldr	r2, [pc, #528]	; (8002aec <HAL_GPIO_Init+0x294>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0xae>
          break;
 80028de:	e02c      	b.n	800293a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e028      	b.n	800293a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	3304      	adds	r3, #4
 80028ee:	623b      	str	r3, [r7, #32]
          break;
 80028f0:	e023      	b.n	800293a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	3308      	adds	r3, #8
 80028f8:	623b      	str	r3, [r7, #32]
          break;
 80028fa:	e01e      	b.n	800293a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	330c      	adds	r3, #12
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e019      	b.n	800293a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800290e:	2304      	movs	r3, #4
 8002910:	623b      	str	r3, [r7, #32]
          break;
 8002912:	e012      	b.n	800293a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800291c:	2308      	movs	r3, #8
 800291e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	611a      	str	r2, [r3, #16]
          break;
 8002926:	e008      	b.n	800293a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002928:	2308      	movs	r3, #8
 800292a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	615a      	str	r2, [r3, #20]
          break;
 8002932:	e002      	b.n	800293a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2bff      	cmp	r3, #255	; 0xff
 800293e:	d801      	bhi.n	8002944 <HAL_GPIO_Init+0xec>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	e001      	b.n	8002948 <HAL_GPIO_Init+0xf0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3304      	adds	r3, #4
 8002948:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2bff      	cmp	r3, #255	; 0xff
 800294e:	d802      	bhi.n	8002956 <HAL_GPIO_Init+0xfe>
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	e002      	b.n	800295c <HAL_GPIO_Init+0x104>
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	3b08      	subs	r3, #8
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	210f      	movs	r1, #15
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	401a      	ands	r2, r3
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	431a      	orrs	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8096 	beq.w	8002ab6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800298a:	4b59      	ldr	r3, [pc, #356]	; (8002af0 <HAL_GPIO_Init+0x298>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_GPIO_Init+0x298>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6193      	str	r3, [r2, #24]
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <HAL_GPIO_Init+0x298>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a2:	4a54      	ldr	r2, [pc, #336]	; (8002af4 <HAL_GPIO_Init+0x29c>)
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4b      	ldr	r2, [pc, #300]	; (8002af8 <HAL_GPIO_Init+0x2a0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_GPIO_Init+0x19e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4a      	ldr	r2, [pc, #296]	; (8002afc <HAL_GPIO_Init+0x2a4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <HAL_GPIO_Init+0x19a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <HAL_GPIO_Init+0x2a8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x196>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <HAL_GPIO_Init+0x2ac>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_GPIO_Init+0x192>
 80029e6:	2303      	movs	r3, #3
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x1a0>
 80029ea:	2304      	movs	r3, #4
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x1a0>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x1a0>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x1a0>
 80029f6:	2300      	movs	r3, #0
 80029f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a08:	493a      	ldr	r1, [pc, #232]	; (8002af4 <HAL_GPIO_Init+0x29c>)
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d006      	beq.n	8002a30 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4938      	ldr	r1, [pc, #224]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
 8002a2e:	e006      	b.n	8002a3e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4933      	ldr	r1, [pc, #204]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	492e      	ldr	r1, [pc, #184]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 8002a56:	e006      	b.n	8002a66 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4929      	ldr	r1, [pc, #164]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a72:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	4924      	ldr	r1, [pc, #144]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
 8002a7e:	e006      	b.n	8002a8e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a80:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	491f      	ldr	r1, [pc, #124]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	491a      	ldr	r1, [pc, #104]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60cb      	str	r3, [r1, #12]
 8002aa6:	e006      	b.n	8002ab6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	4915      	ldr	r1, [pc, #84]	; (8002b08 <HAL_GPIO_Init+0x2b0>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	3301      	adds	r3, #1
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f aed0 	bne.w	800286c <HAL_GPIO_Init+0x14>
  }
}
 8002acc:	bf00      	nop
 8002ace:	372c      	adds	r7, #44	; 0x2c
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	10210000 	.word	0x10210000
 8002adc:	10110000 	.word	0x10110000
 8002ae0:	10120000 	.word	0x10120000
 8002ae4:	10310000 	.word	0x10310000
 8002ae8:	10320000 	.word	0x10320000
 8002aec:	10220000 	.word	0x10220000
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40010800 	.word	0x40010800
 8002afc:	40010c00 	.word	0x40010c00
 8002b00:	40011000 	.word	0x40011000
 8002b04:	40011400 	.word	0x40011400
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b28:	e003      	b.n	8002b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b2a:	887b      	ldrh	r3, [r7, #2]
 8002b2c:	041a      	lsls	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e11f      	b.n	8002d8e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe f8b6 	bl	8000cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba0:	f001 f90e 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8002ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4a7b      	ldr	r2, [pc, #492]	; (8002d98 <HAL_I2C_Init+0x25c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d807      	bhi.n	8002bc0 <HAL_I2C_Init+0x84>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a7a      	ldr	r2, [pc, #488]	; (8002d9c <HAL_I2C_Init+0x260>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	bf94      	ite	ls
 8002bb8:	2301      	movls	r3, #1
 8002bba:	2300      	movhi	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e006      	b.n	8002bce <HAL_I2C_Init+0x92>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a77      	ldr	r2, [pc, #476]	; (8002da0 <HAL_I2C_Init+0x264>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	bf94      	ite	ls
 8002bc8:	2301      	movls	r3, #1
 8002bca:	2300      	movhi	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0db      	b.n	8002d8e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4a72      	ldr	r2, [pc, #456]	; (8002da4 <HAL_I2C_Init+0x268>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	0c9b      	lsrs	r3, r3, #18
 8002be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4a64      	ldr	r2, [pc, #400]	; (8002d98 <HAL_I2C_Init+0x25c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d802      	bhi.n	8002c10 <HAL_I2C_Init+0xd4>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	e009      	b.n	8002c24 <HAL_I2C_Init+0xe8>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	4a63      	ldr	r2, [pc, #396]	; (8002da8 <HAL_I2C_Init+0x26c>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	3301      	adds	r3, #1
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6812      	ldr	r2, [r2, #0]
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4956      	ldr	r1, [pc, #344]	; (8002d98 <HAL_I2C_Init+0x25c>)
 8002c40:	428b      	cmp	r3, r1
 8002c42:	d80d      	bhi.n	8002c60 <HAL_I2C_Init+0x124>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1e59      	subs	r1, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	bf38      	it	cc
 8002c5c:	2304      	movcc	r3, #4
 8002c5e:	e04f      	b.n	8002d00 <HAL_I2C_Init+0x1c4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <HAL_I2C_Init+0x150>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e58      	subs	r0, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e012      	b.n	8002cb2 <HAL_I2C_Init+0x176>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1e58      	subs	r0, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	0099      	lsls	r1, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Init+0x17e>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e022      	b.n	8002d00 <HAL_I2C_Init+0x1c4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_I2C_Init+0x1a4>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e58      	subs	r0, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	440b      	add	r3, r1
 8002cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cde:	e00f      	b.n	8002d00 <HAL_I2C_Init+0x1c4>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	0099      	lsls	r1, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	6809      	ldr	r1, [r1, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6911      	ldr	r1, [r2, #16]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	000186a0 	.word	0x000186a0
 8002d9c:	001e847f 	.word	0x001e847f
 8002da0:	003d08ff 	.word	0x003d08ff
 8002da4:	431bde83 	.word	0x431bde83
 8002da8:	10624dd3 	.word	0x10624dd3

08002dac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	461a      	mov	r2, r3
 8002db8:	460b      	mov	r3, r1
 8002dba:	817b      	strh	r3, [r7, #10]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc0:	f7ff f83e 	bl	8001e40 <HAL_GetTick>
 8002dc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	f040 80e0 	bne.w	8002f94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2319      	movs	r3, #25
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4970      	ldr	r1, [pc, #448]	; (8002fa0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fa92 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
 8002dec:	e0d3      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_I2C_Master_Transmit+0x50>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e0cc      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d007      	beq.n	8002e22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2221      	movs	r2, #33	; 0x21
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	893a      	ldrh	r2, [r7, #8]
 8002e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a50      	ldr	r2, [pc, #320]	; (8002fa4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e64:	8979      	ldrh	r1, [r7, #10]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	6a3a      	ldr	r2, [r7, #32]
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f9ca 	bl	8003204 <I2C_MasterRequestWrite>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e08d      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e90:	e066      	b.n	8002f60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fb0c 	bl	80034b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d107      	bne.n	8002eba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06b      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d11b      	bne.n	8002f34 <HAL_I2C_Master_Transmit+0x188>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d017      	beq.n	8002f34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	6a39      	ldr	r1, [r7, #32]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fafc 	bl	8003536 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d107      	bne.n	8002f5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e01a      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d194      	bne.n	8002e92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	00100002 	.word	0x00100002
 8002fa4:	ffff0000 	.word	0xffff0000

08002fa8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7fe ff42 	bl	8001e40 <HAL_GetTick>
 8002fbc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b20      	cmp	r3, #32
 8002fcc:	f040 8111 	bne.w	80031f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2319      	movs	r3, #25
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4988      	ldr	r1, [pc, #544]	; (80031fc <HAL_I2C_IsDeviceReady+0x254>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f994 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e104      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_I2C_IsDeviceReady+0x50>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0fd      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d007      	beq.n	800301e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f042 0201 	orr.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2224      	movs	r2, #36	; 0x24
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a70      	ldr	r2, [pc, #448]	; (8003200 <HAL_I2C_IsDeviceReady+0x258>)
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003050:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2200      	movs	r2, #0
 800305a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f952 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003078:	d103      	bne.n	8003082 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0b6      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003086:	897b      	ldrh	r3, [r7, #10]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003094:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe fed3 	bl	8001e40 <HAL_GetTick>
 800309a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ca:	e025      	b.n	8003118 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030cc:	f7fe feb8 	bl	8001e40 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d302      	bcc.n	80030e2 <HAL_I2C_IsDeviceReady+0x13a>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	22a0      	movs	r2, #160	; 0xa0
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2ba0      	cmp	r3, #160	; 0xa0
 8003122:	d005      	beq.n	8003130 <HAL_I2C_IsDeviceReady+0x188>
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <HAL_I2C_IsDeviceReady+0x188>
 800312a:	7dbb      	ldrb	r3, [r7, #22]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0cd      	beq.n	80030cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d129      	bne.n	800319a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003154:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	2319      	movs	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	4921      	ldr	r1, [pc, #132]	; (80031fc <HAL_I2C_IsDeviceReady+0x254>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f8c6 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e036      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e02c      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2319      	movs	r3, #25
 80031ba:	2201      	movs	r2, #1
 80031bc:	490f      	ldr	r1, [pc, #60]	; (80031fc <HAL_I2C_IsDeviceReady+0x254>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f8a2 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e012      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	3301      	adds	r3, #1
 80031d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	f4ff af32 	bcc.w	8003042 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3720      	adds	r7, #32
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	00100002 	.word	0x00100002
 8003200:	ffff0000 	.word	0xffff0000

08003204 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d006      	beq.n	800322e <I2C_MasterRequestWrite+0x2a>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d003      	beq.n	800322e <I2C_MasterRequestWrite+0x2a>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800322c:	d108      	bne.n	8003240 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e00b      	b.n	8003258 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	2b12      	cmp	r3, #18
 8003246:	d107      	bne.n	8003258 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003256:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f84f 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00d      	beq.n	800328c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327e:	d103      	bne.n	8003288 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003286:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e035      	b.n	80032f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003294:	d108      	bne.n	80032a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003296:	897b      	ldrh	r3, [r7, #10]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032a4:	611a      	str	r2, [r3, #16]
 80032a6:	e01b      	b.n	80032e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032a8:	897b      	ldrh	r3, [r7, #10]
 80032aa:	11db      	asrs	r3, r3, #7
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0306 	and.w	r3, r3, #6
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f063 030f 	orn	r3, r3, #15
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	490e      	ldr	r1, [pc, #56]	; (8003300 <I2C_MasterRequestWrite+0xfc>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f875 	bl	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e010      	b.n	80032f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032d6:	897b      	ldrh	r3, [r7, #10]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4907      	ldr	r1, [pc, #28]	; (8003304 <I2C_MasterRequestWrite+0x100>)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f865 	bl	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	00010008 	.word	0x00010008
 8003304:	00010002 	.word	0x00010002

08003308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003318:	e025      	b.n	8003366 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003320:	d021      	beq.n	8003366 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7fe fd8d 	bl	8001e40 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d116      	bne.n	8003366 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f043 0220 	orr.w	r2, r3, #32
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e023      	b.n	80033ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d10d      	bne.n	800338c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	e00c      	b.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d0b6      	beq.n	800331a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033c4:	e051      	b.n	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d123      	bne.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f043 0204 	orr.w	r2, r3, #4
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e046      	b.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003424:	d021      	beq.n	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fe fd0b 	bl	8001e40 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d116      	bne.n	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e020      	b.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10c      	bne.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4013      	ands	r3, r2
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	bf14      	ite	ne
 8003486:	2301      	movne	r3, #1
 8003488:	2300      	moveq	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	e00b      	b.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	43da      	mvns	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf14      	ite	ne
 80034a0:	2301      	movne	r3, #1
 80034a2:	2300      	moveq	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d18d      	bne.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c0:	e02d      	b.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f878 	bl	80035b8 <I2C_IsAcknowledgeFailed>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e02d      	b.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d8:	d021      	beq.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fe fcb1 	bl	8001e40 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d116      	bne.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e007      	b.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b80      	cmp	r3, #128	; 0x80
 800352a:	d1ca      	bne.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003542:	e02d      	b.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f837 	bl	80035b8 <I2C_IsAcknowledgeFailed>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e02d      	b.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800355a:	d021      	beq.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355c:	f7fe fc70 	bl	8001e40 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	d302      	bcc.n	8003572 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d116      	bne.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e007      	b.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d1ca      	bne.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ce:	d11b      	bne.n	8003608 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e26c      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8087 	beq.w	8003742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003634:	4b92      	ldr	r3, [pc, #584]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	2b04      	cmp	r3, #4
 800363e:	d00c      	beq.n	800365a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003640:	4b8f      	ldr	r3, [pc, #572]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d112      	bne.n	8003672 <HAL_RCC_OscConfig+0x5e>
 800364c:	4b8c      	ldr	r3, [pc, #560]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d10b      	bne.n	8003672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365a:	4b89      	ldr	r3, [pc, #548]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d06c      	beq.n	8003740 <HAL_RCC_OscConfig+0x12c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d168      	bne.n	8003740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e246      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x76>
 800367c:	4b80      	ldr	r3, [pc, #512]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7f      	ldr	r2, [pc, #508]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e02e      	b.n	80036e8 <HAL_RCC_OscConfig+0xd4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x98>
 8003692:	4b7b      	ldr	r3, [pc, #492]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7a      	ldr	r2, [pc, #488]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b78      	ldr	r3, [pc, #480]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a77      	ldr	r2, [pc, #476]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e01d      	b.n	80036e8 <HAL_RCC_OscConfig+0xd4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0xbc>
 80036b6:	4b72      	ldr	r3, [pc, #456]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a71      	ldr	r2, [pc, #452]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b6f      	ldr	r3, [pc, #444]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6e      	ldr	r2, [pc, #440]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0xd4>
 80036d0:	4b6b      	ldr	r3, [pc, #428]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6a      	ldr	r2, [pc, #424]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b68      	ldr	r3, [pc, #416]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a67      	ldr	r2, [pc, #412]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7fe fba6 	bl	8001e40 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f8:	f7fe fba2 	bl	8001e40 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b64      	cmp	r3, #100	; 0x64
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e1fa      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	4b5d      	ldr	r3, [pc, #372]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0xe4>
 8003716:	e014      	b.n	8003742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe fb92 	bl	8001e40 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fe fb8e 	bl	8001e40 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e1e6      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x10c>
 800373e:	e000      	b.n	8003742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d063      	beq.n	8003816 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800374e:	4b4c      	ldr	r3, [pc, #304]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800375a:	4b49      	ldr	r3, [pc, #292]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b08      	cmp	r3, #8
 8003764:	d11c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x18c>
 8003766:	4b46      	ldr	r3, [pc, #280]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d116      	bne.n	80037a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	4b43      	ldr	r3, [pc, #268]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_RCC_OscConfig+0x176>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1ba      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	4b3d      	ldr	r3, [pc, #244]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4939      	ldr	r1, [pc, #228]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	e03a      	b.n	8003816 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d020      	beq.n	80037ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a8:	4b36      	ldr	r3, [pc, #216]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fe fb47 	bl	8001e40 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b6:	f7fe fb43 	bl	8001e40 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e19b      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4927      	ldr	r1, [pc, #156]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
 80037e8:	e015      	b.n	8003816 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ea:	4b26      	ldr	r3, [pc, #152]	; (8003884 <HAL_RCC_OscConfig+0x270>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe fb26 	bl	8001e40 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f8:	f7fe fb22 	bl	8001e40 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e17a      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03a      	beq.n	8003898 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d019      	beq.n	800385e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382a:	4b17      	ldr	r3, [pc, #92]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7fe fb06 	bl	8001e40 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fe fb02 	bl	8001e40 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e15a      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <HAL_RCC_OscConfig+0x26c>)
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003856:	2001      	movs	r0, #1
 8003858:	f000 fac6 	bl	8003de8 <RCC_Delay>
 800385c:	e01c      	b.n	8003898 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_RCC_OscConfig+0x274>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe faec 	bl	8001e40 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386a:	e00f      	b.n	800388c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800386c:	f7fe fae8 	bl	8001e40 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d908      	bls.n	800388c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e140      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	42420000 	.word	0x42420000
 8003888:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800388c:	4b9e      	ldr	r3, [pc, #632]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e9      	bne.n	800386c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80a6 	beq.w	80039f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038aa:	4b97      	ldr	r3, [pc, #604]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	4b94      	ldr	r3, [pc, #592]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4a93      	ldr	r2, [pc, #588]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c0:	61d3      	str	r3, [r2, #28]
 80038c2:	4b91      	ldr	r3, [pc, #580]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ce:	2301      	movs	r3, #1
 80038d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d2:	4b8e      	ldr	r3, [pc, #568]	; (8003b0c <HAL_RCC_OscConfig+0x4f8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d118      	bne.n	8003910 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038de:	4b8b      	ldr	r3, [pc, #556]	; (8003b0c <HAL_RCC_OscConfig+0x4f8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a8a      	ldr	r2, [pc, #552]	; (8003b0c <HAL_RCC_OscConfig+0x4f8>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ea:	f7fe faa9 	bl	8001e40 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f2:	f7fe faa5 	bl	8001e40 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b64      	cmp	r3, #100	; 0x64
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0fd      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	4b81      	ldr	r3, [pc, #516]	; (8003b0c <HAL_RCC_OscConfig+0x4f8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d106      	bne.n	8003926 <HAL_RCC_OscConfig+0x312>
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	4a7a      	ldr	r2, [pc, #488]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6213      	str	r3, [r2, #32]
 8003924:	e02d      	b.n	8003982 <HAL_RCC_OscConfig+0x36e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x334>
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	6213      	str	r3, [r2, #32]
 800393a:	4b73      	ldr	r3, [pc, #460]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4a72      	ldr	r2, [pc, #456]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	6213      	str	r3, [r2, #32]
 8003946:	e01c      	b.n	8003982 <HAL_RCC_OscConfig+0x36e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b05      	cmp	r3, #5
 800394e:	d10c      	bne.n	800396a <HAL_RCC_OscConfig+0x356>
 8003950:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	4a6c      	ldr	r2, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003956:	f043 0304 	orr.w	r3, r3, #4
 800395a:	6213      	str	r3, [r2, #32]
 800395c:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	4a69      	ldr	r2, [pc, #420]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	6213      	str	r3, [r2, #32]
 8003968:	e00b      	b.n	8003982 <HAL_RCC_OscConfig+0x36e>
 800396a:	4b67      	ldr	r3, [pc, #412]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4a66      	ldr	r2, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6213      	str	r3, [r2, #32]
 8003976:	4b64      	ldr	r3, [pc, #400]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	4a63      	ldr	r2, [pc, #396]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	f023 0304 	bic.w	r3, r3, #4
 8003980:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d015      	beq.n	80039b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fe fa59 	bl	8001e40 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fe fa55 	bl	8001e40 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0ab      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a8:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ee      	beq.n	8003992 <HAL_RCC_OscConfig+0x37e>
 80039b4:	e014      	b.n	80039e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fe fa43 	bl	8001e40 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fe fa3f 	bl	8001e40 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e095      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d4:	4b4c      	ldr	r3, [pc, #304]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ee      	bne.n	80039be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e6:	4b48      	ldr	r3, [pc, #288]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4a47      	ldr	r2, [pc, #284]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8081 	beq.w	8003afe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039fc:	4b42      	ldr	r3, [pc, #264]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d061      	beq.n	8003acc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d146      	bne.n	8003a9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a10:	4b3f      	ldr	r3, [pc, #252]	; (8003b10 <HAL_RCC_OscConfig+0x4fc>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7fe fa13 	bl	8001e40 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fe fa0f 	bl	8001e40 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e067      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a30:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d108      	bne.n	8003a58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	492d      	ldr	r1, [pc, #180]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a19      	ldr	r1, [r3, #32]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	4927      	ldr	r1, [pc, #156]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a70:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <HAL_RCC_OscConfig+0x4fc>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a76:	f7fe f9e3 	bl	8001e40 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe f9df 	bl	8001e40 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e037      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x46a>
 8003a9c:	e02f      	b.n	8003afe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <HAL_RCC_OscConfig+0x4fc>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fe f9cc 	bl	8001e40 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fe f9c8 	bl	8001e40 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e020      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x498>
 8003aca:	e018      	b.n	8003afe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e013      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_OscConfig+0x4f4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	42420060 	.word	0x42420060

08003b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0d0      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d910      	bls.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0207 	bic.w	r2, r3, #7
 8003b3e:	4965      	ldr	r1, [pc, #404]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b63      	ldr	r3, [pc, #396]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0b8      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b70:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b88:	4b53      	ldr	r3, [pc, #332]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a52      	ldr	r2, [pc, #328]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b50      	ldr	r3, [pc, #320]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	494d      	ldr	r1, [pc, #308]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d040      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07f      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e073      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06b      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4936      	ldr	r1, [pc, #216]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7fe f91c 	bl	8001e40 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fe f918 	bl	8001e40 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e053      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b2d      	ldr	r3, [pc, #180]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d210      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	4922      	ldr	r1, [pc, #136]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e032      	b.n	8003cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4916      	ldr	r1, [pc, #88]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c8e:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	490e      	ldr	r1, [pc, #56]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ca2:	f000 f821 	bl	8003ce8 <HAL_RCC_GetSysClockFreq>
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
 8003cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8003cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe f87a 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	080068d4 	.word	0x080068d4
 8003ce0:	20000010 	.word	0x20000010
 8003ce4:	20000014 	.word	0x20000014

08003ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce8:	b490      	push	{r4, r7}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cee:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cf0:	1d3c      	adds	r4, r7, #4
 8003cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	2300      	movs	r3, #0
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d12:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d002      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x40>
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0x46>
 8003d26:	e02d      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d2a:	623b      	str	r3, [r7, #32]
      break;
 8003d2c:	e02d      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	0c9b      	lsrs	r3, r3, #18
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c5b      	lsrs	r3, r3, #17
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d66:	fb02 f203 	mul.w	r2, r2, r3
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	e004      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	623b      	str	r3, [r7, #32]
      break;
 8003d82:	e002      	b.n	8003d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d86:	623b      	str	r3, [r7, #32]
      break;
 8003d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3728      	adds	r7, #40	; 0x28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc90      	pop	{r4, r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	08006154 	.word	0x08006154
 8003d9c:	08006164 	.word	0x08006164
 8003da0:	40021000 	.word	0x40021000
 8003da4:	007a1200 	.word	0x007a1200
 8003da8:	003d0900 	.word	0x003d0900

08003dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b02      	ldr	r3, [pc, #8]	; (8003dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	20000010 	.word	0x20000010

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc4:	f7ff fff2 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dc8:	4601      	mov	r1, r0
 8003dca:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	4a03      	ldr	r2, [pc, #12]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd6:	5cd3      	ldrb	r3, [r2, r3]
 8003dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021000 	.word	0x40021000
 8003de4:	080068e4 	.word	0x080068e4

08003de8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <RCC_Delay+0x34>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <RCC_Delay+0x38>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	0a5b      	lsrs	r3, r3, #9
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e04:	bf00      	nop
  }
  while (Delay --);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	60fa      	str	r2, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f9      	bne.n	8003e04 <RCC_Delay+0x1c>
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000010 	.word	0x20000010
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d07d      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e40:	2300      	movs	r3, #0
 8003e42:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e44:	4b4f      	ldr	r3, [pc, #316]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e50:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	4a4b      	ldr	r2, [pc, #300]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	61d3      	str	r3, [r2, #28]
 8003e5c:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d118      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e78:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a42      	ldr	r2, [pc, #264]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e84:	f7fd ffdc 	bl	8001e40 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8a:	e008      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8c:	f7fd ffd8 	bl	8001e40 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e06d      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b3a      	ldr	r3, [pc, #232]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eaa:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d02e      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d027      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec8:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed8:	4b2c      	ldr	r3, [pc, #176]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ede:	4a29      	ldr	r2, [pc, #164]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d014      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fd ffa7 	bl	8001e40 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd ffa3 	bl	8001e40 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e036      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0ee      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4917      	ldr	r1, [pc, #92]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	490b      	ldr	r1, [pc, #44]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4904      	ldr	r1, [pc, #16]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	42420440 	.word	0x42420440

08003f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e041      	b.n	8004026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fea0 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f000 fa64 	bl	800449c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d001      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e03a      	b.n	80040be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <HAL_TIM_Base_Start_IT+0x98>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x58>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d009      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x58>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_TIM_Base_Start_IT+0x9c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_TIM_Base_Start_IT+0x58>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b06      	cmp	r3, #6
 8004098:	d010      	beq.n	80040bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	e007      	b.n	80040bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800

080040d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0202 	mvn.w	r2, #2
 8004100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9a4 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f997 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f9a6 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b04      	cmp	r3, #4
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0204 	mvn.w	r2, #4
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f97a 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f96d 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f97c 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b08      	cmp	r3, #8
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0208 	mvn.w	r2, #8
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2204      	movs	r2, #4
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f950 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f943 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f952 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0210 	mvn.w	r2, #16
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2208      	movs	r2, #8
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f926 	bl	8004464 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f919 	bl	8004452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f928 	bl	8004476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0201 	mvn.w	r2, #1
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd f992 	bl	800157c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa6b 	bl	800475a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8ec 	bl	8004488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0220 	mvn.w	r2, #32
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa36 	bl	8004748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_ConfigClockSource+0x18>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0a6      	b.n	800444a <HAL_TIM_ConfigClockSource+0x166>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800431a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004322:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d067      	beq.n	8004404 <HAL_TIM_ConfigClockSource+0x120>
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d80b      	bhi.n	8004350 <HAL_TIM_ConfigClockSource+0x6c>
 8004338:	2b10      	cmp	r3, #16
 800433a:	d073      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0x140>
 800433c:	2b10      	cmp	r3, #16
 800433e:	d802      	bhi.n	8004346 <HAL_TIM_ConfigClockSource+0x62>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d06f      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004344:	e078      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004346:	2b20      	cmp	r3, #32
 8004348:	d06c      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0x140>
 800434a:	2b30      	cmp	r3, #48	; 0x30
 800434c:	d06a      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800434e:	e073      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004350:	2b70      	cmp	r3, #112	; 0x70
 8004352:	d00d      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0x8c>
 8004354:	2b70      	cmp	r3, #112	; 0x70
 8004356:	d804      	bhi.n	8004362 <HAL_TIM_ConfigClockSource+0x7e>
 8004358:	2b50      	cmp	r3, #80	; 0x50
 800435a:	d033      	beq.n	80043c4 <HAL_TIM_ConfigClockSource+0xe0>
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d041      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004360:	e06a      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d066      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x152>
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436c:	d017      	beq.n	800439e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800436e:	e063      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6899      	ldr	r1, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f000 f965 	bl	800464e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004392:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]
      break;
 800439c:	e04c      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f000 f94e 	bl	800464e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c0:	609a      	str	r2, [r3, #8]
      break;
 80043c2:	e039      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	461a      	mov	r2, r3
 80043d2:	f000 f8c5 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2150      	movs	r1, #80	; 0x50
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f91c 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 80043e2:	e029      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	461a      	mov	r2, r3
 80043f2:	f000 f8e3 	bl	80045bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2160      	movs	r1, #96	; 0x60
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f90c 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8004402:	e019      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	461a      	mov	r2, r3
 8004412:	f000 f8a5 	bl	8004560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f8fc 	bl	800461a <TIM_ITRx_SetConfig>
      break;
 8004422:	e009      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f000 f8f3 	bl	800461a <TIM_ITRx_SetConfig>
        break;
 8004434:	e000      	b.n	8004438 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
	...

0800449c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a29      	ldr	r2, [pc, #164]	; (8004554 <TIM_Base_SetConfig+0xb8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00b      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ba:	d007      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a26      	ldr	r2, [pc, #152]	; (8004558 <TIM_Base_SetConfig+0xbc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_Base_SetConfig+0x30>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a25      	ldr	r2, [pc, #148]	; (800455c <TIM_Base_SetConfig+0xc0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d108      	bne.n	80044de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <TIM_Base_SetConfig+0xb8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ec:	d007      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <TIM_Base_SetConfig+0xbc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_Base_SetConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a18      	ldr	r2, [pc, #96]	; (800455c <TIM_Base_SetConfig+0xc0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d108      	bne.n	8004510 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a07      	ldr	r2, [pc, #28]	; (8004554 <TIM_Base_SetConfig+0xb8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800

08004560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 030a 	bic.w	r3, r3, #10
 800459c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr

080045bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f023 0210 	bic.w	r2, r3, #16
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	031b      	lsls	r3, r3, #12
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	f043 0307 	orr.w	r3, r3, #7
 800463c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004668:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	021a      	lsls	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	431a      	orrs	r2, r3
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4313      	orrs	r3, r2
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	609a      	str	r2, [r3, #8]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e046      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a16      	ldr	r2, [pc, #88]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a12      	ldr	r2, [pc, #72]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a10      	ldr	r2, [pc, #64]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800

08004748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <__errno>:
 800476c:	4b01      	ldr	r3, [pc, #4]	; (8004774 <__errno+0x8>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	2000001c 	.word	0x2000001c

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	2500      	movs	r5, #0
 800477c:	4e0c      	ldr	r6, [pc, #48]	; (80047b0 <__libc_init_array+0x38>)
 800477e:	4c0d      	ldr	r4, [pc, #52]	; (80047b4 <__libc_init_array+0x3c>)
 8004780:	1ba4      	subs	r4, r4, r6
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	42a5      	cmp	r5, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	f001 fcb2 	bl	80060f0 <_init>
 800478c:	2500      	movs	r5, #0
 800478e:	4e0a      	ldr	r6, [pc, #40]	; (80047b8 <__libc_init_array+0x40>)
 8004790:	4c0a      	ldr	r4, [pc, #40]	; (80047bc <__libc_init_array+0x44>)
 8004792:	1ba4      	subs	r4, r4, r6
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	42a5      	cmp	r5, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047a0:	4798      	blx	r3
 80047a2:	3501      	adds	r5, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047aa:	4798      	blx	r3
 80047ac:	3501      	adds	r5, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08006968 	.word	0x08006968
 80047b4:	08006968 	.word	0x08006968
 80047b8:	08006968 	.word	0x08006968
 80047bc:	0800696c 	.word	0x0800696c

080047c0 <memset>:
 80047c0:	4603      	mov	r3, r0
 80047c2:	4402      	add	r2, r0
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d100      	bne.n	80047ca <memset+0xa>
 80047c8:	4770      	bx	lr
 80047ca:	f803 1b01 	strb.w	r1, [r3], #1
 80047ce:	e7f9      	b.n	80047c4 <memset+0x4>

080047d0 <siprintf>:
 80047d0:	b40e      	push	{r1, r2, r3}
 80047d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047d6:	b500      	push	{lr}
 80047d8:	b09c      	sub	sp, #112	; 0x70
 80047da:	ab1d      	add	r3, sp, #116	; 0x74
 80047dc:	9002      	str	r0, [sp, #8]
 80047de:	9006      	str	r0, [sp, #24]
 80047e0:	9107      	str	r1, [sp, #28]
 80047e2:	9104      	str	r1, [sp, #16]
 80047e4:	4808      	ldr	r0, [pc, #32]	; (8004808 <siprintf+0x38>)
 80047e6:	4909      	ldr	r1, [pc, #36]	; (800480c <siprintf+0x3c>)
 80047e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ec:	9105      	str	r1, [sp, #20]
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	a902      	add	r1, sp, #8
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	f000 f866 	bl	80048c4 <_svfiprintf_r>
 80047f8:	2200      	movs	r2, #0
 80047fa:	9b02      	ldr	r3, [sp, #8]
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	b01c      	add	sp, #112	; 0x70
 8004800:	f85d eb04 	ldr.w	lr, [sp], #4
 8004804:	b003      	add	sp, #12
 8004806:	4770      	bx	lr
 8004808:	2000001c 	.word	0x2000001c
 800480c:	ffff0208 	.word	0xffff0208

08004810 <__ssputs_r>:
 8004810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	688e      	ldr	r6, [r1, #8]
 8004816:	4682      	mov	sl, r0
 8004818:	429e      	cmp	r6, r3
 800481a:	460c      	mov	r4, r1
 800481c:	4690      	mov	r8, r2
 800481e:	4699      	mov	r9, r3
 8004820:	d837      	bhi.n	8004892 <__ssputs_r+0x82>
 8004822:	898a      	ldrh	r2, [r1, #12]
 8004824:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004828:	d031      	beq.n	800488e <__ssputs_r+0x7e>
 800482a:	2302      	movs	r3, #2
 800482c:	6825      	ldr	r5, [r4, #0]
 800482e:	6909      	ldr	r1, [r1, #16]
 8004830:	1a6f      	subs	r7, r5, r1
 8004832:	6965      	ldr	r5, [r4, #20]
 8004834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004838:	fb95 f5f3 	sdiv	r5, r5, r3
 800483c:	f109 0301 	add.w	r3, r9, #1
 8004840:	443b      	add	r3, r7
 8004842:	429d      	cmp	r5, r3
 8004844:	bf38      	it	cc
 8004846:	461d      	movcc	r5, r3
 8004848:	0553      	lsls	r3, r2, #21
 800484a:	d530      	bpl.n	80048ae <__ssputs_r+0x9e>
 800484c:	4629      	mov	r1, r5
 800484e:	f000 fb37 	bl	8004ec0 <_malloc_r>
 8004852:	4606      	mov	r6, r0
 8004854:	b950      	cbnz	r0, 800486c <__ssputs_r+0x5c>
 8004856:	230c      	movs	r3, #12
 8004858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800485c:	f8ca 3000 	str.w	r3, [sl]
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004866:	81a3      	strh	r3, [r4, #12]
 8004868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486c:	463a      	mov	r2, r7
 800486e:	6921      	ldr	r1, [r4, #16]
 8004870:	f000 fab6 	bl	8004de0 <memcpy>
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800487a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	6126      	str	r6, [r4, #16]
 8004882:	443e      	add	r6, r7
 8004884:	6026      	str	r6, [r4, #0]
 8004886:	464e      	mov	r6, r9
 8004888:	6165      	str	r5, [r4, #20]
 800488a:	1bed      	subs	r5, r5, r7
 800488c:	60a5      	str	r5, [r4, #8]
 800488e:	454e      	cmp	r6, r9
 8004890:	d900      	bls.n	8004894 <__ssputs_r+0x84>
 8004892:	464e      	mov	r6, r9
 8004894:	4632      	mov	r2, r6
 8004896:	4641      	mov	r1, r8
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	f000 faac 	bl	8004df6 <memmove>
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	2000      	movs	r0, #0
 80048a2:	1b9b      	subs	r3, r3, r6
 80048a4:	60a3      	str	r3, [r4, #8]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	441e      	add	r6, r3
 80048aa:	6026      	str	r6, [r4, #0]
 80048ac:	e7dc      	b.n	8004868 <__ssputs_r+0x58>
 80048ae:	462a      	mov	r2, r5
 80048b0:	f000 fb60 	bl	8004f74 <_realloc_r>
 80048b4:	4606      	mov	r6, r0
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d1e2      	bne.n	8004880 <__ssputs_r+0x70>
 80048ba:	6921      	ldr	r1, [r4, #16]
 80048bc:	4650      	mov	r0, sl
 80048be:	f000 fab3 	bl	8004e28 <_free_r>
 80048c2:	e7c8      	b.n	8004856 <__ssputs_r+0x46>

080048c4 <_svfiprintf_r>:
 80048c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c8:	461d      	mov	r5, r3
 80048ca:	898b      	ldrh	r3, [r1, #12]
 80048cc:	b09d      	sub	sp, #116	; 0x74
 80048ce:	061f      	lsls	r7, r3, #24
 80048d0:	4680      	mov	r8, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	4616      	mov	r6, r2
 80048d6:	d50f      	bpl.n	80048f8 <_svfiprintf_r+0x34>
 80048d8:	690b      	ldr	r3, [r1, #16]
 80048da:	b96b      	cbnz	r3, 80048f8 <_svfiprintf_r+0x34>
 80048dc:	2140      	movs	r1, #64	; 0x40
 80048de:	f000 faef 	bl	8004ec0 <_malloc_r>
 80048e2:	6020      	str	r0, [r4, #0]
 80048e4:	6120      	str	r0, [r4, #16]
 80048e6:	b928      	cbnz	r0, 80048f4 <_svfiprintf_r+0x30>
 80048e8:	230c      	movs	r3, #12
 80048ea:	f8c8 3000 	str.w	r3, [r8]
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f2:	e0c8      	b.n	8004a86 <_svfiprintf_r+0x1c2>
 80048f4:	2340      	movs	r3, #64	; 0x40
 80048f6:	6163      	str	r3, [r4, #20]
 80048f8:	2300      	movs	r3, #0
 80048fa:	9309      	str	r3, [sp, #36]	; 0x24
 80048fc:	2320      	movs	r3, #32
 80048fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004902:	2330      	movs	r3, #48	; 0x30
 8004904:	f04f 0b01 	mov.w	fp, #1
 8004908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800490c:	9503      	str	r5, [sp, #12]
 800490e:	4637      	mov	r7, r6
 8004910:	463d      	mov	r5, r7
 8004912:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004916:	b10b      	cbz	r3, 800491c <_svfiprintf_r+0x58>
 8004918:	2b25      	cmp	r3, #37	; 0x25
 800491a:	d13e      	bne.n	800499a <_svfiprintf_r+0xd6>
 800491c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004920:	d00b      	beq.n	800493a <_svfiprintf_r+0x76>
 8004922:	4653      	mov	r3, sl
 8004924:	4632      	mov	r2, r6
 8004926:	4621      	mov	r1, r4
 8004928:	4640      	mov	r0, r8
 800492a:	f7ff ff71 	bl	8004810 <__ssputs_r>
 800492e:	3001      	adds	r0, #1
 8004930:	f000 80a4 	beq.w	8004a7c <_svfiprintf_r+0x1b8>
 8004934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004936:	4453      	add	r3, sl
 8004938:	9309      	str	r3, [sp, #36]	; 0x24
 800493a:	783b      	ldrb	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 809d 	beq.w	8004a7c <_svfiprintf_r+0x1b8>
 8004942:	2300      	movs	r3, #0
 8004944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	9307      	str	r3, [sp, #28]
 8004950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004954:	931a      	str	r3, [sp, #104]	; 0x68
 8004956:	462f      	mov	r7, r5
 8004958:	2205      	movs	r2, #5
 800495a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800495e:	4850      	ldr	r0, [pc, #320]	; (8004aa0 <_svfiprintf_r+0x1dc>)
 8004960:	f000 fa30 	bl	8004dc4 <memchr>
 8004964:	9b04      	ldr	r3, [sp, #16]
 8004966:	b9d0      	cbnz	r0, 800499e <_svfiprintf_r+0xda>
 8004968:	06d9      	lsls	r1, r3, #27
 800496a:	bf44      	itt	mi
 800496c:	2220      	movmi	r2, #32
 800496e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004972:	071a      	lsls	r2, r3, #28
 8004974:	bf44      	itt	mi
 8004976:	222b      	movmi	r2, #43	; 0x2b
 8004978:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800497c:	782a      	ldrb	r2, [r5, #0]
 800497e:	2a2a      	cmp	r2, #42	; 0x2a
 8004980:	d015      	beq.n	80049ae <_svfiprintf_r+0xea>
 8004982:	462f      	mov	r7, r5
 8004984:	2000      	movs	r0, #0
 8004986:	250a      	movs	r5, #10
 8004988:	9a07      	ldr	r2, [sp, #28]
 800498a:	4639      	mov	r1, r7
 800498c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004990:	3b30      	subs	r3, #48	; 0x30
 8004992:	2b09      	cmp	r3, #9
 8004994:	d94d      	bls.n	8004a32 <_svfiprintf_r+0x16e>
 8004996:	b1b8      	cbz	r0, 80049c8 <_svfiprintf_r+0x104>
 8004998:	e00f      	b.n	80049ba <_svfiprintf_r+0xf6>
 800499a:	462f      	mov	r7, r5
 800499c:	e7b8      	b.n	8004910 <_svfiprintf_r+0x4c>
 800499e:	4a40      	ldr	r2, [pc, #256]	; (8004aa0 <_svfiprintf_r+0x1dc>)
 80049a0:	463d      	mov	r5, r7
 80049a2:	1a80      	subs	r0, r0, r2
 80049a4:	fa0b f000 	lsl.w	r0, fp, r0
 80049a8:	4318      	orrs	r0, r3
 80049aa:	9004      	str	r0, [sp, #16]
 80049ac:	e7d3      	b.n	8004956 <_svfiprintf_r+0x92>
 80049ae:	9a03      	ldr	r2, [sp, #12]
 80049b0:	1d11      	adds	r1, r2, #4
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	9103      	str	r1, [sp, #12]
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	db01      	blt.n	80049be <_svfiprintf_r+0xfa>
 80049ba:	9207      	str	r2, [sp, #28]
 80049bc:	e004      	b.n	80049c8 <_svfiprintf_r+0x104>
 80049be:	4252      	negs	r2, r2
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	9207      	str	r2, [sp, #28]
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	783b      	ldrb	r3, [r7, #0]
 80049ca:	2b2e      	cmp	r3, #46	; 0x2e
 80049cc:	d10c      	bne.n	80049e8 <_svfiprintf_r+0x124>
 80049ce:	787b      	ldrb	r3, [r7, #1]
 80049d0:	2b2a      	cmp	r3, #42	; 0x2a
 80049d2:	d133      	bne.n	8004a3c <_svfiprintf_r+0x178>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	3702      	adds	r7, #2
 80049d8:	1d1a      	adds	r2, r3, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	9203      	str	r2, [sp, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bfb8      	it	lt
 80049e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	4d2e      	ldr	r5, [pc, #184]	; (8004aa4 <_svfiprintf_r+0x1e0>)
 80049ea:	2203      	movs	r2, #3
 80049ec:	7839      	ldrb	r1, [r7, #0]
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 f9e8 	bl	8004dc4 <memchr>
 80049f4:	b138      	cbz	r0, 8004a06 <_svfiprintf_r+0x142>
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	1b40      	subs	r0, r0, r5
 80049fa:	fa03 f000 	lsl.w	r0, r3, r0
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	3701      	adds	r7, #1
 8004a02:	4303      	orrs	r3, r0
 8004a04:	9304      	str	r3, [sp, #16]
 8004a06:	7839      	ldrb	r1, [r7, #0]
 8004a08:	2206      	movs	r2, #6
 8004a0a:	4827      	ldr	r0, [pc, #156]	; (8004aa8 <_svfiprintf_r+0x1e4>)
 8004a0c:	1c7e      	adds	r6, r7, #1
 8004a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a12:	f000 f9d7 	bl	8004dc4 <memchr>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d038      	beq.n	8004a8c <_svfiprintf_r+0x1c8>
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <_svfiprintf_r+0x1e8>)
 8004a1c:	bb13      	cbnz	r3, 8004a64 <_svfiprintf_r+0x1a0>
 8004a1e:	9b03      	ldr	r3, [sp, #12]
 8004a20:	3307      	adds	r3, #7
 8004a22:	f023 0307 	bic.w	r3, r3, #7
 8004a26:	3308      	adds	r3, #8
 8004a28:	9303      	str	r3, [sp, #12]
 8004a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2c:	444b      	add	r3, r9
 8004a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a30:	e76d      	b.n	800490e <_svfiprintf_r+0x4a>
 8004a32:	fb05 3202 	mla	r2, r5, r2, r3
 8004a36:	2001      	movs	r0, #1
 8004a38:	460f      	mov	r7, r1
 8004a3a:	e7a6      	b.n	800498a <_svfiprintf_r+0xc6>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	250a      	movs	r5, #10
 8004a40:	4619      	mov	r1, r3
 8004a42:	3701      	adds	r7, #1
 8004a44:	9305      	str	r3, [sp, #20]
 8004a46:	4638      	mov	r0, r7
 8004a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a4c:	3a30      	subs	r2, #48	; 0x30
 8004a4e:	2a09      	cmp	r2, #9
 8004a50:	d903      	bls.n	8004a5a <_svfiprintf_r+0x196>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0c8      	beq.n	80049e8 <_svfiprintf_r+0x124>
 8004a56:	9105      	str	r1, [sp, #20]
 8004a58:	e7c6      	b.n	80049e8 <_svfiprintf_r+0x124>
 8004a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8004a5e:	2301      	movs	r3, #1
 8004a60:	4607      	mov	r7, r0
 8004a62:	e7f0      	b.n	8004a46 <_svfiprintf_r+0x182>
 8004a64:	ab03      	add	r3, sp, #12
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <_svfiprintf_r+0x1ec>)
 8004a6c:	a904      	add	r1, sp, #16
 8004a6e:	4640      	mov	r0, r8
 8004a70:	f3af 8000 	nop.w
 8004a74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004a78:	4681      	mov	r9, r0
 8004a7a:	d1d6      	bne.n	8004a2a <_svfiprintf_r+0x166>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	065b      	lsls	r3, r3, #25
 8004a80:	f53f af35 	bmi.w	80048ee <_svfiprintf_r+0x2a>
 8004a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a86:	b01d      	add	sp, #116	; 0x74
 8004a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8c:	ab03      	add	r3, sp, #12
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	4622      	mov	r2, r4
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <_svfiprintf_r+0x1ec>)
 8004a94:	a904      	add	r1, sp, #16
 8004a96:	4640      	mov	r0, r8
 8004a98:	f000 f882 	bl	8004ba0 <_printf_i>
 8004a9c:	e7ea      	b.n	8004a74 <_svfiprintf_r+0x1b0>
 8004a9e:	bf00      	nop
 8004aa0:	080068ec 	.word	0x080068ec
 8004aa4:	080068f2 	.word	0x080068f2
 8004aa8:	080068f6 	.word	0x080068f6
 8004aac:	00000000 	.word	0x00000000
 8004ab0:	08004811 	.word	0x08004811

08004ab4 <_printf_common>:
 8004ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	4691      	mov	r9, r2
 8004aba:	461f      	mov	r7, r3
 8004abc:	688a      	ldr	r2, [r1, #8]
 8004abe:	690b      	ldr	r3, [r1, #16]
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bfb8      	it	lt
 8004ac6:	4613      	movlt	r3, r2
 8004ac8:	f8c9 3000 	str.w	r3, [r9]
 8004acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ad6:	b112      	cbz	r2, 8004ade <_printf_common+0x2a>
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f8c9 3000 	str.w	r3, [r9]
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	0699      	lsls	r1, r3, #26
 8004ae2:	bf42      	ittt	mi
 8004ae4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ae8:	3302      	addmi	r3, #2
 8004aea:	f8c9 3000 	strmi.w	r3, [r9]
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	f015 0506 	ands.w	r5, r5, #6
 8004af4:	d107      	bne.n	8004b06 <_printf_common+0x52>
 8004af6:	f104 0a19 	add.w	sl, r4, #25
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	f8d9 2000 	ldr.w	r2, [r9]
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	42ab      	cmp	r3, r5
 8004b04:	dc29      	bgt.n	8004b5a <_printf_common+0xa6>
 8004b06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	3300      	adds	r3, #0
 8004b0e:	bf18      	it	ne
 8004b10:	2301      	movne	r3, #1
 8004b12:	0692      	lsls	r2, r2, #26
 8004b14:	d42e      	bmi.n	8004b74 <_printf_common+0xc0>
 8004b16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	47c0      	blx	r8
 8004b20:	3001      	adds	r0, #1
 8004b22:	d021      	beq.n	8004b68 <_printf_common+0xb4>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	68e5      	ldr	r5, [r4, #12]
 8004b28:	f003 0306 	and.w	r3, r3, #6
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	bf18      	it	ne
 8004b30:	2500      	movne	r5, #0
 8004b32:	f8d9 2000 	ldr.w	r2, [r9]
 8004b36:	f04f 0900 	mov.w	r9, #0
 8004b3a:	bf08      	it	eq
 8004b3c:	1aad      	subeq	r5, r5, r2
 8004b3e:	68a3      	ldr	r3, [r4, #8]
 8004b40:	6922      	ldr	r2, [r4, #16]
 8004b42:	bf08      	it	eq
 8004b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	bfc4      	itt	gt
 8004b4c:	1a9b      	subgt	r3, r3, r2
 8004b4e:	18ed      	addgt	r5, r5, r3
 8004b50:	341a      	adds	r4, #26
 8004b52:	454d      	cmp	r5, r9
 8004b54:	d11a      	bne.n	8004b8c <_printf_common+0xd8>
 8004b56:	2000      	movs	r0, #0
 8004b58:	e008      	b.n	8004b6c <_printf_common+0xb8>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4652      	mov	r2, sl
 8004b5e:	4639      	mov	r1, r7
 8004b60:	4630      	mov	r0, r6
 8004b62:	47c0      	blx	r8
 8004b64:	3001      	adds	r0, #1
 8004b66:	d103      	bne.n	8004b70 <_printf_common+0xbc>
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b70:	3501      	adds	r5, #1
 8004b72:	e7c2      	b.n	8004afa <_printf_common+0x46>
 8004b74:	2030      	movs	r0, #48	; 0x30
 8004b76:	18e1      	adds	r1, r4, r3
 8004b78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b82:	4422      	add	r2, r4
 8004b84:	3302      	adds	r3, #2
 8004b86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b8a:	e7c4      	b.n	8004b16 <_printf_common+0x62>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4622      	mov	r2, r4
 8004b90:	4639      	mov	r1, r7
 8004b92:	4630      	mov	r0, r6
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d0e6      	beq.n	8004b68 <_printf_common+0xb4>
 8004b9a:	f109 0901 	add.w	r9, r9, #1
 8004b9e:	e7d8      	b.n	8004b52 <_printf_common+0x9e>

08004ba0 <_printf_i>:
 8004ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ba8:	460c      	mov	r4, r1
 8004baa:	7e09      	ldrb	r1, [r1, #24]
 8004bac:	b085      	sub	sp, #20
 8004bae:	296e      	cmp	r1, #110	; 0x6e
 8004bb0:	4617      	mov	r7, r2
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	4698      	mov	r8, r3
 8004bb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bb8:	f000 80b3 	beq.w	8004d22 <_printf_i+0x182>
 8004bbc:	d822      	bhi.n	8004c04 <_printf_i+0x64>
 8004bbe:	2963      	cmp	r1, #99	; 0x63
 8004bc0:	d036      	beq.n	8004c30 <_printf_i+0x90>
 8004bc2:	d80a      	bhi.n	8004bda <_printf_i+0x3a>
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	f000 80b9 	beq.w	8004d3c <_printf_i+0x19c>
 8004bca:	2958      	cmp	r1, #88	; 0x58
 8004bcc:	f000 8083 	beq.w	8004cd6 <_printf_i+0x136>
 8004bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bd8:	e032      	b.n	8004c40 <_printf_i+0xa0>
 8004bda:	2964      	cmp	r1, #100	; 0x64
 8004bdc:	d001      	beq.n	8004be2 <_printf_i+0x42>
 8004bde:	2969      	cmp	r1, #105	; 0x69
 8004be0:	d1f6      	bne.n	8004bd0 <_printf_i+0x30>
 8004be2:	6820      	ldr	r0, [r4, #0]
 8004be4:	6813      	ldr	r3, [r2, #0]
 8004be6:	0605      	lsls	r5, r0, #24
 8004be8:	f103 0104 	add.w	r1, r3, #4
 8004bec:	d52a      	bpl.n	8004c44 <_printf_i+0xa4>
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6011      	str	r1, [r2, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da03      	bge.n	8004bfe <_printf_i+0x5e>
 8004bf6:	222d      	movs	r2, #45	; 0x2d
 8004bf8:	425b      	negs	r3, r3
 8004bfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004bfe:	486f      	ldr	r0, [pc, #444]	; (8004dbc <_printf_i+0x21c>)
 8004c00:	220a      	movs	r2, #10
 8004c02:	e039      	b.n	8004c78 <_printf_i+0xd8>
 8004c04:	2973      	cmp	r1, #115	; 0x73
 8004c06:	f000 809d 	beq.w	8004d44 <_printf_i+0x1a4>
 8004c0a:	d808      	bhi.n	8004c1e <_printf_i+0x7e>
 8004c0c:	296f      	cmp	r1, #111	; 0x6f
 8004c0e:	d020      	beq.n	8004c52 <_printf_i+0xb2>
 8004c10:	2970      	cmp	r1, #112	; 0x70
 8004c12:	d1dd      	bne.n	8004bd0 <_printf_i+0x30>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	f043 0320 	orr.w	r3, r3, #32
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	e003      	b.n	8004c26 <_printf_i+0x86>
 8004c1e:	2975      	cmp	r1, #117	; 0x75
 8004c20:	d017      	beq.n	8004c52 <_printf_i+0xb2>
 8004c22:	2978      	cmp	r1, #120	; 0x78
 8004c24:	d1d4      	bne.n	8004bd0 <_printf_i+0x30>
 8004c26:	2378      	movs	r3, #120	; 0x78
 8004c28:	4865      	ldr	r0, [pc, #404]	; (8004dc0 <_printf_i+0x220>)
 8004c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c2e:	e055      	b.n	8004cdc <_printf_i+0x13c>
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c36:	1d19      	adds	r1, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6011      	str	r1, [r2, #0]
 8004c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c40:	2301      	movs	r3, #1
 8004c42:	e08c      	b.n	8004d5e <_printf_i+0x1be>
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c4a:	6011      	str	r1, [r2, #0]
 8004c4c:	bf18      	it	ne
 8004c4e:	b21b      	sxthne	r3, r3
 8004c50:	e7cf      	b.n	8004bf2 <_printf_i+0x52>
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	6825      	ldr	r5, [r4, #0]
 8004c56:	1d18      	adds	r0, r3, #4
 8004c58:	6010      	str	r0, [r2, #0]
 8004c5a:	0628      	lsls	r0, r5, #24
 8004c5c:	d501      	bpl.n	8004c62 <_printf_i+0xc2>
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	e002      	b.n	8004c68 <_printf_i+0xc8>
 8004c62:	0668      	lsls	r0, r5, #25
 8004c64:	d5fb      	bpl.n	8004c5e <_printf_i+0xbe>
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	296f      	cmp	r1, #111	; 0x6f
 8004c6a:	bf14      	ite	ne
 8004c6c:	220a      	movne	r2, #10
 8004c6e:	2208      	moveq	r2, #8
 8004c70:	4852      	ldr	r0, [pc, #328]	; (8004dbc <_printf_i+0x21c>)
 8004c72:	2100      	movs	r1, #0
 8004c74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c78:	6865      	ldr	r5, [r4, #4]
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	60a5      	str	r5, [r4, #8]
 8004c7e:	f2c0 8095 	blt.w	8004dac <_printf_i+0x20c>
 8004c82:	6821      	ldr	r1, [r4, #0]
 8004c84:	f021 0104 	bic.w	r1, r1, #4
 8004c88:	6021      	str	r1, [r4, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d13d      	bne.n	8004d0a <_printf_i+0x16a>
 8004c8e:	2d00      	cmp	r5, #0
 8004c90:	f040 808e 	bne.w	8004db0 <_printf_i+0x210>
 8004c94:	4665      	mov	r5, ip
 8004c96:	2a08      	cmp	r2, #8
 8004c98:	d10b      	bne.n	8004cb2 <_printf_i+0x112>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	07db      	lsls	r3, r3, #31
 8004c9e:	d508      	bpl.n	8004cb2 <_printf_i+0x112>
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	6862      	ldr	r2, [r4, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	bfde      	ittt	le
 8004ca8:	2330      	movle	r3, #48	; 0x30
 8004caa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004cb2:	ebac 0305 	sub.w	r3, ip, r5
 8004cb6:	6123      	str	r3, [r4, #16]
 8004cb8:	f8cd 8000 	str.w	r8, [sp]
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	aa03      	add	r2, sp, #12
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f7ff fef6 	bl	8004ab4 <_printf_common>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d14d      	bne.n	8004d68 <_printf_i+0x1c8>
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cd0:	b005      	add	sp, #20
 8004cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cd6:	4839      	ldr	r0, [pc, #228]	; (8004dbc <_printf_i+0x21c>)
 8004cd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	6821      	ldr	r1, [r4, #0]
 8004ce0:	1d1d      	adds	r5, r3, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6015      	str	r5, [r2, #0]
 8004ce6:	060a      	lsls	r2, r1, #24
 8004ce8:	d50b      	bpl.n	8004d02 <_printf_i+0x162>
 8004cea:	07ca      	lsls	r2, r1, #31
 8004cec:	bf44      	itt	mi
 8004cee:	f041 0120 	orrmi.w	r1, r1, #32
 8004cf2:	6021      	strmi	r1, [r4, #0]
 8004cf4:	b91b      	cbnz	r3, 8004cfe <_printf_i+0x15e>
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	f022 0220 	bic.w	r2, r2, #32
 8004cfc:	6022      	str	r2, [r4, #0]
 8004cfe:	2210      	movs	r2, #16
 8004d00:	e7b7      	b.n	8004c72 <_printf_i+0xd2>
 8004d02:	064d      	lsls	r5, r1, #25
 8004d04:	bf48      	it	mi
 8004d06:	b29b      	uxthmi	r3, r3
 8004d08:	e7ef      	b.n	8004cea <_printf_i+0x14a>
 8004d0a:	4665      	mov	r5, ip
 8004d0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d10:	fb02 3311 	mls	r3, r2, r1, r3
 8004d14:	5cc3      	ldrb	r3, [r0, r3]
 8004d16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	d1f5      	bne.n	8004d0c <_printf_i+0x16c>
 8004d20:	e7b9      	b.n	8004c96 <_printf_i+0xf6>
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	6825      	ldr	r5, [r4, #0]
 8004d26:	1d18      	adds	r0, r3, #4
 8004d28:	6961      	ldr	r1, [r4, #20]
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	0628      	lsls	r0, r5, #24
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	d501      	bpl.n	8004d36 <_printf_i+0x196>
 8004d32:	6019      	str	r1, [r3, #0]
 8004d34:	e002      	b.n	8004d3c <_printf_i+0x19c>
 8004d36:	066a      	lsls	r2, r5, #25
 8004d38:	d5fb      	bpl.n	8004d32 <_printf_i+0x192>
 8004d3a:	8019      	strh	r1, [r3, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4665      	mov	r5, ip
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	e7b9      	b.n	8004cb8 <_printf_i+0x118>
 8004d44:	6813      	ldr	r3, [r2, #0]
 8004d46:	1d19      	adds	r1, r3, #4
 8004d48:	6011      	str	r1, [r2, #0]
 8004d4a:	681d      	ldr	r5, [r3, #0]
 8004d4c:	6862      	ldr	r2, [r4, #4]
 8004d4e:	2100      	movs	r1, #0
 8004d50:	4628      	mov	r0, r5
 8004d52:	f000 f837 	bl	8004dc4 <memchr>
 8004d56:	b108      	cbz	r0, 8004d5c <_printf_i+0x1bc>
 8004d58:	1b40      	subs	r0, r0, r5
 8004d5a:	6060      	str	r0, [r4, #4]
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	6123      	str	r3, [r4, #16]
 8004d60:	2300      	movs	r3, #0
 8004d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d66:	e7a7      	b.n	8004cb8 <_printf_i+0x118>
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	462a      	mov	r2, r5
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	47c0      	blx	r8
 8004d72:	3001      	adds	r0, #1
 8004d74:	d0aa      	beq.n	8004ccc <_printf_i+0x12c>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	079b      	lsls	r3, r3, #30
 8004d7a:	d413      	bmi.n	8004da4 <_printf_i+0x204>
 8004d7c:	68e0      	ldr	r0, [r4, #12]
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	4298      	cmp	r0, r3
 8004d82:	bfb8      	it	lt
 8004d84:	4618      	movlt	r0, r3
 8004d86:	e7a3      	b.n	8004cd0 <_printf_i+0x130>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	464a      	mov	r2, r9
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	4630      	mov	r0, r6
 8004d90:	47c0      	blx	r8
 8004d92:	3001      	adds	r0, #1
 8004d94:	d09a      	beq.n	8004ccc <_printf_i+0x12c>
 8004d96:	3501      	adds	r5, #1
 8004d98:	68e3      	ldr	r3, [r4, #12]
 8004d9a:	9a03      	ldr	r2, [sp, #12]
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	42ab      	cmp	r3, r5
 8004da0:	dcf2      	bgt.n	8004d88 <_printf_i+0x1e8>
 8004da2:	e7eb      	b.n	8004d7c <_printf_i+0x1dc>
 8004da4:	2500      	movs	r5, #0
 8004da6:	f104 0919 	add.w	r9, r4, #25
 8004daa:	e7f5      	b.n	8004d98 <_printf_i+0x1f8>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1ac      	bne.n	8004d0a <_printf_i+0x16a>
 8004db0:	7803      	ldrb	r3, [r0, #0]
 8004db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dba:	e76c      	b.n	8004c96 <_printf_i+0xf6>
 8004dbc:	080068fd 	.word	0x080068fd
 8004dc0:	0800690e 	.word	0x0800690e

08004dc4 <memchr>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	b2c9      	uxtb	r1, r1
 8004dc8:	4402      	add	r2, r0
 8004dca:	4290      	cmp	r0, r2
 8004dcc:	4603      	mov	r3, r0
 8004dce:	d101      	bne.n	8004dd4 <memchr+0x10>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e003      	b.n	8004ddc <memchr+0x18>
 8004dd4:	781c      	ldrb	r4, [r3, #0]
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	428c      	cmp	r4, r1
 8004dda:	d1f6      	bne.n	8004dca <memchr+0x6>
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd10      	pop	{r4, pc}

08004de0 <memcpy>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	1e43      	subs	r3, r0, #1
 8004de4:	440a      	add	r2, r1
 8004de6:	4291      	cmp	r1, r2
 8004de8:	d100      	bne.n	8004dec <memcpy+0xc>
 8004dea:	bd10      	pop	{r4, pc}
 8004dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004df4:	e7f7      	b.n	8004de6 <memcpy+0x6>

08004df6 <memmove>:
 8004df6:	4288      	cmp	r0, r1
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	eb01 0302 	add.w	r3, r1, r2
 8004dfe:	d807      	bhi.n	8004e10 <memmove+0x1a>
 8004e00:	1e42      	subs	r2, r0, #1
 8004e02:	4299      	cmp	r1, r3
 8004e04:	d00a      	beq.n	8004e1c <memmove+0x26>
 8004e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e0a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004e0e:	e7f8      	b.n	8004e02 <memmove+0xc>
 8004e10:	4283      	cmp	r3, r0
 8004e12:	d9f5      	bls.n	8004e00 <memmove+0xa>
 8004e14:	1881      	adds	r1, r0, r2
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	42d3      	cmn	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <memmove+0x28>
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e22:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004e26:	e7f7      	b.n	8004e18 <memmove+0x22>

08004e28 <_free_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	d043      	beq.n	8004eb8 <_free_r+0x90>
 8004e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e34:	1f0c      	subs	r4, r1, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfb8      	it	lt
 8004e3a:	18e4      	addlt	r4, r4, r3
 8004e3c:	f000 f8d0 	bl	8004fe0 <__malloc_lock>
 8004e40:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <_free_r+0x94>)
 8004e42:	6813      	ldr	r3, [r2, #0]
 8004e44:	4610      	mov	r0, r2
 8004e46:	b933      	cbnz	r3, 8004e56 <_free_r+0x2e>
 8004e48:	6063      	str	r3, [r4, #4]
 8004e4a:	6014      	str	r4, [r2, #0]
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e52:	f000 b8c6 	b.w	8004fe2 <__malloc_unlock>
 8004e56:	42a3      	cmp	r3, r4
 8004e58:	d90b      	bls.n	8004e72 <_free_r+0x4a>
 8004e5a:	6821      	ldr	r1, [r4, #0]
 8004e5c:	1862      	adds	r2, r4, r1
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	bf01      	itttt	eq
 8004e62:	681a      	ldreq	r2, [r3, #0]
 8004e64:	685b      	ldreq	r3, [r3, #4]
 8004e66:	1852      	addeq	r2, r2, r1
 8004e68:	6022      	streq	r2, [r4, #0]
 8004e6a:	6063      	str	r3, [r4, #4]
 8004e6c:	6004      	str	r4, [r0, #0]
 8004e6e:	e7ed      	b.n	8004e4c <_free_r+0x24>
 8004e70:	4613      	mov	r3, r2
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	b10a      	cbz	r2, 8004e7a <_free_r+0x52>
 8004e76:	42a2      	cmp	r2, r4
 8004e78:	d9fa      	bls.n	8004e70 <_free_r+0x48>
 8004e7a:	6819      	ldr	r1, [r3, #0]
 8004e7c:	1858      	adds	r0, r3, r1
 8004e7e:	42a0      	cmp	r0, r4
 8004e80:	d10b      	bne.n	8004e9a <_free_r+0x72>
 8004e82:	6820      	ldr	r0, [r4, #0]
 8004e84:	4401      	add	r1, r0
 8004e86:	1858      	adds	r0, r3, r1
 8004e88:	4282      	cmp	r2, r0
 8004e8a:	6019      	str	r1, [r3, #0]
 8004e8c:	d1de      	bne.n	8004e4c <_free_r+0x24>
 8004e8e:	6810      	ldr	r0, [r2, #0]
 8004e90:	6852      	ldr	r2, [r2, #4]
 8004e92:	4401      	add	r1, r0
 8004e94:	6019      	str	r1, [r3, #0]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	e7d8      	b.n	8004e4c <_free_r+0x24>
 8004e9a:	d902      	bls.n	8004ea2 <_free_r+0x7a>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	602b      	str	r3, [r5, #0]
 8004ea0:	e7d4      	b.n	8004e4c <_free_r+0x24>
 8004ea2:	6820      	ldr	r0, [r4, #0]
 8004ea4:	1821      	adds	r1, r4, r0
 8004ea6:	428a      	cmp	r2, r1
 8004ea8:	bf01      	itttt	eq
 8004eaa:	6811      	ldreq	r1, [r2, #0]
 8004eac:	6852      	ldreq	r2, [r2, #4]
 8004eae:	1809      	addeq	r1, r1, r0
 8004eb0:	6021      	streq	r1, [r4, #0]
 8004eb2:	6062      	str	r2, [r4, #4]
 8004eb4:	605c      	str	r4, [r3, #4]
 8004eb6:	e7c9      	b.n	8004e4c <_free_r+0x24>
 8004eb8:	bd38      	pop	{r3, r4, r5, pc}
 8004eba:	bf00      	nop
 8004ebc:	200004cc 	.word	0x200004cc

08004ec0 <_malloc_r>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	1ccd      	adds	r5, r1, #3
 8004ec4:	f025 0503 	bic.w	r5, r5, #3
 8004ec8:	3508      	adds	r5, #8
 8004eca:	2d0c      	cmp	r5, #12
 8004ecc:	bf38      	it	cc
 8004ece:	250c      	movcc	r5, #12
 8004ed0:	2d00      	cmp	r5, #0
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	db01      	blt.n	8004eda <_malloc_r+0x1a>
 8004ed6:	42a9      	cmp	r1, r5
 8004ed8:	d903      	bls.n	8004ee2 <_malloc_r+0x22>
 8004eda:	230c      	movs	r3, #12
 8004edc:	6033      	str	r3, [r6, #0]
 8004ede:	2000      	movs	r0, #0
 8004ee0:	bd70      	pop	{r4, r5, r6, pc}
 8004ee2:	f000 f87d 	bl	8004fe0 <__malloc_lock>
 8004ee6:	4a21      	ldr	r2, [pc, #132]	; (8004f6c <_malloc_r+0xac>)
 8004ee8:	6814      	ldr	r4, [r2, #0]
 8004eea:	4621      	mov	r1, r4
 8004eec:	b991      	cbnz	r1, 8004f14 <_malloc_r+0x54>
 8004eee:	4c20      	ldr	r4, [pc, #128]	; (8004f70 <_malloc_r+0xb0>)
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	b91b      	cbnz	r3, 8004efc <_malloc_r+0x3c>
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	f000 f863 	bl	8004fc0 <_sbrk_r>
 8004efa:	6020      	str	r0, [r4, #0]
 8004efc:	4629      	mov	r1, r5
 8004efe:	4630      	mov	r0, r6
 8004f00:	f000 f85e 	bl	8004fc0 <_sbrk_r>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d124      	bne.n	8004f52 <_malloc_r+0x92>
 8004f08:	230c      	movs	r3, #12
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	6033      	str	r3, [r6, #0]
 8004f0e:	f000 f868 	bl	8004fe2 <__malloc_unlock>
 8004f12:	e7e4      	b.n	8004ede <_malloc_r+0x1e>
 8004f14:	680b      	ldr	r3, [r1, #0]
 8004f16:	1b5b      	subs	r3, r3, r5
 8004f18:	d418      	bmi.n	8004f4c <_malloc_r+0x8c>
 8004f1a:	2b0b      	cmp	r3, #11
 8004f1c:	d90f      	bls.n	8004f3e <_malloc_r+0x7e>
 8004f1e:	600b      	str	r3, [r1, #0]
 8004f20:	18cc      	adds	r4, r1, r3
 8004f22:	50cd      	str	r5, [r1, r3]
 8004f24:	4630      	mov	r0, r6
 8004f26:	f000 f85c 	bl	8004fe2 <__malloc_unlock>
 8004f2a:	f104 000b 	add.w	r0, r4, #11
 8004f2e:	1d23      	adds	r3, r4, #4
 8004f30:	f020 0007 	bic.w	r0, r0, #7
 8004f34:	1ac3      	subs	r3, r0, r3
 8004f36:	d0d3      	beq.n	8004ee0 <_malloc_r+0x20>
 8004f38:	425a      	negs	r2, r3
 8004f3a:	50e2      	str	r2, [r4, r3]
 8004f3c:	e7d0      	b.n	8004ee0 <_malloc_r+0x20>
 8004f3e:	684b      	ldr	r3, [r1, #4]
 8004f40:	428c      	cmp	r4, r1
 8004f42:	bf16      	itet	ne
 8004f44:	6063      	strne	r3, [r4, #4]
 8004f46:	6013      	streq	r3, [r2, #0]
 8004f48:	460c      	movne	r4, r1
 8004f4a:	e7eb      	b.n	8004f24 <_malloc_r+0x64>
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	6849      	ldr	r1, [r1, #4]
 8004f50:	e7cc      	b.n	8004eec <_malloc_r+0x2c>
 8004f52:	1cc4      	adds	r4, r0, #3
 8004f54:	f024 0403 	bic.w	r4, r4, #3
 8004f58:	42a0      	cmp	r0, r4
 8004f5a:	d005      	beq.n	8004f68 <_malloc_r+0xa8>
 8004f5c:	1a21      	subs	r1, r4, r0
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 f82e 	bl	8004fc0 <_sbrk_r>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d0cf      	beq.n	8004f08 <_malloc_r+0x48>
 8004f68:	6025      	str	r5, [r4, #0]
 8004f6a:	e7db      	b.n	8004f24 <_malloc_r+0x64>
 8004f6c:	200004cc 	.word	0x200004cc
 8004f70:	200004d0 	.word	0x200004d0

08004f74 <_realloc_r>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	4607      	mov	r7, r0
 8004f78:	4614      	mov	r4, r2
 8004f7a:	460e      	mov	r6, r1
 8004f7c:	b921      	cbnz	r1, 8004f88 <_realloc_r+0x14>
 8004f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f82:	4611      	mov	r1, r2
 8004f84:	f7ff bf9c 	b.w	8004ec0 <_malloc_r>
 8004f88:	b922      	cbnz	r2, 8004f94 <_realloc_r+0x20>
 8004f8a:	f7ff ff4d 	bl	8004e28 <_free_r>
 8004f8e:	4625      	mov	r5, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f94:	f000 f826 	bl	8004fe4 <_malloc_usable_size_r>
 8004f98:	42a0      	cmp	r0, r4
 8004f9a:	d20f      	bcs.n	8004fbc <_realloc_r+0x48>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f7ff ff8e 	bl	8004ec0 <_malloc_r>
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d0f2      	beq.n	8004f90 <_realloc_r+0x1c>
 8004faa:	4631      	mov	r1, r6
 8004fac:	4622      	mov	r2, r4
 8004fae:	f7ff ff17 	bl	8004de0 <memcpy>
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f7ff ff37 	bl	8004e28 <_free_r>
 8004fba:	e7e9      	b.n	8004f90 <_realloc_r+0x1c>
 8004fbc:	4635      	mov	r5, r6
 8004fbe:	e7e7      	b.n	8004f90 <_realloc_r+0x1c>

08004fc0 <_sbrk_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	4c05      	ldr	r4, [pc, #20]	; (8004fdc <_sbrk_r+0x1c>)
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	4608      	mov	r0, r1
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	f7fc fe0e 	bl	8001bec <_sbrk>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_sbrk_r+0x1a>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_sbrk_r+0x1a>
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	20001460 	.word	0x20001460

08004fe0 <__malloc_lock>:
 8004fe0:	4770      	bx	lr

08004fe2 <__malloc_unlock>:
 8004fe2:	4770      	bx	lr

08004fe4 <_malloc_usable_size_r>:
 8004fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe8:	1f18      	subs	r0, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bfbc      	itt	lt
 8004fee:	580b      	ldrlt	r3, [r1, r0]
 8004ff0:	18c0      	addlt	r0, r0, r3
 8004ff2:	4770      	bx	lr

08004ff4 <pow>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	b08f      	sub	sp, #60	; 0x3c
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	4689      	mov	r9, r1
 8005000:	4614      	mov	r4, r2
 8005002:	f000 f9a9 	bl	8005358 <__ieee754_pow>
 8005006:	4fa1      	ldr	r7, [pc, #644]	; (800528c <pow+0x298>)
 8005008:	e9cd 0100 	strd	r0, r1, [sp]
 800500c:	f997 3000 	ldrsb.w	r3, [r7]
 8005010:	463e      	mov	r6, r7
 8005012:	9302      	str	r3, [sp, #8]
 8005014:	3301      	adds	r3, #1
 8005016:	d05f      	beq.n	80050d8 <pow+0xe4>
 8005018:	4622      	mov	r2, r4
 800501a:	462b      	mov	r3, r5
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb fcec 	bl	80009fc <__aeabi_dcmpun>
 8005024:	4682      	mov	sl, r0
 8005026:	2800      	cmp	r0, #0
 8005028:	d156      	bne.n	80050d8 <pow+0xe4>
 800502a:	4642      	mov	r2, r8
 800502c:	464b      	mov	r3, r9
 800502e:	4640      	mov	r0, r8
 8005030:	4649      	mov	r1, r9
 8005032:	f7fb fce3 	bl	80009fc <__aeabi_dcmpun>
 8005036:	9003      	str	r0, [sp, #12]
 8005038:	b1e8      	cbz	r0, 8005076 <pow+0x82>
 800503a:	2200      	movs	r2, #0
 800503c:	2300      	movs	r3, #0
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb fca9 	bl	8000998 <__aeabi_dcmpeq>
 8005046:	2800      	cmp	r0, #0
 8005048:	d046      	beq.n	80050d8 <pow+0xe4>
 800504a:	2301      	movs	r3, #1
 800504c:	2200      	movs	r2, #0
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	4b8f      	ldr	r3, [pc, #572]	; (8005290 <pow+0x29c>)
 8005052:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	4b8e      	ldr	r3, [pc, #568]	; (8005294 <pow+0x2a0>)
 800505a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800505e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005062:	9b02      	ldr	r3, [sp, #8]
 8005064:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d031      	beq.n	80050d0 <pow+0xdc>
 800506c:	a804      	add	r0, sp, #16
 800506e:	f000 ff33 	bl	8005ed8 <matherr>
 8005072:	bb38      	cbnz	r0, 80050c4 <pow+0xd0>
 8005074:	e058      	b.n	8005128 <pow+0x134>
 8005076:	f04f 0a00 	mov.w	sl, #0
 800507a:	f04f 0b00 	mov.w	fp, #0
 800507e:	4652      	mov	r2, sl
 8005080:	465b      	mov	r3, fp
 8005082:	4640      	mov	r0, r8
 8005084:	4649      	mov	r1, r9
 8005086:	f7fb fc87 	bl	8000998 <__aeabi_dcmpeq>
 800508a:	2800      	cmp	r0, #0
 800508c:	d051      	beq.n	8005132 <pow+0x13e>
 800508e:	4652      	mov	r2, sl
 8005090:	465b      	mov	r3, fp
 8005092:	4620      	mov	r0, r4
 8005094:	4629      	mov	r1, r5
 8005096:	f7fb fc7f 	bl	8000998 <__aeabi_dcmpeq>
 800509a:	4606      	mov	r6, r0
 800509c:	b308      	cbz	r0, 80050e2 <pow+0xee>
 800509e:	2301      	movs	r3, #1
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	4b7b      	ldr	r3, [pc, #492]	; (8005290 <pow+0x29c>)
 80050a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80050a8:	9305      	str	r3, [sp, #20]
 80050aa:	9b03      	ldr	r3, [sp, #12]
 80050ac:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80050b0:	930c      	str	r3, [sp, #48]	; 0x30
 80050b2:	9b02      	ldr	r3, [sp, #8]
 80050b4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0d7      	beq.n	800506c <pow+0x78>
 80050bc:	2200      	movs	r2, #0
 80050be:	4b75      	ldr	r3, [pc, #468]	; (8005294 <pow+0x2a0>)
 80050c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80050c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050c6:	b11b      	cbz	r3, 80050d0 <pow+0xdc>
 80050c8:	f7ff fb50 	bl	800476c <__errno>
 80050cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050ce:	6003      	str	r3, [r0, #0]
 80050d0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80050d4:	e9cd 3400 	strd	r3, r4, [sp]
 80050d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050dc:	b00f      	add	sp, #60	; 0x3c
 80050de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e2:	4620      	mov	r0, r4
 80050e4:	4629      	mov	r1, r5
 80050e6:	f000 fef1 	bl	8005ecc <finite>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d0f4      	beq.n	80050d8 <pow+0xe4>
 80050ee:	4652      	mov	r2, sl
 80050f0:	465b      	mov	r3, fp
 80050f2:	4620      	mov	r0, r4
 80050f4:	4629      	mov	r1, r5
 80050f6:	f7fb fc59 	bl	80009ac <__aeabi_dcmplt>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d0ec      	beq.n	80050d8 <pow+0xe4>
 80050fe:	2301      	movs	r3, #1
 8005100:	9304      	str	r3, [sp, #16]
 8005102:	4b63      	ldr	r3, [pc, #396]	; (8005290 <pow+0x29c>)
 8005104:	960c      	str	r6, [sp, #48]	; 0x30
 8005106:	9305      	str	r3, [sp, #20]
 8005108:	f997 3000 	ldrsb.w	r3, [r7]
 800510c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005110:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005114:	b913      	cbnz	r3, 800511c <pow+0x128>
 8005116:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800511a:	e7a7      	b.n	800506c <pow+0x78>
 800511c:	2000      	movs	r0, #0
 800511e:	495e      	ldr	r1, [pc, #376]	; (8005298 <pow+0x2a4>)
 8005120:	2b02      	cmp	r3, #2
 8005122:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005126:	d1a1      	bne.n	800506c <pow+0x78>
 8005128:	f7ff fb20 	bl	800476c <__errno>
 800512c:	2321      	movs	r3, #33	; 0x21
 800512e:	6003      	str	r3, [r0, #0]
 8005130:	e7c8      	b.n	80050c4 <pow+0xd0>
 8005132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005136:	f000 fec9 	bl	8005ecc <finite>
 800513a:	9002      	str	r0, [sp, #8]
 800513c:	2800      	cmp	r0, #0
 800513e:	d177      	bne.n	8005230 <pow+0x23c>
 8005140:	4640      	mov	r0, r8
 8005142:	4649      	mov	r1, r9
 8005144:	f000 fec2 	bl	8005ecc <finite>
 8005148:	2800      	cmp	r0, #0
 800514a:	d071      	beq.n	8005230 <pow+0x23c>
 800514c:	4620      	mov	r0, r4
 800514e:	4629      	mov	r1, r5
 8005150:	f000 febc 	bl	8005ecc <finite>
 8005154:	2800      	cmp	r0, #0
 8005156:	d06b      	beq.n	8005230 <pow+0x23c>
 8005158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f7fb fc4c 	bl	80009fc <__aeabi_dcmpun>
 8005164:	f997 7000 	ldrsb.w	r7, [r7]
 8005168:	4b49      	ldr	r3, [pc, #292]	; (8005290 <pow+0x29c>)
 800516a:	b1a0      	cbz	r0, 8005196 <pow+0x1a2>
 800516c:	2201      	movs	r2, #1
 800516e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005172:	9b02      	ldr	r3, [sp, #8]
 8005174:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005178:	930c      	str	r3, [sp, #48]	; 0x30
 800517a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800517e:	2f00      	cmp	r7, #0
 8005180:	d0c9      	beq.n	8005116 <pow+0x122>
 8005182:	4652      	mov	r2, sl
 8005184:	465b      	mov	r3, fp
 8005186:	4650      	mov	r0, sl
 8005188:	4659      	mov	r1, fp
 800518a:	f7fb fac7 	bl	800071c <__aeabi_ddiv>
 800518e:	2f02      	cmp	r7, #2
 8005190:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005194:	e7c7      	b.n	8005126 <pow+0x132>
 8005196:	2203      	movs	r2, #3
 8005198:	900c      	str	r0, [sp, #48]	; 0x30
 800519a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	2200      	movs	r2, #0
 80051a4:	4b3d      	ldr	r3, [pc, #244]	; (800529c <pow+0x2a8>)
 80051a6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80051aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80051ae:	f7fb f98b 	bl	80004c8 <__aeabi_dmul>
 80051b2:	4604      	mov	r4, r0
 80051b4:	460d      	mov	r5, r1
 80051b6:	bb17      	cbnz	r7, 80051fe <pow+0x20a>
 80051b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80051bc:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <pow+0x2ac>)
 80051be:	4640      	mov	r0, r8
 80051c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80051c4:	4649      	mov	r1, r9
 80051c6:	4652      	mov	r2, sl
 80051c8:	465b      	mov	r3, fp
 80051ca:	f7fb fbef 	bl	80009ac <__aeabi_dcmplt>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d054      	beq.n	800527c <pow+0x288>
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f000 fe87 	bl	8005ee8 <rint>
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	f7fb fbdb 	bl	8000998 <__aeabi_dcmpeq>
 80051e2:	b920      	cbnz	r0, 80051ee <pow+0x1fa>
 80051e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80051e8:	4b2e      	ldr	r3, [pc, #184]	; (80052a4 <pow+0x2b0>)
 80051ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80051ee:	f996 3000 	ldrsb.w	r3, [r6]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d142      	bne.n	800527c <pow+0x288>
 80051f6:	f7ff fab9 	bl	800476c <__errno>
 80051fa:	2322      	movs	r3, #34	; 0x22
 80051fc:	e797      	b.n	800512e <pow+0x13a>
 80051fe:	2200      	movs	r2, #0
 8005200:	4b29      	ldr	r3, [pc, #164]	; (80052a8 <pow+0x2b4>)
 8005202:	4640      	mov	r0, r8
 8005204:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005208:	4649      	mov	r1, r9
 800520a:	4652      	mov	r2, sl
 800520c:	465b      	mov	r3, fp
 800520e:	f7fb fbcd 	bl	80009ac <__aeabi_dcmplt>
 8005212:	2800      	cmp	r0, #0
 8005214:	d0eb      	beq.n	80051ee <pow+0x1fa>
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f000 fe65 	bl	8005ee8 <rint>
 800521e:	4622      	mov	r2, r4
 8005220:	462b      	mov	r3, r5
 8005222:	f7fb fbb9 	bl	8000998 <__aeabi_dcmpeq>
 8005226:	2800      	cmp	r0, #0
 8005228:	d1e1      	bne.n	80051ee <pow+0x1fa>
 800522a:	2200      	movs	r2, #0
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <pow+0x2a4>)
 800522e:	e7dc      	b.n	80051ea <pow+0x1f6>
 8005230:	2200      	movs	r2, #0
 8005232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005236:	2300      	movs	r3, #0
 8005238:	f7fb fbae 	bl	8000998 <__aeabi_dcmpeq>
 800523c:	2800      	cmp	r0, #0
 800523e:	f43f af4b 	beq.w	80050d8 <pow+0xe4>
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f000 fe41 	bl	8005ecc <finite>
 800524a:	2800      	cmp	r0, #0
 800524c:	f43f af44 	beq.w	80050d8 <pow+0xe4>
 8005250:	4620      	mov	r0, r4
 8005252:	4629      	mov	r1, r5
 8005254:	f000 fe3a 	bl	8005ecc <finite>
 8005258:	2800      	cmp	r0, #0
 800525a:	f43f af3d 	beq.w	80050d8 <pow+0xe4>
 800525e:	2304      	movs	r3, #4
 8005260:	9304      	str	r3, [sp, #16]
 8005262:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <pow+0x29c>)
 8005264:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005268:	9305      	str	r3, [sp, #20]
 800526a:	2300      	movs	r3, #0
 800526c:	2400      	movs	r4, #0
 800526e:	930c      	str	r3, [sp, #48]	; 0x30
 8005270:	2300      	movs	r3, #0
 8005272:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005276:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800527a:	e7b8      	b.n	80051ee <pow+0x1fa>
 800527c:	a804      	add	r0, sp, #16
 800527e:	f000 fe2b 	bl	8005ed8 <matherr>
 8005282:	2800      	cmp	r0, #0
 8005284:	f47f af1e 	bne.w	80050c4 <pow+0xd0>
 8005288:	e7b5      	b.n	80051f6 <pow+0x202>
 800528a:	bf00      	nop
 800528c:	20000080 	.word	0x20000080
 8005290:	0800691f 	.word	0x0800691f
 8005294:	3ff00000 	.word	0x3ff00000
 8005298:	fff00000 	.word	0xfff00000
 800529c:	3fe00000 	.word	0x3fe00000
 80052a0:	47efffff 	.word	0x47efffff
 80052a4:	c7efffff 	.word	0xc7efffff
 80052a8:	7ff00000 	.word	0x7ff00000

080052ac <sqrt>:
 80052ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	b08b      	sub	sp, #44	; 0x2c
 80052b2:	4604      	mov	r4, r0
 80052b4:	460d      	mov	r5, r1
 80052b6:	f000 fd59 	bl	8005d6c <__ieee754_sqrt>
 80052ba:	4b24      	ldr	r3, [pc, #144]	; (800534c <sqrt+0xa0>)
 80052bc:	4680      	mov	r8, r0
 80052be:	f993 a000 	ldrsb.w	sl, [r3]
 80052c2:	4689      	mov	r9, r1
 80052c4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80052c8:	d02b      	beq.n	8005322 <sqrt+0x76>
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fb fb93 	bl	80009fc <__aeabi_dcmpun>
 80052d6:	4683      	mov	fp, r0
 80052d8:	bb18      	cbnz	r0, 8005322 <sqrt+0x76>
 80052da:	2600      	movs	r6, #0
 80052dc:	2700      	movs	r7, #0
 80052de:	4632      	mov	r2, r6
 80052e0:	463b      	mov	r3, r7
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fb fb61 	bl	80009ac <__aeabi_dcmplt>
 80052ea:	b1d0      	cbz	r0, 8005322 <sqrt+0x76>
 80052ec:	2301      	movs	r3, #1
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4b17      	ldr	r3, [pc, #92]	; (8005350 <sqrt+0xa4>)
 80052f2:	f8cd b020 	str.w	fp, [sp, #32]
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80052fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005300:	f1ba 0f00 	cmp.w	sl, #0
 8005304:	d112      	bne.n	800532c <sqrt+0x80>
 8005306:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800530a:	4668      	mov	r0, sp
 800530c:	f000 fde4 	bl	8005ed8 <matherr>
 8005310:	b1b8      	cbz	r0, 8005342 <sqrt+0x96>
 8005312:	9b08      	ldr	r3, [sp, #32]
 8005314:	b11b      	cbz	r3, 800531e <sqrt+0x72>
 8005316:	f7ff fa29 	bl	800476c <__errno>
 800531a:	9b08      	ldr	r3, [sp, #32]
 800531c:	6003      	str	r3, [r0, #0]
 800531e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005322:	4640      	mov	r0, r8
 8005324:	4649      	mov	r1, r9
 8005326:	b00b      	add	sp, #44	; 0x2c
 8005328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532c:	4632      	mov	r2, r6
 800532e:	463b      	mov	r3, r7
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	f7fb f9f2 	bl	800071c <__aeabi_ddiv>
 8005338:	f1ba 0f02 	cmp.w	sl, #2
 800533c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005340:	d1e3      	bne.n	800530a <sqrt+0x5e>
 8005342:	f7ff fa13 	bl	800476c <__errno>
 8005346:	2321      	movs	r3, #33	; 0x21
 8005348:	6003      	str	r3, [r0, #0]
 800534a:	e7e2      	b.n	8005312 <sqrt+0x66>
 800534c:	20000080 	.word	0x20000080
 8005350:	08006923 	.word	0x08006923
 8005354:	00000000 	.word	0x00000000

08005358 <__ieee754_pow>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	b091      	sub	sp, #68	; 0x44
 800535e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005362:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005366:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800536a:	ea55 0302 	orrs.w	r3, r5, r2
 800536e:	4607      	mov	r7, r0
 8005370:	4688      	mov	r8, r1
 8005372:	f000 84b7 	beq.w	8005ce4 <__ieee754_pow+0x98c>
 8005376:	4b80      	ldr	r3, [pc, #512]	; (8005578 <__ieee754_pow+0x220>)
 8005378:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800537c:	429c      	cmp	r4, r3
 800537e:	4689      	mov	r9, r1
 8005380:	4682      	mov	sl, r0
 8005382:	dc09      	bgt.n	8005398 <__ieee754_pow+0x40>
 8005384:	d103      	bne.n	800538e <__ieee754_pow+0x36>
 8005386:	b938      	cbnz	r0, 8005398 <__ieee754_pow+0x40>
 8005388:	42a5      	cmp	r5, r4
 800538a:	dc0d      	bgt.n	80053a8 <__ieee754_pow+0x50>
 800538c:	e001      	b.n	8005392 <__ieee754_pow+0x3a>
 800538e:	429d      	cmp	r5, r3
 8005390:	dc02      	bgt.n	8005398 <__ieee754_pow+0x40>
 8005392:	429d      	cmp	r5, r3
 8005394:	d10e      	bne.n	80053b4 <__ieee754_pow+0x5c>
 8005396:	b16a      	cbz	r2, 80053b4 <__ieee754_pow+0x5c>
 8005398:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800539c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80053a0:	ea54 030a 	orrs.w	r3, r4, sl
 80053a4:	f000 849e 	beq.w	8005ce4 <__ieee754_pow+0x98c>
 80053a8:	4874      	ldr	r0, [pc, #464]	; (800557c <__ieee754_pow+0x224>)
 80053aa:	b011      	add	sp, #68	; 0x44
 80053ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b0:	f000 bd94 	b.w	8005edc <nan>
 80053b4:	f1b9 0f00 	cmp.w	r9, #0
 80053b8:	da53      	bge.n	8005462 <__ieee754_pow+0x10a>
 80053ba:	4b71      	ldr	r3, [pc, #452]	; (8005580 <__ieee754_pow+0x228>)
 80053bc:	429d      	cmp	r5, r3
 80053be:	dc4e      	bgt.n	800545e <__ieee754_pow+0x106>
 80053c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80053c4:	429d      	cmp	r5, r3
 80053c6:	dd4c      	ble.n	8005462 <__ieee754_pow+0x10a>
 80053c8:	152b      	asrs	r3, r5, #20
 80053ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80053ce:	2b14      	cmp	r3, #20
 80053d0:	dd28      	ble.n	8005424 <__ieee754_pow+0xcc>
 80053d2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80053d6:	fa22 f103 	lsr.w	r1, r2, r3
 80053da:	fa01 f303 	lsl.w	r3, r1, r3
 80053de:	4293      	cmp	r3, r2
 80053e0:	d13f      	bne.n	8005462 <__ieee754_pow+0x10a>
 80053e2:	f001 0101 	and.w	r1, r1, #1
 80053e6:	f1c1 0302 	rsb	r3, r1, #2
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	d15c      	bne.n	80054aa <__ieee754_pow+0x152>
 80053f0:	4b61      	ldr	r3, [pc, #388]	; (8005578 <__ieee754_pow+0x220>)
 80053f2:	429d      	cmp	r5, r3
 80053f4:	d126      	bne.n	8005444 <__ieee754_pow+0xec>
 80053f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80053fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80053fe:	ea53 030a 	orrs.w	r3, r3, sl
 8005402:	f000 846f 	beq.w	8005ce4 <__ieee754_pow+0x98c>
 8005406:	4b5f      	ldr	r3, [pc, #380]	; (8005584 <__ieee754_pow+0x22c>)
 8005408:	429c      	cmp	r4, r3
 800540a:	dd2c      	ble.n	8005466 <__ieee754_pow+0x10e>
 800540c:	2e00      	cmp	r6, #0
 800540e:	f280 846f 	bge.w	8005cf0 <__ieee754_pow+0x998>
 8005412:	f04f 0b00 	mov.w	fp, #0
 8005416:	f04f 0c00 	mov.w	ip, #0
 800541a:	4658      	mov	r0, fp
 800541c:	4661      	mov	r1, ip
 800541e:	b011      	add	sp, #68	; 0x44
 8005420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005424:	2a00      	cmp	r2, #0
 8005426:	d13e      	bne.n	80054a6 <__ieee754_pow+0x14e>
 8005428:	f1c3 0314 	rsb	r3, r3, #20
 800542c:	fa45 f103 	asr.w	r1, r5, r3
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	42ab      	cmp	r3, r5
 8005436:	f040 8463 	bne.w	8005d00 <__ieee754_pow+0x9a8>
 800543a:	f001 0101 	and.w	r1, r1, #1
 800543e:	f1c1 0302 	rsb	r3, r1, #2
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	4b50      	ldr	r3, [pc, #320]	; (8005588 <__ieee754_pow+0x230>)
 8005446:	429d      	cmp	r5, r3
 8005448:	d114      	bne.n	8005474 <__ieee754_pow+0x11c>
 800544a:	2e00      	cmp	r6, #0
 800544c:	f280 8454 	bge.w	8005cf8 <__ieee754_pow+0x9a0>
 8005450:	463a      	mov	r2, r7
 8005452:	4643      	mov	r3, r8
 8005454:	2000      	movs	r0, #0
 8005456:	494c      	ldr	r1, [pc, #304]	; (8005588 <__ieee754_pow+0x230>)
 8005458:	f7fb f960 	bl	800071c <__aeabi_ddiv>
 800545c:	e013      	b.n	8005486 <__ieee754_pow+0x12e>
 800545e:	2302      	movs	r3, #2
 8005460:	e7c3      	b.n	80053ea <__ieee754_pow+0x92>
 8005462:	2300      	movs	r3, #0
 8005464:	e7c1      	b.n	80053ea <__ieee754_pow+0x92>
 8005466:	2e00      	cmp	r6, #0
 8005468:	dad3      	bge.n	8005412 <__ieee754_pow+0xba>
 800546a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800546e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005472:	e7d2      	b.n	800541a <__ieee754_pow+0xc2>
 8005474:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005478:	d108      	bne.n	800548c <__ieee754_pow+0x134>
 800547a:	463a      	mov	r2, r7
 800547c:	4643      	mov	r3, r8
 800547e:	4638      	mov	r0, r7
 8005480:	4641      	mov	r1, r8
 8005482:	f7fb f821 	bl	80004c8 <__aeabi_dmul>
 8005486:	4683      	mov	fp, r0
 8005488:	468c      	mov	ip, r1
 800548a:	e7c6      	b.n	800541a <__ieee754_pow+0xc2>
 800548c:	4b3f      	ldr	r3, [pc, #252]	; (800558c <__ieee754_pow+0x234>)
 800548e:	429e      	cmp	r6, r3
 8005490:	d10b      	bne.n	80054aa <__ieee754_pow+0x152>
 8005492:	f1b9 0f00 	cmp.w	r9, #0
 8005496:	db08      	blt.n	80054aa <__ieee754_pow+0x152>
 8005498:	4638      	mov	r0, r7
 800549a:	4641      	mov	r1, r8
 800549c:	b011      	add	sp, #68	; 0x44
 800549e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a2:	f000 bc63 	b.w	8005d6c <__ieee754_sqrt>
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	4638      	mov	r0, r7
 80054ac:	4641      	mov	r1, r8
 80054ae:	f000 fd09 	bl	8005ec4 <fabs>
 80054b2:	4683      	mov	fp, r0
 80054b4:	468c      	mov	ip, r1
 80054b6:	f1ba 0f00 	cmp.w	sl, #0
 80054ba:	d12b      	bne.n	8005514 <__ieee754_pow+0x1bc>
 80054bc:	b124      	cbz	r4, 80054c8 <__ieee754_pow+0x170>
 80054be:	4b32      	ldr	r3, [pc, #200]	; (8005588 <__ieee754_pow+0x230>)
 80054c0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d125      	bne.n	8005514 <__ieee754_pow+0x1bc>
 80054c8:	2e00      	cmp	r6, #0
 80054ca:	da07      	bge.n	80054dc <__ieee754_pow+0x184>
 80054cc:	465a      	mov	r2, fp
 80054ce:	4663      	mov	r3, ip
 80054d0:	2000      	movs	r0, #0
 80054d2:	492d      	ldr	r1, [pc, #180]	; (8005588 <__ieee754_pow+0x230>)
 80054d4:	f7fb f922 	bl	800071c <__aeabi_ddiv>
 80054d8:	4683      	mov	fp, r0
 80054da:	468c      	mov	ip, r1
 80054dc:	f1b9 0f00 	cmp.w	r9, #0
 80054e0:	da9b      	bge.n	800541a <__ieee754_pow+0xc2>
 80054e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80054e6:	9b00      	ldr	r3, [sp, #0]
 80054e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80054ec:	4323      	orrs	r3, r4
 80054ee:	d108      	bne.n	8005502 <__ieee754_pow+0x1aa>
 80054f0:	465a      	mov	r2, fp
 80054f2:	4663      	mov	r3, ip
 80054f4:	4658      	mov	r0, fp
 80054f6:	4661      	mov	r1, ip
 80054f8:	f7fa fe2e 	bl	8000158 <__aeabi_dsub>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	e7aa      	b.n	8005458 <__ieee754_pow+0x100>
 8005502:	9b00      	ldr	r3, [sp, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d188      	bne.n	800541a <__ieee754_pow+0xc2>
 8005508:	4658      	mov	r0, fp
 800550a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800550e:	4683      	mov	fp, r0
 8005510:	469c      	mov	ip, r3
 8005512:	e782      	b.n	800541a <__ieee754_pow+0xc2>
 8005514:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005518:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800551c:	930d      	str	r3, [sp, #52]	; 0x34
 800551e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005520:	9b00      	ldr	r3, [sp, #0]
 8005522:	4313      	orrs	r3, r2
 8005524:	d104      	bne.n	8005530 <__ieee754_pow+0x1d8>
 8005526:	463a      	mov	r2, r7
 8005528:	4643      	mov	r3, r8
 800552a:	4638      	mov	r0, r7
 800552c:	4641      	mov	r1, r8
 800552e:	e7e3      	b.n	80054f8 <__ieee754_pow+0x1a0>
 8005530:	4b17      	ldr	r3, [pc, #92]	; (8005590 <__ieee754_pow+0x238>)
 8005532:	429d      	cmp	r5, r3
 8005534:	f340 80fe 	ble.w	8005734 <__ieee754_pow+0x3dc>
 8005538:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800553c:	429d      	cmp	r5, r3
 800553e:	dd0b      	ble.n	8005558 <__ieee754_pow+0x200>
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <__ieee754_pow+0x22c>)
 8005542:	429c      	cmp	r4, r3
 8005544:	dc0e      	bgt.n	8005564 <__ieee754_pow+0x20c>
 8005546:	2e00      	cmp	r6, #0
 8005548:	f6bf af63 	bge.w	8005412 <__ieee754_pow+0xba>
 800554c:	a308      	add	r3, pc, #32	; (adr r3, 8005570 <__ieee754_pow+0x218>)
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	e794      	b.n	8005482 <__ieee754_pow+0x12a>
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <__ieee754_pow+0x23c>)
 800555a:	429c      	cmp	r4, r3
 800555c:	ddf3      	ble.n	8005546 <__ieee754_pow+0x1ee>
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <__ieee754_pow+0x230>)
 8005560:	429c      	cmp	r4, r3
 8005562:	dd19      	ble.n	8005598 <__ieee754_pow+0x240>
 8005564:	2e00      	cmp	r6, #0
 8005566:	dcf1      	bgt.n	800554c <__ieee754_pow+0x1f4>
 8005568:	e753      	b.n	8005412 <__ieee754_pow+0xba>
 800556a:	bf00      	nop
 800556c:	f3af 8000 	nop.w
 8005570:	8800759c 	.word	0x8800759c
 8005574:	7e37e43c 	.word	0x7e37e43c
 8005578:	7ff00000 	.word	0x7ff00000
 800557c:	080068f1 	.word	0x080068f1
 8005580:	433fffff 	.word	0x433fffff
 8005584:	3fefffff 	.word	0x3fefffff
 8005588:	3ff00000 	.word	0x3ff00000
 800558c:	3fe00000 	.word	0x3fe00000
 8005590:	41e00000 	.word	0x41e00000
 8005594:	3feffffe 	.word	0x3feffffe
 8005598:	4661      	mov	r1, ip
 800559a:	2200      	movs	r2, #0
 800559c:	4b60      	ldr	r3, [pc, #384]	; (8005720 <__ieee754_pow+0x3c8>)
 800559e:	4658      	mov	r0, fp
 80055a0:	f7fa fdda 	bl	8000158 <__aeabi_dsub>
 80055a4:	a354      	add	r3, pc, #336	; (adr r3, 80056f8 <__ieee754_pow+0x3a0>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	4604      	mov	r4, r0
 80055ac:	460d      	mov	r5, r1
 80055ae:	f7fa ff8b 	bl	80004c8 <__aeabi_dmul>
 80055b2:	a353      	add	r3, pc, #332	; (adr r3, 8005700 <__ieee754_pow+0x3a8>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	4606      	mov	r6, r0
 80055ba:	460f      	mov	r7, r1
 80055bc:	4620      	mov	r0, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	f7fa ff82 	bl	80004c8 <__aeabi_dmul>
 80055c4:	2200      	movs	r2, #0
 80055c6:	4682      	mov	sl, r0
 80055c8:	468b      	mov	fp, r1
 80055ca:	4b56      	ldr	r3, [pc, #344]	; (8005724 <__ieee754_pow+0x3cc>)
 80055cc:	4620      	mov	r0, r4
 80055ce:	4629      	mov	r1, r5
 80055d0:	f7fa ff7a 	bl	80004c8 <__aeabi_dmul>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	a14b      	add	r1, pc, #300	; (adr r1, 8005708 <__ieee754_pow+0x3b0>)
 80055da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055de:	f7fa fdbb 	bl	8000158 <__aeabi_dsub>
 80055e2:	4622      	mov	r2, r4
 80055e4:	462b      	mov	r3, r5
 80055e6:	f7fa ff6f 	bl	80004c8 <__aeabi_dmul>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	2000      	movs	r0, #0
 80055f0:	494d      	ldr	r1, [pc, #308]	; (8005728 <__ieee754_pow+0x3d0>)
 80055f2:	f7fa fdb1 	bl	8000158 <__aeabi_dsub>
 80055f6:	4622      	mov	r2, r4
 80055f8:	462b      	mov	r3, r5
 80055fa:	4680      	mov	r8, r0
 80055fc:	4689      	mov	r9, r1
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fa ff61 	bl	80004c8 <__aeabi_dmul>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4640      	mov	r0, r8
 800560c:	4649      	mov	r1, r9
 800560e:	f7fa ff5b 	bl	80004c8 <__aeabi_dmul>
 8005612:	a33f      	add	r3, pc, #252	; (adr r3, 8005710 <__ieee754_pow+0x3b8>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa ff56 	bl	80004c8 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4650      	mov	r0, sl
 8005622:	4659      	mov	r1, fp
 8005624:	f7fa fd98 	bl	8000158 <__aeabi_dsub>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4604      	mov	r4, r0
 800562e:	460d      	mov	r5, r1
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fa fd92 	bl	800015c <__adddf3>
 8005638:	2000      	movs	r0, #0
 800563a:	468b      	mov	fp, r1
 800563c:	4682      	mov	sl, r0
 800563e:	4632      	mov	r2, r6
 8005640:	463b      	mov	r3, r7
 8005642:	f7fa fd89 	bl	8000158 <__aeabi_dsub>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4620      	mov	r0, r4
 800564c:	4629      	mov	r1, r5
 800564e:	f7fa fd83 	bl	8000158 <__aeabi_dsub>
 8005652:	9b00      	ldr	r3, [sp, #0]
 8005654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005656:	3b01      	subs	r3, #1
 8005658:	4313      	orrs	r3, r2
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	bf0c      	ite	eq
 8005660:	4c32      	ldreq	r4, [pc, #200]	; (800572c <__ieee754_pow+0x3d4>)
 8005662:	4c2f      	ldrne	r4, [pc, #188]	; (8005720 <__ieee754_pow+0x3c8>)
 8005664:	4606      	mov	r6, r0
 8005666:	e9cd 3400 	strd	r3, r4, [sp]
 800566a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800566e:	2400      	movs	r4, #0
 8005670:	460f      	mov	r7, r1
 8005672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005676:	4622      	mov	r2, r4
 8005678:	462b      	mov	r3, r5
 800567a:	f7fa fd6d 	bl	8000158 <__aeabi_dsub>
 800567e:	4652      	mov	r2, sl
 8005680:	465b      	mov	r3, fp
 8005682:	f7fa ff21 	bl	80004c8 <__aeabi_dmul>
 8005686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800568a:	4680      	mov	r8, r0
 800568c:	4689      	mov	r9, r1
 800568e:	4630      	mov	r0, r6
 8005690:	4639      	mov	r1, r7
 8005692:	f7fa ff19 	bl	80004c8 <__aeabi_dmul>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4640      	mov	r0, r8
 800569c:	4649      	mov	r1, r9
 800569e:	f7fa fd5d 	bl	800015c <__adddf3>
 80056a2:	4622      	mov	r2, r4
 80056a4:	462b      	mov	r3, r5
 80056a6:	4680      	mov	r8, r0
 80056a8:	4689      	mov	r9, r1
 80056aa:	4650      	mov	r0, sl
 80056ac:	4659      	mov	r1, fp
 80056ae:	f7fa ff0b 	bl	80004c8 <__aeabi_dmul>
 80056b2:	4604      	mov	r4, r0
 80056b4:	460d      	mov	r5, r1
 80056b6:	460b      	mov	r3, r1
 80056b8:	4602      	mov	r2, r0
 80056ba:	4649      	mov	r1, r9
 80056bc:	4640      	mov	r0, r8
 80056be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80056c2:	f7fa fd4b 	bl	800015c <__adddf3>
 80056c6:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <__ieee754_pow+0x3d8>)
 80056c8:	4682      	mov	sl, r0
 80056ca:	4299      	cmp	r1, r3
 80056cc:	460f      	mov	r7, r1
 80056ce:	460e      	mov	r6, r1
 80056d0:	f340 82e1 	ble.w	8005c96 <__ieee754_pow+0x93e>
 80056d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80056d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80056dc:	4303      	orrs	r3, r0
 80056de:	f000 81db 	beq.w	8005a98 <__ieee754_pow+0x740>
 80056e2:	a30d      	add	r3, pc, #52	; (adr r3, 8005718 <__ieee754_pow+0x3c0>)
 80056e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ec:	f7fa feec 	bl	80004c8 <__aeabi_dmul>
 80056f0:	a309      	add	r3, pc, #36	; (adr r3, 8005718 <__ieee754_pow+0x3c0>)
 80056f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f6:	e6c4      	b.n	8005482 <__ieee754_pow+0x12a>
 80056f8:	60000000 	.word	0x60000000
 80056fc:	3ff71547 	.word	0x3ff71547
 8005700:	f85ddf44 	.word	0xf85ddf44
 8005704:	3e54ae0b 	.word	0x3e54ae0b
 8005708:	55555555 	.word	0x55555555
 800570c:	3fd55555 	.word	0x3fd55555
 8005710:	652b82fe 	.word	0x652b82fe
 8005714:	3ff71547 	.word	0x3ff71547
 8005718:	8800759c 	.word	0x8800759c
 800571c:	7e37e43c 	.word	0x7e37e43c
 8005720:	3ff00000 	.word	0x3ff00000
 8005724:	3fd00000 	.word	0x3fd00000
 8005728:	3fe00000 	.word	0x3fe00000
 800572c:	bff00000 	.word	0xbff00000
 8005730:	408fffff 	.word	0x408fffff
 8005734:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	da08      	bge.n	8005750 <__ieee754_pow+0x3f8>
 800573e:	4658      	mov	r0, fp
 8005740:	4bcd      	ldr	r3, [pc, #820]	; (8005a78 <__ieee754_pow+0x720>)
 8005742:	4661      	mov	r1, ip
 8005744:	f7fa fec0 	bl	80004c8 <__aeabi_dmul>
 8005748:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800574c:	4683      	mov	fp, r0
 800574e:	460c      	mov	r4, r1
 8005750:	1523      	asrs	r3, r4, #20
 8005752:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005756:	4413      	add	r3, r2
 8005758:	930c      	str	r3, [sp, #48]	; 0x30
 800575a:	4bc8      	ldr	r3, [pc, #800]	; (8005a7c <__ieee754_pow+0x724>)
 800575c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005760:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005764:	429c      	cmp	r4, r3
 8005766:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800576a:	dd08      	ble.n	800577e <__ieee754_pow+0x426>
 800576c:	4bc4      	ldr	r3, [pc, #784]	; (8005a80 <__ieee754_pow+0x728>)
 800576e:	429c      	cmp	r4, r3
 8005770:	f340 815b 	ble.w	8005a2a <__ieee754_pow+0x6d2>
 8005774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005776:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800577a:	3301      	adds	r3, #1
 800577c:	930c      	str	r3, [sp, #48]	; 0x30
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	4658      	mov	r0, fp
 8005784:	4629      	mov	r1, r5
 8005786:	4bbf      	ldr	r3, [pc, #764]	; (8005a84 <__ieee754_pow+0x72c>)
 8005788:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800578c:	444b      	add	r3, r9
 800578e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005792:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005796:	461a      	mov	r2, r3
 8005798:	4623      	mov	r3, r4
 800579a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800579e:	f7fa fcdb 	bl	8000158 <__aeabi_dsub>
 80057a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057a6:	4606      	mov	r6, r0
 80057a8:	460f      	mov	r7, r1
 80057aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80057ae:	f7fa fcd5 	bl	800015c <__adddf3>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	2000      	movs	r0, #0
 80057b8:	49b3      	ldr	r1, [pc, #716]	; (8005a88 <__ieee754_pow+0x730>)
 80057ba:	f7fa ffaf 	bl	800071c <__aeabi_ddiv>
 80057be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4630      	mov	r0, r6
 80057c8:	4639      	mov	r1, r7
 80057ca:	f7fa fe7d 	bl	80004c8 <__aeabi_dmul>
 80057ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057d2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80057d6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057da:	2300      	movs	r3, #0
 80057dc:	2200      	movs	r2, #0
 80057de:	106d      	asrs	r5, r5, #1
 80057e0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80057e4:	9304      	str	r3, [sp, #16]
 80057e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80057ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80057ee:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80057f2:	4650      	mov	r0, sl
 80057f4:	4659      	mov	r1, fp
 80057f6:	4614      	mov	r4, r2
 80057f8:	461d      	mov	r5, r3
 80057fa:	f7fa fe65 	bl	80004c8 <__aeabi_dmul>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fa fca7 	bl	8000158 <__aeabi_dsub>
 800580a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800580e:	4606      	mov	r6, r0
 8005810:	460f      	mov	r7, r1
 8005812:	4620      	mov	r0, r4
 8005814:	4629      	mov	r1, r5
 8005816:	f7fa fc9f 	bl	8000158 <__aeabi_dsub>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005822:	f7fa fc99 	bl	8000158 <__aeabi_dsub>
 8005826:	4652      	mov	r2, sl
 8005828:	465b      	mov	r3, fp
 800582a:	f7fa fe4d 	bl	80004c8 <__aeabi_dmul>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4630      	mov	r0, r6
 8005834:	4639      	mov	r1, r7
 8005836:	f7fa fc8f 	bl	8000158 <__aeabi_dsub>
 800583a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800583e:	f7fa fe43 	bl	80004c8 <__aeabi_dmul>
 8005842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005846:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	f7fa fe3b 	bl	80004c8 <__aeabi_dmul>
 8005852:	a377      	add	r3, pc, #476	; (adr r3, 8005a30 <__ieee754_pow+0x6d8>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	f7fa fe34 	bl	80004c8 <__aeabi_dmul>
 8005860:	a375      	add	r3, pc, #468	; (adr r3, 8005a38 <__ieee754_pow+0x6e0>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fa fc79 	bl	800015c <__adddf3>
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	f7fa fe2b 	bl	80004c8 <__aeabi_dmul>
 8005872:	a373      	add	r3, pc, #460	; (adr r3, 8005a40 <__ieee754_pow+0x6e8>)
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f7fa fc70 	bl	800015c <__adddf3>
 800587c:	4622      	mov	r2, r4
 800587e:	462b      	mov	r3, r5
 8005880:	f7fa fe22 	bl	80004c8 <__aeabi_dmul>
 8005884:	a370      	add	r3, pc, #448	; (adr r3, 8005a48 <__ieee754_pow+0x6f0>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f7fa fc67 	bl	800015c <__adddf3>
 800588e:	4622      	mov	r2, r4
 8005890:	462b      	mov	r3, r5
 8005892:	f7fa fe19 	bl	80004c8 <__aeabi_dmul>
 8005896:	a36e      	add	r3, pc, #440	; (adr r3, 8005a50 <__ieee754_pow+0x6f8>)
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f7fa fc5e 	bl	800015c <__adddf3>
 80058a0:	4622      	mov	r2, r4
 80058a2:	462b      	mov	r3, r5
 80058a4:	f7fa fe10 	bl	80004c8 <__aeabi_dmul>
 80058a8:	a36b      	add	r3, pc, #428	; (adr r3, 8005a58 <__ieee754_pow+0x700>)
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f7fa fc55 	bl	800015c <__adddf3>
 80058b2:	4622      	mov	r2, r4
 80058b4:	4606      	mov	r6, r0
 80058b6:	460f      	mov	r7, r1
 80058b8:	462b      	mov	r3, r5
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	f7fa fe03 	bl	80004c8 <__aeabi_dmul>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4630      	mov	r0, r6
 80058c8:	4639      	mov	r1, r7
 80058ca:	f7fa fdfd 	bl	80004c8 <__aeabi_dmul>
 80058ce:	4604      	mov	r4, r0
 80058d0:	460d      	mov	r5, r1
 80058d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058d6:	4652      	mov	r2, sl
 80058d8:	465b      	mov	r3, fp
 80058da:	f7fa fc3f 	bl	800015c <__adddf3>
 80058de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058e2:	f7fa fdf1 	bl	80004c8 <__aeabi_dmul>
 80058e6:	4622      	mov	r2, r4
 80058e8:	462b      	mov	r3, r5
 80058ea:	f7fa fc37 	bl	800015c <__adddf3>
 80058ee:	4652      	mov	r2, sl
 80058f0:	4606      	mov	r6, r0
 80058f2:	460f      	mov	r7, r1
 80058f4:	465b      	mov	r3, fp
 80058f6:	4650      	mov	r0, sl
 80058f8:	4659      	mov	r1, fp
 80058fa:	f7fa fde5 	bl	80004c8 <__aeabi_dmul>
 80058fe:	2200      	movs	r2, #0
 8005900:	4b62      	ldr	r3, [pc, #392]	; (8005a8c <__ieee754_pow+0x734>)
 8005902:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005906:	f7fa fc29 	bl	800015c <__adddf3>
 800590a:	4632      	mov	r2, r6
 800590c:	463b      	mov	r3, r7
 800590e:	f7fa fc25 	bl	800015c <__adddf3>
 8005912:	9804      	ldr	r0, [sp, #16]
 8005914:	460d      	mov	r5, r1
 8005916:	4604      	mov	r4, r0
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4650      	mov	r0, sl
 800591e:	4659      	mov	r1, fp
 8005920:	f7fa fdd2 	bl	80004c8 <__aeabi_dmul>
 8005924:	2200      	movs	r2, #0
 8005926:	4682      	mov	sl, r0
 8005928:	468b      	mov	fp, r1
 800592a:	4b58      	ldr	r3, [pc, #352]	; (8005a8c <__ieee754_pow+0x734>)
 800592c:	4620      	mov	r0, r4
 800592e:	4629      	mov	r1, r5
 8005930:	f7fa fc12 	bl	8000158 <__aeabi_dsub>
 8005934:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005938:	f7fa fc0e 	bl	8000158 <__aeabi_dsub>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fa fc08 	bl	8000158 <__aeabi_dsub>
 8005948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800594c:	f7fa fdbc 	bl	80004c8 <__aeabi_dmul>
 8005950:	4622      	mov	r2, r4
 8005952:	4606      	mov	r6, r0
 8005954:	460f      	mov	r7, r1
 8005956:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800595a:	462b      	mov	r3, r5
 800595c:	f7fa fdb4 	bl	80004c8 <__aeabi_dmul>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4630      	mov	r0, r6
 8005966:	4639      	mov	r1, r7
 8005968:	f7fa fbf8 	bl	800015c <__adddf3>
 800596c:	4606      	mov	r6, r0
 800596e:	460f      	mov	r7, r1
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4650      	mov	r0, sl
 8005976:	4659      	mov	r1, fp
 8005978:	f7fa fbf0 	bl	800015c <__adddf3>
 800597c:	a338      	add	r3, pc, #224	; (adr r3, 8005a60 <__ieee754_pow+0x708>)
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	9804      	ldr	r0, [sp, #16]
 8005984:	460d      	mov	r5, r1
 8005986:	4604      	mov	r4, r0
 8005988:	f7fa fd9e 	bl	80004c8 <__aeabi_dmul>
 800598c:	4652      	mov	r2, sl
 800598e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005992:	465b      	mov	r3, fp
 8005994:	4620      	mov	r0, r4
 8005996:	4629      	mov	r1, r5
 8005998:	f7fa fbde 	bl	8000158 <__aeabi_dsub>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fa fbd8 	bl	8000158 <__aeabi_dsub>
 80059a8:	a32f      	add	r3, pc, #188	; (adr r3, 8005a68 <__ieee754_pow+0x710>)
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f7fa fd8b 	bl	80004c8 <__aeabi_dmul>
 80059b2:	a32f      	add	r3, pc, #188	; (adr r3, 8005a70 <__ieee754_pow+0x718>)
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	4606      	mov	r6, r0
 80059ba:	460f      	mov	r7, r1
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	f7fa fd82 	bl	80004c8 <__aeabi_dmul>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4630      	mov	r0, r6
 80059ca:	4639      	mov	r1, r7
 80059cc:	f7fa fbc6 	bl	800015c <__adddf3>
 80059d0:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <__ieee754_pow+0x738>)
 80059d2:	444b      	add	r3, r9
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f7fa fbc0 	bl	800015c <__adddf3>
 80059dc:	4604      	mov	r4, r0
 80059de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80059e0:	460d      	mov	r5, r1
 80059e2:	f7fa fd07 	bl	80003f4 <__aeabi_i2d>
 80059e6:	4606      	mov	r6, r0
 80059e8:	460f      	mov	r7, r1
 80059ea:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <__ieee754_pow+0x73c>)
 80059ec:	4622      	mov	r2, r4
 80059ee:	444b      	add	r3, r9
 80059f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059f4:	462b      	mov	r3, r5
 80059f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059fa:	f7fa fbaf 	bl	800015c <__adddf3>
 80059fe:	4642      	mov	r2, r8
 8005a00:	464b      	mov	r3, r9
 8005a02:	f7fa fbab 	bl	800015c <__adddf3>
 8005a06:	4632      	mov	r2, r6
 8005a08:	463b      	mov	r3, r7
 8005a0a:	f7fa fba7 	bl	800015c <__adddf3>
 8005a0e:	9804      	ldr	r0, [sp, #16]
 8005a10:	4632      	mov	r2, r6
 8005a12:	463b      	mov	r3, r7
 8005a14:	4682      	mov	sl, r0
 8005a16:	468b      	mov	fp, r1
 8005a18:	f7fa fb9e 	bl	8000158 <__aeabi_dsub>
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	f7fa fb9a 	bl	8000158 <__aeabi_dsub>
 8005a24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a28:	e60b      	b.n	8005642 <__ieee754_pow+0x2ea>
 8005a2a:	f04f 0801 	mov.w	r8, #1
 8005a2e:	e6a8      	b.n	8005782 <__ieee754_pow+0x42a>
 8005a30:	4a454eef 	.word	0x4a454eef
 8005a34:	3fca7e28 	.word	0x3fca7e28
 8005a38:	93c9db65 	.word	0x93c9db65
 8005a3c:	3fcd864a 	.word	0x3fcd864a
 8005a40:	a91d4101 	.word	0xa91d4101
 8005a44:	3fd17460 	.word	0x3fd17460
 8005a48:	518f264d 	.word	0x518f264d
 8005a4c:	3fd55555 	.word	0x3fd55555
 8005a50:	db6fabff 	.word	0xdb6fabff
 8005a54:	3fdb6db6 	.word	0x3fdb6db6
 8005a58:	33333303 	.word	0x33333303
 8005a5c:	3fe33333 	.word	0x3fe33333
 8005a60:	e0000000 	.word	0xe0000000
 8005a64:	3feec709 	.word	0x3feec709
 8005a68:	dc3a03fd 	.word	0xdc3a03fd
 8005a6c:	3feec709 	.word	0x3feec709
 8005a70:	145b01f5 	.word	0x145b01f5
 8005a74:	be3e2fe0 	.word	0xbe3e2fe0
 8005a78:	43400000 	.word	0x43400000
 8005a7c:	0003988e 	.word	0x0003988e
 8005a80:	000bb679 	.word	0x000bb679
 8005a84:	08006928 	.word	0x08006928
 8005a88:	3ff00000 	.word	0x3ff00000
 8005a8c:	40080000 	.word	0x40080000
 8005a90:	08006948 	.word	0x08006948
 8005a94:	08006938 	.word	0x08006938
 8005a98:	a39b      	add	r3, pc, #620	; (adr r3, 8005d08 <__ieee754_pow+0x9b0>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	f7fa fb5b 	bl	800015c <__adddf3>
 8005aa6:	4622      	mov	r2, r4
 8005aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aac:	462b      	mov	r3, r5
 8005aae:	4650      	mov	r0, sl
 8005ab0:	4639      	mov	r1, r7
 8005ab2:	f7fa fb51 	bl	8000158 <__aeabi_dsub>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005abe:	f7fa ff93 	bl	80009e8 <__aeabi_dcmpgt>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	f47f ae0d 	bne.w	80056e2 <__ieee754_pow+0x38a>
 8005ac8:	4aa3      	ldr	r2, [pc, #652]	; (8005d58 <__ieee754_pow+0xa00>)
 8005aca:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	f340 8103 	ble.w	8005cda <__ieee754_pow+0x982>
 8005ad4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005ad8:	2000      	movs	r0, #0
 8005ada:	151b      	asrs	r3, r3, #20
 8005adc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005ae0:	fa4a f303 	asr.w	r3, sl, r3
 8005ae4:	4433      	add	r3, r6
 8005ae6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005aea:	4f9c      	ldr	r7, [pc, #624]	; (8005d5c <__ieee754_pow+0xa04>)
 8005aec:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005af0:	4117      	asrs	r7, r2
 8005af2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005af6:	ea23 0107 	bic.w	r1, r3, r7
 8005afa:	f1c2 0214 	rsb	r2, r2, #20
 8005afe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005b02:	fa4a fa02 	asr.w	sl, sl, r2
 8005b06:	2e00      	cmp	r6, #0
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	bfb8      	it	lt
 8005b12:	f1ca 0a00 	rsblt	sl, sl, #0
 8005b16:	f7fa fb1f 	bl	8000158 <__aeabi_dsub>
 8005b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b22:	4642      	mov	r2, r8
 8005b24:	464b      	mov	r3, r9
 8005b26:	f7fa fb19 	bl	800015c <__adddf3>
 8005b2a:	a379      	add	r3, pc, #484	; (adr r3, 8005d10 <__ieee754_pow+0x9b8>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	2000      	movs	r0, #0
 8005b32:	460d      	mov	r5, r1
 8005b34:	4604      	mov	r4, r0
 8005b36:	f7fa fcc7 	bl	80004c8 <__aeabi_dmul>
 8005b3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b3e:	4606      	mov	r6, r0
 8005b40:	460f      	mov	r7, r1
 8005b42:	4620      	mov	r0, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	f7fa fb07 	bl	8000158 <__aeabi_dsub>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4640      	mov	r0, r8
 8005b50:	4649      	mov	r1, r9
 8005b52:	f7fa fb01 	bl	8000158 <__aeabi_dsub>
 8005b56:	a370      	add	r3, pc, #448	; (adr r3, 8005d18 <__ieee754_pow+0x9c0>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f7fa fcb4 	bl	80004c8 <__aeabi_dmul>
 8005b60:	a36f      	add	r3, pc, #444	; (adr r3, 8005d20 <__ieee754_pow+0x9c8>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	4680      	mov	r8, r0
 8005b68:	4689      	mov	r9, r1
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa fcab 	bl	80004c8 <__aeabi_dmul>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4640      	mov	r0, r8
 8005b78:	4649      	mov	r1, r9
 8005b7a:	f7fa faef 	bl	800015c <__adddf3>
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460d      	mov	r5, r1
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4630      	mov	r0, r6
 8005b88:	4639      	mov	r1, r7
 8005b8a:	f7fa fae7 	bl	800015c <__adddf3>
 8005b8e:	4632      	mov	r2, r6
 8005b90:	463b      	mov	r3, r7
 8005b92:	4680      	mov	r8, r0
 8005b94:	4689      	mov	r9, r1
 8005b96:	f7fa fadf 	bl	8000158 <__aeabi_dsub>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f7fa fad9 	bl	8000158 <__aeabi_dsub>
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	464b      	mov	r3, r9
 8005bae:	4640      	mov	r0, r8
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	f7fa fc89 	bl	80004c8 <__aeabi_dmul>
 8005bb6:	a35c      	add	r3, pc, #368	; (adr r3, 8005d28 <__ieee754_pow+0x9d0>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	f7fa fc82 	bl	80004c8 <__aeabi_dmul>
 8005bc4:	a35a      	add	r3, pc, #360	; (adr r3, 8005d30 <__ieee754_pow+0x9d8>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f7fa fac5 	bl	8000158 <__aeabi_dsub>
 8005bce:	4622      	mov	r2, r4
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	f7fa fc79 	bl	80004c8 <__aeabi_dmul>
 8005bd6:	a358      	add	r3, pc, #352	; (adr r3, 8005d38 <__ieee754_pow+0x9e0>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fabe 	bl	800015c <__adddf3>
 8005be0:	4622      	mov	r2, r4
 8005be2:	462b      	mov	r3, r5
 8005be4:	f7fa fc70 	bl	80004c8 <__aeabi_dmul>
 8005be8:	a355      	add	r3, pc, #340	; (adr r3, 8005d40 <__ieee754_pow+0x9e8>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fab3 	bl	8000158 <__aeabi_dsub>
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	f7fa fc67 	bl	80004c8 <__aeabi_dmul>
 8005bfa:	a353      	add	r3, pc, #332	; (adr r3, 8005d48 <__ieee754_pow+0x9f0>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f7fa faac 	bl	800015c <__adddf3>
 8005c04:	4622      	mov	r2, r4
 8005c06:	462b      	mov	r3, r5
 8005c08:	f7fa fc5e 	bl	80004c8 <__aeabi_dmul>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4640      	mov	r0, r8
 8005c12:	4649      	mov	r1, r9
 8005c14:	f7fa faa0 	bl	8000158 <__aeabi_dsub>
 8005c18:	4604      	mov	r4, r0
 8005c1a:	460d      	mov	r5, r1
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4640      	mov	r0, r8
 8005c22:	4649      	mov	r1, r9
 8005c24:	f7fa fc50 	bl	80004c8 <__aeabi_dmul>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa fa8f 	bl	8000158 <__aeabi_dsub>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c42:	f7fa fd6b 	bl	800071c <__aeabi_ddiv>
 8005c46:	4632      	mov	r2, r6
 8005c48:	4604      	mov	r4, r0
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	463b      	mov	r3, r7
 8005c4e:	4640      	mov	r0, r8
 8005c50:	4649      	mov	r1, r9
 8005c52:	f7fa fc39 	bl	80004c8 <__aeabi_dmul>
 8005c56:	4632      	mov	r2, r6
 8005c58:	463b      	mov	r3, r7
 8005c5a:	f7fa fa7f 	bl	800015c <__adddf3>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4620      	mov	r0, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	f7fa fa77 	bl	8000158 <__aeabi_dsub>
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	f7fa fa73 	bl	8000158 <__aeabi_dsub>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	2000      	movs	r0, #0
 8005c78:	4939      	ldr	r1, [pc, #228]	; (8005d60 <__ieee754_pow+0xa08>)
 8005c7a:	f7fa fa6d 	bl	8000158 <__aeabi_dsub>
 8005c7e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005c82:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005c86:	da2b      	bge.n	8005ce0 <__ieee754_pow+0x988>
 8005c88:	4652      	mov	r2, sl
 8005c8a:	f000 f9b9 	bl	8006000 <scalbn>
 8005c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c92:	f7ff bbf6 	b.w	8005482 <__ieee754_pow+0x12a>
 8005c96:	4b33      	ldr	r3, [pc, #204]	; (8005d64 <__ieee754_pow+0xa0c>)
 8005c98:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005c9c:	429f      	cmp	r7, r3
 8005c9e:	f77f af13 	ble.w	8005ac8 <__ieee754_pow+0x770>
 8005ca2:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <__ieee754_pow+0xa10>)
 8005ca4:	440b      	add	r3, r1
 8005ca6:	4303      	orrs	r3, r0
 8005ca8:	d00b      	beq.n	8005cc2 <__ieee754_pow+0x96a>
 8005caa:	a329      	add	r3, pc, #164	; (adr r3, 8005d50 <__ieee754_pow+0x9f8>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb4:	f7fa fc08 	bl	80004c8 <__aeabi_dmul>
 8005cb8:	a325      	add	r3, pc, #148	; (adr r3, 8005d50 <__ieee754_pow+0x9f8>)
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	f7ff bbe0 	b.w	8005482 <__ieee754_pow+0x12a>
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	f7fa fa47 	bl	8000158 <__aeabi_dsub>
 8005cca:	4642      	mov	r2, r8
 8005ccc:	464b      	mov	r3, r9
 8005cce:	f7fa fe81 	bl	80009d4 <__aeabi_dcmpge>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	f43f aef8 	beq.w	8005ac8 <__ieee754_pow+0x770>
 8005cd8:	e7e7      	b.n	8005caa <__ieee754_pow+0x952>
 8005cda:	f04f 0a00 	mov.w	sl, #0
 8005cde:	e71e      	b.n	8005b1e <__ieee754_pow+0x7c6>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	e7d4      	b.n	8005c8e <__ieee754_pow+0x936>
 8005ce4:	f04f 0b00 	mov.w	fp, #0
 8005ce8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005d60 <__ieee754_pow+0xa08>
 8005cec:	f7ff bb95 	b.w	800541a <__ieee754_pow+0xc2>
 8005cf0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005cf4:	f7ff bb91 	b.w	800541a <__ieee754_pow+0xc2>
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	f7ff bbc3 	b.w	8005486 <__ieee754_pow+0x12e>
 8005d00:	9200      	str	r2, [sp, #0]
 8005d02:	f7ff bb9f 	b.w	8005444 <__ieee754_pow+0xec>
 8005d06:	bf00      	nop
 8005d08:	652b82fe 	.word	0x652b82fe
 8005d0c:	3c971547 	.word	0x3c971547
 8005d10:	00000000 	.word	0x00000000
 8005d14:	3fe62e43 	.word	0x3fe62e43
 8005d18:	fefa39ef 	.word	0xfefa39ef
 8005d1c:	3fe62e42 	.word	0x3fe62e42
 8005d20:	0ca86c39 	.word	0x0ca86c39
 8005d24:	be205c61 	.word	0xbe205c61
 8005d28:	72bea4d0 	.word	0x72bea4d0
 8005d2c:	3e663769 	.word	0x3e663769
 8005d30:	c5d26bf1 	.word	0xc5d26bf1
 8005d34:	3ebbbd41 	.word	0x3ebbbd41
 8005d38:	af25de2c 	.word	0xaf25de2c
 8005d3c:	3f11566a 	.word	0x3f11566a
 8005d40:	16bebd93 	.word	0x16bebd93
 8005d44:	3f66c16c 	.word	0x3f66c16c
 8005d48:	5555553e 	.word	0x5555553e
 8005d4c:	3fc55555 	.word	0x3fc55555
 8005d50:	c2f8f359 	.word	0xc2f8f359
 8005d54:	01a56e1f 	.word	0x01a56e1f
 8005d58:	3fe00000 	.word	0x3fe00000
 8005d5c:	000fffff 	.word	0x000fffff
 8005d60:	3ff00000 	.word	0x3ff00000
 8005d64:	4090cbff 	.word	0x4090cbff
 8005d68:	3f6f3400 	.word	0x3f6f3400

08005d6c <__ieee754_sqrt>:
 8005d6c:	4b54      	ldr	r3, [pc, #336]	; (8005ec0 <__ieee754_sqrt+0x154>)
 8005d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d72:	438b      	bics	r3, r1
 8005d74:	4606      	mov	r6, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	460a      	mov	r2, r1
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	d10f      	bne.n	8005d9e <__ieee754_sqrt+0x32>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	f7fa fba1 	bl	80004c8 <__aeabi_dmul>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7fa f9e5 	bl	800015c <__adddf3>
 8005d92:	4606      	mov	r6, r0
 8005d94:	460d      	mov	r5, r1
 8005d96:	4630      	mov	r0, r6
 8005d98:	4629      	mov	r1, r5
 8005d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	4607      	mov	r7, r0
 8005da2:	4603      	mov	r3, r0
 8005da4:	dc0e      	bgt.n	8005dc4 <__ieee754_sqrt+0x58>
 8005da6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005daa:	ea5c 0707 	orrs.w	r7, ip, r7
 8005dae:	d0f2      	beq.n	8005d96 <__ieee754_sqrt+0x2a>
 8005db0:	b141      	cbz	r1, 8005dc4 <__ieee754_sqrt+0x58>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	f7fa f9cf 	bl	8000158 <__aeabi_dsub>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	f7fa fcad 	bl	800071c <__aeabi_ddiv>
 8005dc2:	e7e6      	b.n	8005d92 <__ieee754_sqrt+0x26>
 8005dc4:	1512      	asrs	r2, r2, #20
 8005dc6:	d074      	beq.n	8005eb2 <__ieee754_sqrt+0x146>
 8005dc8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005dcc:	07d5      	lsls	r5, r2, #31
 8005dce:	f04f 0500 	mov.w	r5, #0
 8005dd2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005dd6:	bf48      	it	mi
 8005dd8:	0fd9      	lsrmi	r1, r3, #31
 8005dda:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005dde:	bf44      	itt	mi
 8005de0:	005b      	lslmi	r3, r3, #1
 8005de2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005de6:	1051      	asrs	r1, r2, #1
 8005de8:	0fda      	lsrs	r2, r3, #31
 8005dea:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005dee:	4628      	mov	r0, r5
 8005df0:	2216      	movs	r2, #22
 8005df2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	1987      	adds	r7, r0, r6
 8005dfa:	42a7      	cmp	r7, r4
 8005dfc:	bfde      	ittt	le
 8005dfe:	19b8      	addle	r0, r7, r6
 8005e00:	1be4      	suble	r4, r4, r7
 8005e02:	19ad      	addle	r5, r5, r6
 8005e04:	0fdf      	lsrs	r7, r3, #31
 8005e06:	3a01      	subs	r2, #1
 8005e08:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005e0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e10:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e14:	d1f0      	bne.n	8005df8 <__ieee754_sqrt+0x8c>
 8005e16:	f04f 0c20 	mov.w	ip, #32
 8005e1a:	4696      	mov	lr, r2
 8005e1c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e20:	4284      	cmp	r4, r0
 8005e22:	eb06 070e 	add.w	r7, r6, lr
 8005e26:	dc02      	bgt.n	8005e2e <__ieee754_sqrt+0xc2>
 8005e28:	d112      	bne.n	8005e50 <__ieee754_sqrt+0xe4>
 8005e2a:	429f      	cmp	r7, r3
 8005e2c:	d810      	bhi.n	8005e50 <__ieee754_sqrt+0xe4>
 8005e2e:	2f00      	cmp	r7, #0
 8005e30:	eb07 0e06 	add.w	lr, r7, r6
 8005e34:	da42      	bge.n	8005ebc <__ieee754_sqrt+0x150>
 8005e36:	f1be 0f00 	cmp.w	lr, #0
 8005e3a:	db3f      	blt.n	8005ebc <__ieee754_sqrt+0x150>
 8005e3c:	f100 0801 	add.w	r8, r0, #1
 8005e40:	1a24      	subs	r4, r4, r0
 8005e42:	4640      	mov	r0, r8
 8005e44:	429f      	cmp	r7, r3
 8005e46:	bf88      	it	hi
 8005e48:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8005e4c:	1bdb      	subs	r3, r3, r7
 8005e4e:	4432      	add	r2, r6
 8005e50:	0064      	lsls	r4, r4, #1
 8005e52:	f1bc 0c01 	subs.w	ip, ip, #1
 8005e56:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005e5a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e62:	d1dd      	bne.n	8005e20 <__ieee754_sqrt+0xb4>
 8005e64:	4323      	orrs	r3, r4
 8005e66:	d006      	beq.n	8005e76 <__ieee754_sqrt+0x10a>
 8005e68:	1c54      	adds	r4, r2, #1
 8005e6a:	bf0b      	itete	eq
 8005e6c:	4662      	moveq	r2, ip
 8005e6e:	3201      	addne	r2, #1
 8005e70:	3501      	addeq	r5, #1
 8005e72:	f022 0201 	bicne.w	r2, r2, #1
 8005e76:	106b      	asrs	r3, r5, #1
 8005e78:	0852      	lsrs	r2, r2, #1
 8005e7a:	07e8      	lsls	r0, r5, #31
 8005e7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005e80:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005e84:	bf48      	it	mi
 8005e86:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005e8a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005e8e:	4616      	mov	r6, r2
 8005e90:	e781      	b.n	8005d96 <__ieee754_sqrt+0x2a>
 8005e92:	0adc      	lsrs	r4, r3, #11
 8005e94:	3915      	subs	r1, #21
 8005e96:	055b      	lsls	r3, r3, #21
 8005e98:	2c00      	cmp	r4, #0
 8005e9a:	d0fa      	beq.n	8005e92 <__ieee754_sqrt+0x126>
 8005e9c:	02e6      	lsls	r6, r4, #11
 8005e9e:	d50a      	bpl.n	8005eb6 <__ieee754_sqrt+0x14a>
 8005ea0:	f1c2 0020 	rsb	r0, r2, #32
 8005ea4:	fa23 f000 	lsr.w	r0, r3, r0
 8005ea8:	1e55      	subs	r5, r2, #1
 8005eaa:	4093      	lsls	r3, r2
 8005eac:	4304      	orrs	r4, r0
 8005eae:	1b4a      	subs	r2, r1, r5
 8005eb0:	e78a      	b.n	8005dc8 <__ieee754_sqrt+0x5c>
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	e7f0      	b.n	8005e98 <__ieee754_sqrt+0x12c>
 8005eb6:	0064      	lsls	r4, r4, #1
 8005eb8:	3201      	adds	r2, #1
 8005eba:	e7ef      	b.n	8005e9c <__ieee754_sqrt+0x130>
 8005ebc:	4680      	mov	r8, r0
 8005ebe:	e7bf      	b.n	8005e40 <__ieee754_sqrt+0xd4>
 8005ec0:	7ff00000 	.word	0x7ff00000

08005ec4 <fabs>:
 8005ec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4770      	bx	lr

08005ecc <finite>:
 8005ecc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005ed0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8005ed4:	0fc0      	lsrs	r0, r0, #31
 8005ed6:	4770      	bx	lr

08005ed8 <matherr>:
 8005ed8:	2000      	movs	r0, #0
 8005eda:	4770      	bx	lr

08005edc <nan>:
 8005edc:	2000      	movs	r0, #0
 8005ede:	4901      	ldr	r1, [pc, #4]	; (8005ee4 <nan+0x8>)
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	7ff80000 	.word	0x7ff80000

08005ee8 <rint>:
 8005ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005eee:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8005ef2:	f1bc 0f13 	cmp.w	ip, #19
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	460b      	mov	r3, r1
 8005efc:	4606      	mov	r6, r0
 8005efe:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005f02:	dc5a      	bgt.n	8005fba <rint+0xd2>
 8005f04:	f1bc 0f00 	cmp.w	ip, #0
 8005f08:	da2b      	bge.n	8005f62 <rint+0x7a>
 8005f0a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005f0e:	4302      	orrs	r2, r0
 8005f10:	d023      	beq.n	8005f5a <rint+0x72>
 8005f12:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005f16:	4302      	orrs	r2, r0
 8005f18:	4256      	negs	r6, r2
 8005f1a:	4316      	orrs	r6, r2
 8005f1c:	0c4b      	lsrs	r3, r1, #17
 8005f1e:	0b36      	lsrs	r6, r6, #12
 8005f20:	4934      	ldr	r1, [pc, #208]	; (8005ff4 <rint+0x10c>)
 8005f22:	045b      	lsls	r3, r3, #17
 8005f24:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8005f28:	ea46 0503 	orr.w	r5, r6, r3
 8005f2c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005f30:	4602      	mov	r2, r0
 8005f32:	462b      	mov	r3, r5
 8005f34:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005f38:	4620      	mov	r0, r4
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	f7fa f90e 	bl	800015c <__adddf3>
 8005f40:	e9cd 0100 	strd	r0, r1, [sp]
 8005f44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f48:	462b      	mov	r3, r5
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	f7fa f904 	bl	8000158 <__aeabi_dsub>
 8005f50:	4604      	mov	r4, r0
 8005f52:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f56:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	b003      	add	sp, #12
 8005f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f62:	4a25      	ldr	r2, [pc, #148]	; (8005ff8 <rint+0x110>)
 8005f64:	fa42 f20c 	asr.w	r2, r2, ip
 8005f68:	4011      	ands	r1, r2
 8005f6a:	4301      	orrs	r1, r0
 8005f6c:	d0f5      	beq.n	8005f5a <rint+0x72>
 8005f6e:	0852      	lsrs	r2, r2, #1
 8005f70:	ea05 0102 	and.w	r1, r5, r2
 8005f74:	ea50 0601 	orrs.w	r6, r0, r1
 8005f78:	d00c      	beq.n	8005f94 <rint+0xac>
 8005f7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005f7e:	f1bc 0f13 	cmp.w	ip, #19
 8005f82:	bf0c      	ite	eq
 8005f84:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005f88:	2600      	movne	r6, #0
 8005f8a:	ea25 0202 	bic.w	r2, r5, r2
 8005f8e:	fa43 f30c 	asr.w	r3, r3, ip
 8005f92:	4313      	orrs	r3, r2
 8005f94:	4917      	ldr	r1, [pc, #92]	; (8005ff4 <rint+0x10c>)
 8005f96:	4632      	mov	r2, r6
 8005f98:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8005f9c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	f7fa f8da 	bl	800015c <__adddf3>
 8005fa8:	e9cd 0100 	strd	r0, r1, [sp]
 8005fac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	f7fa f8d0 	bl	8000158 <__aeabi_dsub>
 8005fb8:	e008      	b.n	8005fcc <rint+0xe4>
 8005fba:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8005fbe:	dd08      	ble.n	8005fd2 <rint+0xea>
 8005fc0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8005fc4:	d1c9      	bne.n	8005f5a <rint+0x72>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	f7fa f8c8 	bl	800015c <__adddf3>
 8005fcc:	4604      	mov	r4, r0
 8005fce:	460d      	mov	r5, r1
 8005fd0:	e7c3      	b.n	8005f5a <rint+0x72>
 8005fd2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8005fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fda:	40ca      	lsrs	r2, r1
 8005fdc:	4210      	tst	r0, r2
 8005fde:	d0bc      	beq.n	8005f5a <rint+0x72>
 8005fe0:	0852      	lsrs	r2, r2, #1
 8005fe2:	4210      	tst	r0, r2
 8005fe4:	bf1f      	itttt	ne
 8005fe6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8005fea:	ea20 0202 	bicne.w	r2, r0, r2
 8005fee:	410e      	asrne	r6, r1
 8005ff0:	4316      	orrne	r6, r2
 8005ff2:	e7cf      	b.n	8005f94 <rint+0xac>
 8005ff4:	08006958 	.word	0x08006958
 8005ff8:	000fffff 	.word	0x000fffff
 8005ffc:	00000000 	.word	0x00000000

08006000 <scalbn>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	4616      	mov	r6, r2
 8006004:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006008:	4604      	mov	r4, r0
 800600a:	460d      	mov	r5, r1
 800600c:	460b      	mov	r3, r1
 800600e:	b982      	cbnz	r2, 8006032 <scalbn+0x32>
 8006010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006014:	4303      	orrs	r3, r0
 8006016:	d034      	beq.n	8006082 <scalbn+0x82>
 8006018:	4b2d      	ldr	r3, [pc, #180]	; (80060d0 <scalbn+0xd0>)
 800601a:	2200      	movs	r2, #0
 800601c:	f7fa fa54 	bl	80004c8 <__aeabi_dmul>
 8006020:	4b2c      	ldr	r3, [pc, #176]	; (80060d4 <scalbn+0xd4>)
 8006022:	4604      	mov	r4, r0
 8006024:	429e      	cmp	r6, r3
 8006026:	460d      	mov	r5, r1
 8006028:	da0d      	bge.n	8006046 <scalbn+0x46>
 800602a:	a325      	add	r3, pc, #148	; (adr r3, 80060c0 <scalbn+0xc0>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	e01c      	b.n	800606c <scalbn+0x6c>
 8006032:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006036:	42ba      	cmp	r2, r7
 8006038:	d109      	bne.n	800604e <scalbn+0x4e>
 800603a:	4602      	mov	r2, r0
 800603c:	f7fa f88e 	bl	800015c <__adddf3>
 8006040:	4604      	mov	r4, r0
 8006042:	460d      	mov	r5, r1
 8006044:	e01d      	b.n	8006082 <scalbn+0x82>
 8006046:	460b      	mov	r3, r1
 8006048:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800604c:	3a36      	subs	r2, #54	; 0x36
 800604e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006052:	4432      	add	r2, r6
 8006054:	428a      	cmp	r2, r1
 8006056:	dd0c      	ble.n	8006072 <scalbn+0x72>
 8006058:	4622      	mov	r2, r4
 800605a:	462b      	mov	r3, r5
 800605c:	a11a      	add	r1, pc, #104	; (adr r1, 80060c8 <scalbn+0xc8>)
 800605e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006062:	f000 f83b 	bl	80060dc <copysign>
 8006066:	a318      	add	r3, pc, #96	; (adr r3, 80060c8 <scalbn+0xc8>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa fa2c 	bl	80004c8 <__aeabi_dmul>
 8006070:	e7e6      	b.n	8006040 <scalbn+0x40>
 8006072:	2a00      	cmp	r2, #0
 8006074:	dd08      	ble.n	8006088 <scalbn+0x88>
 8006076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800607a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800607e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006088:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800608c:	da0b      	bge.n	80060a6 <scalbn+0xa6>
 800608e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006092:	429e      	cmp	r6, r3
 8006094:	4622      	mov	r2, r4
 8006096:	462b      	mov	r3, r5
 8006098:	dce0      	bgt.n	800605c <scalbn+0x5c>
 800609a:	a109      	add	r1, pc, #36	; (adr r1, 80060c0 <scalbn+0xc0>)
 800609c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060a0:	f000 f81c 	bl	80060dc <copysign>
 80060a4:	e7c1      	b.n	800602a <scalbn+0x2a>
 80060a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060aa:	3236      	adds	r2, #54	; 0x36
 80060ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	2200      	movs	r2, #0
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <scalbn+0xd8>)
 80060bc:	e7d6      	b.n	800606c <scalbn+0x6c>
 80060be:	bf00      	nop
 80060c0:	c2f8f359 	.word	0xc2f8f359
 80060c4:	01a56e1f 	.word	0x01a56e1f
 80060c8:	8800759c 	.word	0x8800759c
 80060cc:	7e37e43c 	.word	0x7e37e43c
 80060d0:	43500000 	.word	0x43500000
 80060d4:	ffff3cb0 	.word	0xffff3cb0
 80060d8:	3c900000 	.word	0x3c900000

080060dc <copysign>:
 80060dc:	b530      	push	{r4, r5, lr}
 80060de:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80060e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060e6:	ea42 0503 	orr.w	r5, r2, r3
 80060ea:	4629      	mov	r1, r5
 80060ec:	bd30      	pop	{r4, r5, pc}
	...

080060f0 <_init>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr

080060fc <_fini>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr
