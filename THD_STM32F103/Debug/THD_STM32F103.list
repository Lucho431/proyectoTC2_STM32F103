
THD_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea8  08004ea8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ea8  08004ea8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ea8  08004ea8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000078  08004f28  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08004f28  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118b7  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a2f  00000000  00000000  00031958  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  00035378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000196c8  00000000  00000000  00036218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1af  00000000  00000000  0004f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009024f  00000000  00000000  0005ea8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eecde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004460  00000000  00000000  000eed5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080046b4 	.word	0x080046b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080046b4 	.word	0x080046b4

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b3c      	ldr	r3, [pc, #240]	; (8000250 <MX_ADC1_Init+0x104>)
 800015e:	4a3d      	ldr	r2, [pc, #244]	; (8000254 <MX_ADC1_Init+0x108>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b3b      	ldr	r3, [pc, #236]	; (8000250 <MX_ADC1_Init+0x104>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016a:	4b39      	ldr	r3, [pc, #228]	; (8000250 <MX_ADC1_Init+0x104>)
 800016c:	2201      	movs	r2, #1
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b37      	ldr	r3, [pc, #220]	; (8000250 <MX_ADC1_Init+0x104>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b36      	ldr	r3, [pc, #216]	; (8000250 <MX_ADC1_Init+0x104>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b34      	ldr	r3, [pc, #208]	; (8000250 <MX_ADC1_Init+0x104>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000184:	4b32      	ldr	r3, [pc, #200]	; (8000250 <MX_ADC1_Init+0x104>)
 8000186:	2206      	movs	r2, #6
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4831      	ldr	r0, [pc, #196]	; (8000250 <MX_ADC1_Init+0x104>)
 800018c:	f000 ff40 	bl	8001010 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fabd 	bl	8000714 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80001a2:	2302      	movs	r3, #2
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4829      	ldr	r0, [pc, #164]	; (8000250 <MX_ADC1_Init+0x104>)
 80001ac:	f001 f9c4 	bl	8001538 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 faad 	bl	8000714 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4822      	ldr	r0, [pc, #136]	; (8000250 <MX_ADC1_Init+0x104>)
 80001c8:	f001 f9b6 	bl	8001538 <HAL_ADC_ConfigChannel>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001d2:	f000 fa9f 	bl	8000714 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001d6:	2302      	movs	r3, #2
 80001d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001da:	2303      	movs	r3, #3
 80001dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4619      	mov	r1, r3
 80001e2:	481b      	ldr	r0, [pc, #108]	; (8000250 <MX_ADC1_Init+0x104>)
 80001e4:	f001 f9a8 	bl	8001538 <HAL_ADC_ConfigChannel>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001ee:	f000 fa91 	bl	8000714 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80001f2:	2303      	movs	r3, #3
 80001f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001f6:	2304      	movs	r3, #4
 80001f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4619      	mov	r1, r3
 80001fe:	4814      	ldr	r0, [pc, #80]	; (8000250 <MX_ADC1_Init+0x104>)
 8000200:	f001 f99a 	bl	8001538 <HAL_ADC_ConfigChannel>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800020a:	f000 fa83 	bl	8000714 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800020e:	2304      	movs	r3, #4
 8000210:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000212:	2305      	movs	r3, #5
 8000214:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	480d      	ldr	r0, [pc, #52]	; (8000250 <MX_ADC1_Init+0x104>)
 800021c:	f001 f98c 	bl	8001538 <HAL_ADC_ConfigChannel>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000226:	f000 fa75 	bl	8000714 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800022a:	2305      	movs	r3, #5
 800022c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800022e:	2306      	movs	r3, #6
 8000230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4619      	mov	r1, r3
 8000236:	4806      	ldr	r0, [pc, #24]	; (8000250 <MX_ADC1_Init+0x104>)
 8000238:	f001 f97e 	bl	8001538 <HAL_ADC_ConfigChannel>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000242:	f000 fa67 	bl	8000714 <Error_Handler>
  }

}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200004ac 	.word	0x200004ac
 8000254:	40012400 	.word	0x40012400

08000258 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	f107 0310 	add.w	r3, r7, #16
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <HAL_ADC_MspInit+0xcc>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d151      	bne.n	800031c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000278:	4b2b      	ldr	r3, [pc, #172]	; (8000328 <HAL_ADC_MspInit+0xd0>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a2a      	ldr	r2, [pc, #168]	; (8000328 <HAL_ADC_MspInit+0xd0>)
 800027e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b28      	ldr	r3, [pc, #160]	; (8000328 <HAL_ADC_MspInit+0xd0>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000290:	4b25      	ldr	r3, [pc, #148]	; (8000328 <HAL_ADC_MspInit+0xd0>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a24      	ldr	r2, [pc, #144]	; (8000328 <HAL_ADC_MspInit+0xd0>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b22      	ldr	r3, [pc, #136]	; (8000328 <HAL_ADC_MspInit+0xd0>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0304 	and.w	r3, r3, #4
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002a8:	233f      	movs	r3, #63	; 0x3f
 80002aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ac:	2303      	movs	r3, #3
 80002ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	4619      	mov	r1, r3
 80002b6:	481d      	ldr	r0, [pc, #116]	; (800032c <HAL_ADC_MspInit+0xd4>)
 80002b8:	f001 fe2e 	bl	8001f18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002be:	4a1d      	ldr	r2, [pc, #116]	; (8000334 <HAL_ADC_MspInit+0xdc>)
 80002c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002e6:	2220      	movs	r2, #32
 80002e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002f0:	480f      	ldr	r0, [pc, #60]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 80002f2:	f001 fc23 	bl	8001b3c <HAL_DMA_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80002fc:	f000 fa0a 	bl	8000714 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 8000304:	621a      	str	r2, [r3, #32]
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <HAL_ADC_MspInit+0xd8>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	2100      	movs	r1, #0
 8000310:	2012      	movs	r0, #18
 8000312:	f001 fbdc 	bl	8001ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000316:	2012      	movs	r0, #18
 8000318:	f001 fbf5 	bl	8001b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800031c:	bf00      	nop
 800031e:	3720      	adds	r7, #32
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40012400 	.word	0x40012400
 8000328:	40021000 	.word	0x40021000
 800032c:	40010800 	.word	0x40010800
 8000330:	200004dc 	.word	0x200004dc
 8000334:	40020008 	.word	0x40020008

08000338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_DMA_Init+0x38>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a0b      	ldr	r2, [pc, #44]	; (8000370 <MX_DMA_Init+0x38>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_DMA_Init+0x38>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	2100      	movs	r1, #0
 800035a:	200b      	movs	r0, #11
 800035c:	f001 fbb7 	bl	8001ace <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000360:	200b      	movs	r0, #11
 8000362:	f001 fbd0 	bl	8001b06 <HAL_NVIC_EnableIRQ>

}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037a:	f107 0310 	add.w	r3, r7, #16
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000388:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <MX_GPIO_Init+0xd0>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a2d      	ldr	r2, [pc, #180]	; (8000444 <MX_GPIO_Init+0xd0>)
 800038e:	f043 0310 	orr.w	r3, r3, #16
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <MX_GPIO_Init+0xd0>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0310 	and.w	r3, r3, #16
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a0:	4b28      	ldr	r3, [pc, #160]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a27      	ldr	r2, [pc, #156]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b25      	ldr	r3, [pc, #148]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0320 	and.w	r3, r3, #32
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b8:	4b22      	ldr	r3, [pc, #136]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a21      	ldr	r2, [pc, #132]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0304 	and.w	r3, r3, #4
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d0:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <MX_GPIO_Init+0xd0>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0308 	and.w	r3, r3, #8
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ee:	4816      	ldr	r0, [pc, #88]	; (8000448 <MX_GPIO_Init+0xd4>)
 80003f0:	f001 feec 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003f4:	2200      	movs	r2, #0
 80003f6:	f641 4107 	movw	r1, #7175	; 0x1c07
 80003fa:	4814      	ldr	r0, [pc, #80]	; (800044c <MX_GPIO_Init+0xd8>)
 80003fc:	f001 fee6 	bl	80021cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <MX_GPIO_Init+0xd4>)
 800041a:	f001 fd7d 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800041e:	f641 4307 	movw	r3, #7175	; 0x1c07
 8000422:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	2302      	movs	r3, #2
 800042e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_GPIO_Init+0xd8>)
 8000438:	f001 fd6e 	bl	8001f18 <HAL_GPIO_Init>

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40021000 	.word	0x40021000
 8000448:	40011000 	.word	0x40011000
 800044c:	40010c00 	.word	0x40010c00

08000450 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <MX_I2C1_Init+0x50>)
 8000456:	4a13      	ldr	r2, [pc, #76]	; (80004a4 <MX_I2C1_Init+0x54>)
 8000458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_I2C1_Init+0x50>)
 800045c:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <MX_I2C1_Init+0x58>)
 800045e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_I2C1_Init+0x50>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_I2C1_Init+0x50>)
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_I2C1_Init+0x50>)
 800046e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000472:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <MX_I2C1_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_I2C1_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800048c:	4804      	ldr	r0, [pc, #16]	; (80004a0 <MX_I2C1_Init+0x50>)
 800048e:	f001 feb5 	bl	80021fc <HAL_I2C_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000498:	f000 f93c 	bl	8000714 <Error_Handler>
  }

}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000520 	.word	0x20000520
 80004a4:	40005400 	.word	0x40005400
 80004a8:	00061a80 	.word	0x00061a80

080004ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a15      	ldr	r2, [pc, #84]	; (800051c <HAL_I2C_MspInit+0x70>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d123      	bne.n	8000514 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <HAL_I2C_MspInit+0x74>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a13      	ldr	r2, [pc, #76]	; (8000520 <HAL_I2C_MspInit+0x74>)
 80004d2:	f043 0308 	orr.w	r3, r3, #8
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <HAL_I2C_MspInit+0x74>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0308 	and.w	r3, r3, #8
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004e4:	23c0      	movs	r3, #192	; 0xc0
 80004e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004e8:	2312      	movs	r3, #18
 80004ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <HAL_I2C_MspInit+0x78>)
 80004f8:	f001 fd0e 	bl	8001f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_I2C_MspInit+0x74>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_I2C_MspInit+0x74>)
 8000502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000506:	61d3      	str	r3, [r2, #28]
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_I2C_MspInit+0x74>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40005400 	.word	0x40005400
 8000520:	40021000 	.word	0x40021000
 8000524:	40010c00 	.word	0x40010c00

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fcec 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f87e 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f7ff ff1e 	bl	8000374 <MX_GPIO_Init>
  MX_DMA_Init();
 8000538:	f7ff fefe 	bl	8000338 <MX_DMA_Init>
  MX_ADC1_Init();
 800053c:	f7ff fe06 	bl	800014c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000540:	f7ff ff86 	bl	8000450 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000544:	f000 fc48 	bl	8000dd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000548:	f000 f8ea 	bl	8000720 <SSD1306_Init>

  HAL_TIM_Base_Start_IT(&htim2);
 800054c:	4830      	ldr	r0, [pc, #192]	; (8000610 <main+0xe8>)
 800054e:	f003 f8cf 	bl	80036f0 <HAL_TIM_Base_Start_IT>

  SSD1306_Clear();
 8000552:	f000 fb08 	bl	8000b66 <SSD1306_Clear>
  SSD1306_GotoXY(0, 32);
 8000556:	2120      	movs	r1, #32
 8000558:	2000      	movs	r0, #0
 800055a:	f000 fa49 	bl	80009f0 <SSD1306_GotoXY>
  SSD1306_Puts("TEST", &Font_7x10, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	492c      	ldr	r1, [pc, #176]	; (8000614 <main+0xec>)
 8000562:	482d      	ldr	r0, [pc, #180]	; (8000618 <main+0xf0>)
 8000564:	f000 fada 	bl	8000b1c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000568:	f000 f99e 	bl	80008a8 <SSD1306_UpdateScreen>
  HAL_Delay(2000);
 800056c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000570:	f000 fd2c 	bl	8000fcc <HAL_Delay>
  SSD1306_Clear();
 8000574:	f000 faf7 	bl	8000b66 <SSD1306_Clear>

  datos[2]=0xffff;
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <main+0xf4>)
 800057a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800057e:	609a      	str	r2, [r3, #8]


  HAL_ADC_Start_DMA(&hadc1, datos, 6);
 8000580:	2206      	movs	r2, #6
 8000582:	4926      	ldr	r1, [pc, #152]	; (800061c <main+0xf4>)
 8000584:	4826      	ldr	r0, [pc, #152]	; (8000620 <main+0xf8>)
 8000586:	f000 fe1b 	bl	80011c0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_print){
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <main+0xfc>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0fb      	beq.n	800058a <main+0x62>

		  SSD1306_Clear();
 8000592:	f000 fae8 	bl	8000b66 <SSD1306_Clear>
		  SSD1306_GotoXY(0, 18);
 8000596:	2112      	movs	r1, #18
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fa29 	bl	80009f0 <SSD1306_GotoXY>
		  sprintf (texto, "%d %d", (int)datos[0], (int)datos[1]);
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <main+0xf4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <main+0xf4>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	491f      	ldr	r1, [pc, #124]	; (8000628 <main+0x100>)
 80005aa:	4820      	ldr	r0, [pc, #128]	; (800062c <main+0x104>)
 80005ac:	f003 fc70 	bl	8003e90 <siprintf>
		  SSD1306_Puts(texto, &Font_7x10, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	4918      	ldr	r1, [pc, #96]	; (8000614 <main+0xec>)
 80005b4:	481d      	ldr	r0, [pc, #116]	; (800062c <main+0x104>)
 80005b6:	f000 fab1 	bl	8000b1c <SSD1306_Puts>
		  SSD1306_GotoXY(0, 30);
 80005ba:	211e      	movs	r1, #30
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fa17 	bl	80009f0 <SSD1306_GotoXY>
		  sprintf (texto, "%d %d", (int)datos[2], (int)datos[3]);
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0xf4>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <main+0xf4>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4916      	ldr	r1, [pc, #88]	; (8000628 <main+0x100>)
 80005ce:	4817      	ldr	r0, [pc, #92]	; (800062c <main+0x104>)
 80005d0:	f003 fc5e 	bl	8003e90 <siprintf>
		  SSD1306_Puts(texto, &Font_7x10, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	490f      	ldr	r1, [pc, #60]	; (8000614 <main+0xec>)
 80005d8:	4814      	ldr	r0, [pc, #80]	; (800062c <main+0x104>)
 80005da:	f000 fa9f 	bl	8000b1c <SSD1306_Puts>
		  SSD1306_GotoXY(0, 42);
 80005de:	212a      	movs	r1, #42	; 0x2a
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 fa05 	bl	80009f0 <SSD1306_GotoXY>
		  sprintf (texto, "%d %d", (int)datos[4], (int)datos[5]);
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <main+0xf4>)
 80005e8:	691b      	ldr	r3, [r3, #16]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <main+0xf4>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	490d      	ldr	r1, [pc, #52]	; (8000628 <main+0x100>)
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <main+0x104>)
 80005f4:	f003 fc4c 	bl	8003e90 <siprintf>
		  SSD1306_Puts(texto, &Font_7x10, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	4906      	ldr	r1, [pc, #24]	; (8000614 <main+0xec>)
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <main+0x104>)
 80005fe:	f000 fa8d 	bl	8000b1c <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000602:	f000 f951 	bl	80008a8 <SSD1306_UpdateScreen>

		  flag_print = 0;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <main+0xfc>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	  if (flag_print){
 800060c:	e7bd      	b.n	800058a <main+0x62>
 800060e:	bf00      	nop
 8000610:	200005a8 	.word	0x200005a8
 8000614:	20000000 	.word	0x20000000
 8000618:	080046cc 	.word	0x080046cc
 800061c:	20000574 	.word	0x20000574
 8000620:	200004ac 	.word	0x200004ac
 8000624:	20000094 	.word	0x20000094
 8000628:	080046d4 	.word	0x080046d4
 800062c:	2000058c 	.word	0x2000058c

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063a:	2228      	movs	r2, #40	; 0x28
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 fc1e 	bl	8003e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	2301      	movs	r3, #1
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fb24 	bl	8002cd4 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000692:	f000 f83f 	bl	8000714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fd8e 	bl	80031d4 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006be:	f000 f829 	bl	8000714 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006c2:	2302      	movs	r3, #2
 80006c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 ff08 	bl	80034e4 <HAL_RCCEx_PeriphCLKConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006da:	f000 f81b 	bl	8000714 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]

}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

	flag_print = 1;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000094 	.word	0x20000094

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000726:	f000 fa27 	bl	8000b78 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800072a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800072e:	2201      	movs	r2, #1
 8000730:	2178      	movs	r1, #120	; 0x78
 8000732:	485b      	ldr	r0, [pc, #364]	; (80008a0 <SSD1306_Init+0x180>)
 8000734:	f001 ff98 	bl	8002668 <HAL_I2C_IsDeviceReady>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800073e:	2300      	movs	r3, #0
 8000740:	e0a9      	b.n	8000896 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000742:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000746:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000748:	e002      	b.n	8000750 <SSD1306_Init+0x30>
		p--;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3b01      	subs	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f9      	bne.n	800074a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000756:	22ae      	movs	r2, #174	; 0xae
 8000758:	2100      	movs	r1, #0
 800075a:	2078      	movs	r0, #120	; 0x78
 800075c:	f000 fa68 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000760:	2220      	movs	r2, #32
 8000762:	2100      	movs	r1, #0
 8000764:	2078      	movs	r0, #120	; 0x78
 8000766:	f000 fa63 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800076a:	2210      	movs	r2, #16
 800076c:	2100      	movs	r1, #0
 800076e:	2078      	movs	r0, #120	; 0x78
 8000770:	f000 fa5e 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000774:	22b0      	movs	r2, #176	; 0xb0
 8000776:	2100      	movs	r1, #0
 8000778:	2078      	movs	r0, #120	; 0x78
 800077a:	f000 fa59 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800077e:	22c8      	movs	r2, #200	; 0xc8
 8000780:	2100      	movs	r1, #0
 8000782:	2078      	movs	r0, #120	; 0x78
 8000784:	f000 fa54 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	2078      	movs	r0, #120	; 0x78
 800078e:	f000 fa4f 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000792:	2210      	movs	r2, #16
 8000794:	2100      	movs	r1, #0
 8000796:	2078      	movs	r0, #120	; 0x78
 8000798:	f000 fa4a 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800079c:	2240      	movs	r2, #64	; 0x40
 800079e:	2100      	movs	r1, #0
 80007a0:	2078      	movs	r0, #120	; 0x78
 80007a2:	f000 fa45 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80007a6:	2281      	movs	r2, #129	; 0x81
 80007a8:	2100      	movs	r1, #0
 80007aa:	2078      	movs	r0, #120	; 0x78
 80007ac:	f000 fa40 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80007b0:	22ff      	movs	r2, #255	; 0xff
 80007b2:	2100      	movs	r1, #0
 80007b4:	2078      	movs	r0, #120	; 0x78
 80007b6:	f000 fa3b 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80007ba:	22a1      	movs	r2, #161	; 0xa1
 80007bc:	2100      	movs	r1, #0
 80007be:	2078      	movs	r0, #120	; 0x78
 80007c0:	f000 fa36 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80007c4:	22a6      	movs	r2, #166	; 0xa6
 80007c6:	2100      	movs	r1, #0
 80007c8:	2078      	movs	r0, #120	; 0x78
 80007ca:	f000 fa31 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80007ce:	22a8      	movs	r2, #168	; 0xa8
 80007d0:	2100      	movs	r1, #0
 80007d2:	2078      	movs	r0, #120	; 0x78
 80007d4:	f000 fa2c 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80007d8:	223f      	movs	r2, #63	; 0x3f
 80007da:	2100      	movs	r1, #0
 80007dc:	2078      	movs	r0, #120	; 0x78
 80007de:	f000 fa27 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007e2:	22a4      	movs	r2, #164	; 0xa4
 80007e4:	2100      	movs	r1, #0
 80007e6:	2078      	movs	r0, #120	; 0x78
 80007e8:	f000 fa22 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80007ec:	22d3      	movs	r2, #211	; 0xd3
 80007ee:	2100      	movs	r1, #0
 80007f0:	2078      	movs	r0, #120	; 0x78
 80007f2:	f000 fa1d 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2078      	movs	r0, #120	; 0x78
 80007fc:	f000 fa18 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000800:	22d5      	movs	r2, #213	; 0xd5
 8000802:	2100      	movs	r1, #0
 8000804:	2078      	movs	r0, #120	; 0x78
 8000806:	f000 fa13 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800080a:	22f0      	movs	r2, #240	; 0xf0
 800080c:	2100      	movs	r1, #0
 800080e:	2078      	movs	r0, #120	; 0x78
 8000810:	f000 fa0e 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000814:	22d9      	movs	r2, #217	; 0xd9
 8000816:	2100      	movs	r1, #0
 8000818:	2078      	movs	r0, #120	; 0x78
 800081a:	f000 fa09 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800081e:	2222      	movs	r2, #34	; 0x22
 8000820:	2100      	movs	r1, #0
 8000822:	2078      	movs	r0, #120	; 0x78
 8000824:	f000 fa04 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000828:	22da      	movs	r2, #218	; 0xda
 800082a:	2100      	movs	r1, #0
 800082c:	2078      	movs	r0, #120	; 0x78
 800082e:	f000 f9ff 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000832:	2212      	movs	r2, #18
 8000834:	2100      	movs	r1, #0
 8000836:	2078      	movs	r0, #120	; 0x78
 8000838:	f000 f9fa 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800083c:	22db      	movs	r2, #219	; 0xdb
 800083e:	2100      	movs	r1, #0
 8000840:	2078      	movs	r0, #120	; 0x78
 8000842:	f000 f9f5 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000846:	2220      	movs	r2, #32
 8000848:	2100      	movs	r1, #0
 800084a:	2078      	movs	r0, #120	; 0x78
 800084c:	f000 f9f0 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000850:	228d      	movs	r2, #141	; 0x8d
 8000852:	2100      	movs	r1, #0
 8000854:	2078      	movs	r0, #120	; 0x78
 8000856:	f000 f9eb 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800085a:	2214      	movs	r2, #20
 800085c:	2100      	movs	r1, #0
 800085e:	2078      	movs	r0, #120	; 0x78
 8000860:	f000 f9e6 	bl	8000c30 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000864:	22af      	movs	r2, #175	; 0xaf
 8000866:	2100      	movs	r1, #0
 8000868:	2078      	movs	r0, #120	; 0x78
 800086a:	f000 f9e1 	bl	8000c30 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800086e:	222e      	movs	r2, #46	; 0x2e
 8000870:	2100      	movs	r1, #0
 8000872:	2078      	movs	r0, #120	; 0x78
 8000874:	f000 f9dc 	bl	8000c30 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f843 	bl	8000904 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800087e:	f000 f813 	bl	80008a8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <SSD1306_Init+0x184>)
 8000884:	2200      	movs	r2, #0
 8000886:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SSD1306_Init+0x184>)
 800088a:	2200      	movs	r2, #0
 800088c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SSD1306_Init+0x184>)
 8000890:	2201      	movs	r2, #1
 8000892:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000894:	2301      	movs	r3, #1
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000520 	.word	0x20000520
 80008a4:	20000498 	.word	0x20000498

080008a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e01d      	b.n	80008f0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	3b50      	subs	r3, #80	; 0x50
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	2078      	movs	r0, #120	; 0x78
 80008c0:	f000 f9b6 	bl	8000c30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	; 0x78
 80008ca:	f000 f9b1 	bl	8000c30 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80008ce:	2210      	movs	r2, #16
 80008d0:	2100      	movs	r1, #0
 80008d2:	2078      	movs	r0, #120	; 0x78
 80008d4:	f000 f9ac 	bl	8000c30 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	01db      	lsls	r3, r3, #7
 80008dc:	4a08      	ldr	r2, [pc, #32]	; (8000900 <SSD1306_UpdateScreen+0x58>)
 80008de:	441a      	add	r2, r3
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	2140      	movs	r1, #64	; 0x40
 80008e4:	2078      	movs	r0, #120	; 0x78
 80008e6:	f000 f95b 	bl	8000ba0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	3301      	adds	r3, #1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b07      	cmp	r3, #7
 80008f4:	d9de      	bls.n	80008b4 <SSD1306_UpdateScreen+0xc>
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000098 	.word	0x20000098

08000904 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <SSD1306_Fill+0x14>
 8000914:	2300      	movs	r3, #0
 8000916:	e000      	b.n	800091a <SSD1306_Fill+0x16>
 8000918:	23ff      	movs	r3, #255	; 0xff
 800091a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091e:	4619      	mov	r1, r3
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <SSD1306_Fill+0x2c>)
 8000922:	f003 faad 	bl	8003e80 <memset>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000098 	.word	0x20000098

08000934 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
 800093e:	460b      	mov	r3, r1
 8000940:	80bb      	strh	r3, [r7, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	70fb      	strb	r3, [r7, #3]
	if (
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	2b7f      	cmp	r3, #127	; 0x7f
 800094a:	d848      	bhi.n	80009de <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	2b3f      	cmp	r3, #63	; 0x3f
 8000950:	d845      	bhi.n	80009de <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000952:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <SSD1306_DrawPixel+0xb4>)
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d006      	beq.n	8000968 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	2b00      	cmp	r3, #0
 800095e:	bf0c      	ite	eq
 8000960:	2301      	moveq	r3, #1
 8000962:	2300      	movne	r3, #0
 8000964:	b2db      	uxtb	r3, r3
 8000966:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d11a      	bne.n	80009a4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800096e:	88fa      	ldrh	r2, [r7, #6]
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	b298      	uxth	r0, r3
 8000976:	4603      	mov	r3, r0
 8000978:	01db      	lsls	r3, r3, #7
 800097a:	4413      	add	r3, r2
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <SSD1306_DrawPixel+0xb8>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	b25a      	sxtb	r2, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	2101      	movs	r1, #1
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b259      	sxtb	r1, r3
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	4603      	mov	r3, r0
 8000998:	01db      	lsls	r3, r3, #7
 800099a:	4413      	add	r3, r2
 800099c:	b2c9      	uxtb	r1, r1
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <SSD1306_DrawPixel+0xb8>)
 80009a0:	54d1      	strb	r1, [r2, r3]
 80009a2:	e01d      	b.n	80009e0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	88bb      	ldrh	r3, [r7, #4]
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	b298      	uxth	r0, r3
 80009ac:	4603      	mov	r3, r0
 80009ae:	01db      	lsls	r3, r3, #7
 80009b0:	4413      	add	r3, r2
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <SSD1306_DrawPixel+0xb8>)
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	88bb      	ldrh	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	4013      	ands	r3, r2
 80009cc:	b259      	sxtb	r1, r3
 80009ce:	88fa      	ldrh	r2, [r7, #6]
 80009d0:	4603      	mov	r3, r0
 80009d2:	01db      	lsls	r3, r3, #7
 80009d4:	4413      	add	r3, r2
 80009d6:	b2c9      	uxtb	r1, r1
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <SSD1306_DrawPixel+0xb8>)
 80009da:	54d1      	strb	r1, [r2, r3]
 80009dc:	e000      	b.n	80009e0 <SSD1306_DrawPixel+0xac>
		return;
 80009de:	bf00      	nop
	}
}
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000498 	.word	0x20000498
 80009ec:	20000098 	.word	0x20000098

080009f0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	460a      	mov	r2, r1
 80009fa:	80fb      	strh	r3, [r7, #6]
 80009fc:	4613      	mov	r3, r2
 80009fe:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000a00:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SSD1306_GotoXY+0x28>)
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <SSD1306_GotoXY+0x28>)
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	8053      	strh	r3, [r2, #2]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000498 	.word	0x20000498

08000a1c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <SSD1306_Putc+0xfc>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
	if (
 8000a38:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3a:	dc07      	bgt.n	8000a4c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000a3c:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <SSD1306_Putc+0xfc>)
 8000a3e:	885b      	ldrh	r3, [r3, #2]
 8000a40:	461a      	mov	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a48:	2b3f      	cmp	r3, #63	; 0x3f
 8000a4a:	dd01      	ble.n	8000a50 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e05e      	b.n	8000b0e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e04b      	b.n	8000aee <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	3b20      	subs	r3, #32
 8000a5e:	6839      	ldr	r1, [r7, #0]
 8000a60:	7849      	ldrb	r1, [r1, #1]
 8000a62:	fb01 f303 	mul.w	r3, r1, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	440b      	add	r3, r1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	e030      	b.n	8000adc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d010      	beq.n	8000aac <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a8a:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <SSD1306_Putc+0xfc>)
 8000a8c:	881a      	ldrh	r2, [r3, #0]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b298      	uxth	r0, r3
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <SSD1306_Putc+0xfc>)
 8000a98:	885a      	ldrh	r2, [r3, #2]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f7ff ff45 	bl	8000934 <SSD1306_DrawPixel>
 8000aaa:	e014      	b.n	8000ad6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <SSD1306_Putc+0xfc>)
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <SSD1306_Putc+0xfc>)
 8000aba:	885a      	ldrh	r2, [r3, #2]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b299      	uxth	r1, r3
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf0c      	ite	eq
 8000aca:	2301      	moveq	r3, #1
 8000acc:	2300      	movne	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f7ff ff2f 	bl	8000934 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d3c8      	bcc.n	8000a7a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	461a      	mov	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d3ad      	bcc.n	8000a56 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <SSD1306_Putc+0xfc>)
 8000afc:	881a      	ldrh	r2, [r3, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <SSD1306_Putc+0xfc>)
 8000b0a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000498 	.word	0x20000498

08000b1c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	4613      	mov	r3, r2
 8000b28:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000b2a:	e012      	b.n	8000b52 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff71 	bl	8000a1c <SSD1306_Putc>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d002      	beq.n	8000b4c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	e008      	b.n	8000b5e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1e8      	bne.n	8000b2c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff feca 	bl	8000904 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000b70:	f7ff fe9a 	bl	80008a8 <SSD1306_UpdateScreen>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <ssd1306_I2C_Init+0x24>)
 8000b80:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b82:	e002      	b.n	8000b8a <ssd1306_I2C_Init+0x12>
		p--;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f9      	bne.n	8000b84 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	0003d090 	.word	0x0003d090

08000ba0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b0c7      	sub	sp, #284	; 0x11c
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4639      	mov	r1, r7
 8000bac:	600a      	str	r2, [r1, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	4622      	mov	r2, r4
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	4602      	mov	r2, r0
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	1dba      	adds	r2, r7, #6
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bd2:	e010      	b.n	8000bf6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000bd4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bd8:	463a      	mov	r2, r7
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	441a      	add	r2, r3
 8000bde:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000be2:	3301      	adds	r3, #1
 8000be4:	7811      	ldrb	r1, [r2, #0]
 8000be6:	f107 020c 	add.w	r2, r7, #12
 8000bea:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000bec:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bf6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	1d3a      	adds	r2, r7, #4
 8000bfe:	8812      	ldrh	r2, [r2, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8e7      	bhi.n	8000bd4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b298      	uxth	r0, r3
 8000c12:	f107 020c 	add.w	r2, r7, #12
 8000c16:	230a      	movs	r3, #10
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <ssd1306_I2C_WriteMulti+0x8c>)
 8000c1e:	f001 fc25 	bl	800246c <HAL_I2C_Master_Transmit>
}
 8000c22:	bf00      	nop
 8000c24:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	20000520 	.word	0x20000520

08000c30 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	71bb      	strb	r3, [r7, #6]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b299      	uxth	r1, r3
 8000c4e:	f107 020c 	add.w	r2, r7, #12
 8000c52:	230a      	movs	r3, #10
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2302      	movs	r3, #2
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <ssd1306_I2C_Write+0x38>)
 8000c5a:	f001 fc07 	bl	800246c <HAL_I2C_Master_Transmit>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000520 	.word	0x20000520

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x5c>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_MspInit+0x60>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_MspInit+0x60>)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <BusFault_Handler+0x4>

08000cee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <UsageFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f93a 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <DMA1_Channel1_IRQHandler+0x10>)
 8000d2a:	f000 ffc1 	bl	8001cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200004dc 	.word	0x200004dc

08000d38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <ADC1_2_IRQHandler+0x10>)
 8000d3e:	f000 fb1d 	bl	800137c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200004ac 	.word	0x200004ac

08000d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM2_IRQHandler+0x10>)
 8000d52:	f002 fd1f 	bl	8003794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200005a8 	.word	0x200005a8

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f003 f84c 	bl	8003e2c <__errno>
 8000d94:	4602      	mov	r2, r0
 8000d96:	230c      	movs	r3, #12
 8000d98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20005000 	.word	0x20005000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	200004a0 	.word	0x200004a0
 8000dc8:	200005f8 	.word	0x200005f8

08000dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000df6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000dfe:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000e02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e1e:	4814      	ldr	r0, [pc, #80]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e20:	f002 fc16 	bl	8003650 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e2a:	f7ff fc73 	bl	8000714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e3c:	f002 fdb2 	bl	80039a4 <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e46:	f7ff fc65 	bl	8000714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM2_Init+0x98>)
 8000e58:	f002 ff78 	bl	8003d4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e62:	f7ff fc57 	bl	8000714 <Error_Handler>
  }

}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200005a8 	.word	0x200005a8

08000e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d113      	bne.n	8000eae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_TIM_Base_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_TIM_Base_MspInit+0x44>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_TIM_Base_MspInit+0x44>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201c      	movs	r0, #28
 8000ea4:	f000 fe13 	bl	8001ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ea8:	201c      	movs	r0, #28
 8000eaa:	f000 fe2c 	bl	8001b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ebc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ebe:	e003      	b.n	8000ec8 <LoopCopyDataInit>

08000ec0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ec2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ec4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ec6:	3104      	adds	r1, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ec8:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ecc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ece:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ed0:	d3f6      	bcc.n	8000ec0 <CopyDataInit>
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ed4:	e002      	b.n	8000edc <LoopFillZerobss>

08000ed6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ed8:	f842 3b04 	str.w	r3, [r2], #4

08000edc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ee0:	d3f9      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ee2:	f7ff ff73 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f002 ffa7 	bl	8003e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eea:	f7ff fb1d 	bl	8000528 <main>
  bx lr
 8000eee:	4770      	bx	lr
  ldr r3, =_sidata
 8000ef0:	08004eb0 	.word	0x08004eb0
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ef8:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000efc:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000f00:	200005f8 	.word	0x200005f8

08000f04 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <CAN1_RX1_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x28>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x28>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 fdcd 	bl	8001ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fea2 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fde5 	bl	8001b22 <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f70:	f000 fdad 	bl	8001ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000010 	.word	0x20000010
 8000f90:	2000000c 	.word	0x2000000c

08000f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_IncTick+0x1c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_IncTick+0x20>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <HAL_IncTick+0x20>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000010 	.word	0x20000010
 8000fb4:	200005f0 	.word	0x200005f0

08000fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <HAL_GetTick+0x10>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	200005f0 	.word	0x200005f0

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff fff0 	bl	8000fb8 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffe0 	bl	8000fb8 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000010 	.word	0x20000010

08001010 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0be      	b.n	80011b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff f902 	bl	8000258 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fbb9 	bl	80017cc <ADC_ConversionStop_Disable>
 800105a:	4603      	mov	r3, r0
 800105c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 8099 	bne.w	800119e <HAL_ADC_Init+0x18e>
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 8095 	bne.w	800119e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107c:	f023 0302 	bic.w	r3, r3, #2
 8001080:	f043 0202 	orr.w	r2, r3, #2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001090:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7b1b      	ldrb	r3, [r3, #12]
 8001096:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001098:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	4313      	orrs	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a8:	d003      	beq.n	80010b2 <HAL_ADC_Init+0xa2>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_ADC_Init+0xa8>
 80010b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b6:	e000      	b.n	80010ba <HAL_ADC_Init+0xaa>
 80010b8:	2300      	movs	r3, #0
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7d1b      	ldrb	r3, [r3, #20]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d119      	bne.n	80010fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7b1b      	ldrb	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	035a      	lsls	r2, r3, #13
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	e00b      	b.n	80010fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f043 0220 	orr.w	r2, r3, #32
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	430a      	orrs	r2, r1
 800110e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_ADC_Init+0x1a8>)
 8001118:	4013      	ands	r3, r2
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	430b      	orrs	r3, r1
 8001122:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800112c:	d003      	beq.n	8001136 <HAL_ADC_Init+0x126>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d104      	bne.n	8001140 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	3b01      	subs	r3, #1
 800113c:	051b      	lsls	r3, r3, #20
 800113e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001146:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	430a      	orrs	r2, r1
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_ADC_Init+0x1ac>)
 800115c:	4013      	ands	r3, r2
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	429a      	cmp	r2, r3
 8001162:	d10b      	bne.n	800117c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f023 0303 	bic.w	r3, r3, #3
 8001172:	f043 0201 	orr.w	r2, r3, #1
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800117a:	e018      	b.n	80011ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f023 0312 	bic.w	r3, r3, #18
 8001184:	f043 0210 	orr.w	r2, r3, #16
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001190:	f043 0201 	orr.w	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800119c:	e007      	b.n	80011ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	f043 0210 	orr.w	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	ffe1f7fd 	.word	0xffe1f7fd
 80011bc:	ff1f0efe 	.word	0xff1f0efe

080011c0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a64      	ldr	r2, [pc, #400]	; (8001368 <HAL_ADC_Start_DMA+0x1a8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d004      	beq.n	80011e4 <HAL_ADC_Start_DMA+0x24>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a63      	ldr	r2, [pc, #396]	; (800136c <HAL_ADC_Start_DMA+0x1ac>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d106      	bne.n	80011f2 <HAL_ADC_Start_DMA+0x32>
 80011e4:	4b60      	ldr	r3, [pc, #384]	; (8001368 <HAL_ADC_Start_DMA+0x1a8>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f040 80b3 	bne.w	8001358 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_Start_DMA+0x40>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e0ae      	b.n	800135e <HAL_ADC_Start_DMA+0x19e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 fa8d 	bl	8001728 <ADC_Enable>
 800120e:	4603      	mov	r3, r0
 8001210:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 809a 	bne.w	800134e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_ADC_Start_DMA+0x1ac>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d105      	bne.n	8001244 <HAL_ADC_Start_DMA+0x84>
 8001238:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_ADC_Start_DMA+0x1a8>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d115      	bne.n	8001270 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001248:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	2b00      	cmp	r3, #0
 800125c:	d026      	beq.n	80012ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001266:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800126e:	e01d      	b.n	80012ac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a39      	ldr	r2, [pc, #228]	; (8001368 <HAL_ADC_Start_DMA+0x1a8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d004      	beq.n	8001290 <HAL_ADC_Start_DMA+0xd0>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a38      	ldr	r2, [pc, #224]	; (800136c <HAL_ADC_Start_DMA+0x1ac>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d10d      	bne.n	80012ac <HAL_ADC_Start_DMA+0xec>
 8001290:	4b35      	ldr	r3, [pc, #212]	; (8001368 <HAL_ADC_Start_DMA+0x1a8>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	f023 0206 	bic.w	r2, r3, #6
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80012c4:	e002      	b.n	80012cc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4a25      	ldr	r2, [pc, #148]	; (8001370 <HAL_ADC_Start_DMA+0x1b0>)
 80012da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4a24      	ldr	r2, [pc, #144]	; (8001374 <HAL_ADC_Start_DMA+0x1b4>)
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a23      	ldr	r2, [pc, #140]	; (8001378 <HAL_ADC_Start_DMA+0x1b8>)
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f06f 0202 	mvn.w	r2, #2
 80012f4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001304:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6a18      	ldr	r0, [r3, #32]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	334c      	adds	r3, #76	; 0x4c
 8001310:	4619      	mov	r1, r3
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f000 fc6b 	bl	8001bf0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001324:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001328:	d108      	bne.n	800133c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001338:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800133a:	e00f      	b.n	800135c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800134a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800134c:	e006      	b.n	800135c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001356:	e001      	b.n	800135c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800135c:	7dfb      	ldrb	r3, [r7, #23]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012400 	.word	0x40012400
 800136c:	40012800 	.word	0x40012800
 8001370:	08001841 	.word	0x08001841
 8001374:	080018bd 	.word	0x080018bd
 8001378:	080018d9 	.word	0x080018d9

0800137c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	2b20      	cmp	r3, #32
 8001390:	d140      	bne.n	8001414 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b02      	cmp	r3, #2
 800139e:	d139      	bne.n	8001414 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013c6:	d11d      	bne.n	8001404 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d119      	bne.n	8001404 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0220 	bic.w	r2, r2, #32
 80013de:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f043 0201 	orr.w	r2, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff f96e 	bl	80006e6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f06f 0212 	mvn.w	r2, #18
 8001412:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141e:	2b80      	cmp	r3, #128	; 0x80
 8001420:	d14f      	bne.n	80014c2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b04      	cmp	r3, #4
 800142e:	d148      	bne.n	80014c2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001452:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001456:	d012      	beq.n	800147e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001462:	2b00      	cmp	r3, #0
 8001464:	d125      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001470:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001474:	d11d      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800148c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fa2a 	bl	800190c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f06f 020c 	mvn.w	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014cc:	2b40      	cmp	r3, #64	; 0x40
 80014ce:	d114      	bne.n	80014fa <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10d      	bne.n	80014fa <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f812 	bl	8001514 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f06f 0201 	mvn.w	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x20>
 8001554:	2302      	movs	r3, #2
 8001556:	e0dc      	b.n	8001712 <HAL_ADC_ConfigChannel+0x1da>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b06      	cmp	r3, #6
 8001566:	d81c      	bhi.n	80015a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b05      	subs	r3, #5
 800157a:	221f      	movs	r2, #31
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	4019      	ands	r1, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3b05      	subs	r3, #5
 8001594:	fa00 f203 	lsl.w	r2, r0, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
 80015a0:	e03c      	b.n	800161c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d81c      	bhi.n	80015e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	3b23      	subs	r3, #35	; 0x23
 80015bc:	221f      	movs	r2, #31
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4019      	ands	r1, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	3b23      	subs	r3, #35	; 0x23
 80015d6:	fa00 f203 	lsl.w	r2, r0, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
 80015e2:	e01b      	b.n	800161c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	3b41      	subs	r3, #65	; 0x41
 80015f6:	221f      	movs	r2, #31
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	4019      	ands	r1, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	3b41      	subs	r3, #65	; 0x41
 8001610:	fa00 f203 	lsl.w	r2, r0, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b09      	cmp	r3, #9
 8001622:	d91c      	bls.n	800165e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68d9      	ldr	r1, [r3, #12]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	3b1e      	subs	r3, #30
 8001636:	2207      	movs	r2, #7
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	4019      	ands	r1, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	6898      	ldr	r0, [r3, #8]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	4413      	add	r3, r2
 800164e:	3b1e      	subs	r3, #30
 8001650:	fa00 f203 	lsl.w	r2, r0, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	e019      	b.n	8001692 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6919      	ldr	r1, [r3, #16]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	2207      	movs	r2, #7
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	4019      	ands	r1, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6898      	ldr	r0, [r3, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	fa00 f203 	lsl.w	r2, r0, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b10      	cmp	r3, #16
 8001698:	d003      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800169e:	2b11      	cmp	r3, #17
 80016a0:	d132      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_ADC_ConfigChannel+0x1e4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d125      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d126      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016c8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d11a      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_ADC_ConfigChannel+0x1e8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <HAL_ADC_ConfigChannel+0x1ec>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0c9a      	lsrs	r2, r3, #18
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e8:	e002      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f9      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x1b2>
 80016f6:	e007      	b.n	8001708 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	f043 0220 	orr.w	r2, r3, #32
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40012400 	.word	0x40012400
 8001720:	20000008 	.word	0x20000008
 8001724:	431bde83 	.word	0x431bde83

08001728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d039      	beq.n	80017ba <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <ADC_Enable+0x9c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <ADC_Enable+0xa0>)
 800175c:	fba2 2303 	umull	r2, r3, r2, r3
 8001760:	0c9b      	lsrs	r3, r3, #18
 8001762:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001764:	e002      	b.n	800176c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3b01      	subs	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001772:	f7ff fc21 	bl	8000fb8 <HAL_GetTick>
 8001776:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001778:	e018      	b.n	80017ac <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800177a:	f7ff fc1d 	bl	8000fb8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d911      	bls.n	80017ac <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f043 0210 	orr.w	r2, r3, #16
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e007      	b.n	80017bc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d1df      	bne.n	800177a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000008 	.word	0x20000008
 80017c8:	431bde83 	.word	0x431bde83

080017cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d127      	bne.n	8001836 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017f6:	f7ff fbdf 	bl	8000fb8 <HAL_GetTick>
 80017fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017fc:	e014      	b.n	8001828 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017fe:	f7ff fbdb 	bl	8000fb8 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d90d      	bls.n	8001828 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f043 0210 	orr.w	r2, r3, #16
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e007      	b.n	8001838 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b01      	cmp	r3, #1
 8001834:	d0e3      	beq.n	80017fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001856:	2b00      	cmp	r3, #0
 8001858:	d127      	bne.n	80018aa <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001870:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001874:	d115      	bne.n	80018a2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800187a:	2b00      	cmp	r3, #0
 800187c:	d111      	bne.n	80018a2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f7fe ff1f 	bl	80006e6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80018a8:	e004      	b.n	80018b4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f7ff fe19 	bl	8001502 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f043 0204 	orr.w	r2, r3, #4
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7ff fe11 	bl	8001526 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
	...

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4906      	ldr	r1, [pc, #24]	; (80019b8 <__NVIC_EnableIRQ+0x34>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a84:	d301      	bcc.n	8001a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00f      	b.n	8001aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <SysTick_Config+0x40>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a92:	210f      	movs	r1, #15
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a98:	f7ff ff90 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <SysTick_Config+0x40>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <SysTick_Config+0x40>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	e000e010 	.word	0xe000e010

08001ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff2d 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae0:	f7ff ff42 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	6978      	ldr	r0, [r7, #20]
 8001aec:	f7ff ff90 	bl	8001a10 <NVIC_EncodePriority>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff5f 	bl	80019bc <__NVIC_SetPriority>
}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff35 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffa2 	bl	8001a74 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e043      	b.n	8001bda <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_DMA_Init+0xa8>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <HAL_DMA_Init+0xac>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	009a      	lsls	r2, r3, #2
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_DMA_Init+0xb0>)
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	bffdfff8 	.word	0xbffdfff8
 8001be8:	cccccccd 	.word	0xcccccccd
 8001bec:	40020000 	.word	0x40020000

08001bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Start_IT+0x20>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e04a      	b.n	8001ca6 <HAL_DMA_Start_IT+0xb6>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d13a      	bne.n	8001c98 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2202      	movs	r2, #2
 8001c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f938 	bl	8001ebc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 020e 	orr.w	r2, r2, #14
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e00f      	b.n	8001c86 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0204 	bic.w	r2, r2, #4
 8001c74:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 020a 	orr.w	r2, r2, #10
 8001c84:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e005      	b.n	8001ca4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2204      	movs	r2, #4
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d04f      	beq.n	8001d78 <HAL_DMA_IRQHandler+0xc8>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d04a      	beq.n	8001d78 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d107      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0204 	bic.w	r2, r2, #4
 8001cfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a66      	ldr	r2, [pc, #408]	; (8001ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d029      	beq.n	8001d5e <HAL_DMA_IRQHandler+0xae>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <HAL_DMA_IRQHandler+0x1f4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d022      	beq.n	8001d5a <HAL_DMA_IRQHandler+0xaa>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a63      	ldr	r2, [pc, #396]	; (8001ea8 <HAL_DMA_IRQHandler+0x1f8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d01a      	beq.n	8001d54 <HAL_DMA_IRQHandler+0xa4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a62      	ldr	r2, [pc, #392]	; (8001eac <HAL_DMA_IRQHandler+0x1fc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d012      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x9e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a60      	ldr	r2, [pc, #384]	; (8001eb0 <HAL_DMA_IRQHandler+0x200>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00a      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x98>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a5f      	ldr	r2, [pc, #380]	; (8001eb4 <HAL_DMA_IRQHandler+0x204>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d102      	bne.n	8001d42 <HAL_DMA_IRQHandler+0x92>
 8001d3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d40:	e00e      	b.n	8001d60 <HAL_DMA_IRQHandler+0xb0>
 8001d42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d46:	e00b      	b.n	8001d60 <HAL_DMA_IRQHandler+0xb0>
 8001d48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d4c:	e008      	b.n	8001d60 <HAL_DMA_IRQHandler+0xb0>
 8001d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d52:	e005      	b.n	8001d60 <HAL_DMA_IRQHandler+0xb0>
 8001d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d58:	e002      	b.n	8001d60 <HAL_DMA_IRQHandler+0xb0>
 8001d5a:	2340      	movs	r3, #64	; 0x40
 8001d5c:	e000      	b.n	8001d60 <HAL_DMA_IRQHandler+0xb0>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	4a55      	ldr	r2, [pc, #340]	; (8001eb8 <HAL_DMA_IRQHandler+0x208>)
 8001d62:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8094 	beq.w	8001e96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d76:	e08e      	b.n	8001e96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d056      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x186>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d051      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 020a 	bic.w	r2, r2, #10
 8001dae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d029      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x166>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a37      	ldr	r2, [pc, #220]	; (8001ea4 <HAL_DMA_IRQHandler+0x1f4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d022      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x162>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <HAL_DMA_IRQHandler+0x1f8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01a      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x15c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_DMA_IRQHandler+0x1fc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d012      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x156>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_DMA_IRQHandler+0x200>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x150>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <HAL_DMA_IRQHandler+0x204>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d102      	bne.n	8001dfa <HAL_DMA_IRQHandler+0x14a>
 8001df4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001df8:	e00e      	b.n	8001e18 <HAL_DMA_IRQHandler+0x168>
 8001dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfe:	e00b      	b.n	8001e18 <HAL_DMA_IRQHandler+0x168>
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	e008      	b.n	8001e18 <HAL_DMA_IRQHandler+0x168>
 8001e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0a:	e005      	b.n	8001e18 <HAL_DMA_IRQHandler+0x168>
 8001e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e10:	e002      	b.n	8001e18 <HAL_DMA_IRQHandler+0x168>
 8001e12:	2320      	movs	r3, #32
 8001e14:	e000      	b.n	8001e18 <HAL_DMA_IRQHandler+0x168>
 8001e16:	2302      	movs	r3, #2
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <HAL_DMA_IRQHandler+0x208>)
 8001e1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d034      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e34:	e02f      	b.n	8001e96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d028      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x1e8>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d023      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 020e 	bic.w	r2, r2, #14
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
    }
  }
  return;
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
}
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40020008 	.word	0x40020008
 8001ea4:	4002001c 	.word	0x4002001c
 8001ea8:	40020030 	.word	0x40020030
 8001eac:	40020044 	.word	0x40020044
 8001eb0:	40020058 	.word	0x40020058
 8001eb4:	4002006c 	.word	0x4002006c
 8001eb8:	40020000 	.word	0x40020000

08001ebc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b10      	cmp	r3, #16
 8001ee8:	d108      	bne.n	8001efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001efa:	e007      	b.n	8001f0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	60da      	str	r2, [r3, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b08b      	sub	sp, #44	; 0x2c
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2a:	e127      	b.n	800217c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f040 8116 	bne.w	8002176 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b12      	cmp	r3, #18
 8001f50:	d034      	beq.n	8001fbc <HAL_GPIO_Init+0xa4>
 8001f52:	2b12      	cmp	r3, #18
 8001f54:	d80d      	bhi.n	8001f72 <HAL_GPIO_Init+0x5a>
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d02b      	beq.n	8001fb2 <HAL_GPIO_Init+0x9a>
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d804      	bhi.n	8001f68 <HAL_GPIO_Init+0x50>
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d031      	beq.n	8001fc6 <HAL_GPIO_Init+0xae>
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d01c      	beq.n	8001fa0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f66:	e048      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d043      	beq.n	8001ff4 <HAL_GPIO_Init+0xdc>
 8001f6c:	2b11      	cmp	r3, #17
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_GPIO_Init+0x90>
          break;
 8001f70:	e043      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f72:	4a89      	ldr	r2, [pc, #548]	; (8002198 <HAL_GPIO_Init+0x280>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d026      	beq.n	8001fc6 <HAL_GPIO_Init+0xae>
 8001f78:	4a87      	ldr	r2, [pc, #540]	; (8002198 <HAL_GPIO_Init+0x280>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d806      	bhi.n	8001f8c <HAL_GPIO_Init+0x74>
 8001f7e:	4a87      	ldr	r2, [pc, #540]	; (800219c <HAL_GPIO_Init+0x284>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d020      	beq.n	8001fc6 <HAL_GPIO_Init+0xae>
 8001f84:	4a86      	ldr	r2, [pc, #536]	; (80021a0 <HAL_GPIO_Init+0x288>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01d      	beq.n	8001fc6 <HAL_GPIO_Init+0xae>
          break;
 8001f8a:	e036      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f8c:	4a85      	ldr	r2, [pc, #532]	; (80021a4 <HAL_GPIO_Init+0x28c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d019      	beq.n	8001fc6 <HAL_GPIO_Init+0xae>
 8001f92:	4a85      	ldr	r2, [pc, #532]	; (80021a8 <HAL_GPIO_Init+0x290>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d016      	beq.n	8001fc6 <HAL_GPIO_Init+0xae>
 8001f98:	4a84      	ldr	r2, [pc, #528]	; (80021ac <HAL_GPIO_Init+0x294>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0xae>
          break;
 8001f9e:	e02c      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e028      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	3304      	adds	r3, #4
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e023      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e01e      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e019      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e012      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	611a      	str	r2, [r3, #16]
          break;
 8001fe6:	e008      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	615a      	str	r2, [r3, #20]
          break;
 8001ff2:	e002      	b.n	8001ffa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2bff      	cmp	r3, #255	; 0xff
 8001ffe:	d801      	bhi.n	8002004 <HAL_GPIO_Init+0xec>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	e001      	b.n	8002008 <HAL_GPIO_Init+0xf0>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3304      	adds	r3, #4
 8002008:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2bff      	cmp	r3, #255	; 0xff
 800200e:	d802      	bhi.n	8002016 <HAL_GPIO_Init+0xfe>
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x104>
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	3b08      	subs	r3, #8
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	210f      	movs	r1, #15
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	401a      	ands	r2, r3
 800202e:	6a39      	ldr	r1, [r7, #32]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	fa01 f303 	lsl.w	r3, r1, r3
 8002036:	431a      	orrs	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8096 	beq.w	8002176 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800204a:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <HAL_GPIO_Init+0x298>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	4a58      	ldr	r2, [pc, #352]	; (80021b0 <HAL_GPIO_Init+0x298>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6193      	str	r3, [r2, #24]
 8002056:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <HAL_GPIO_Init+0x298>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002062:	4a54      	ldr	r2, [pc, #336]	; (80021b4 <HAL_GPIO_Init+0x29c>)
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4013      	ands	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4b      	ldr	r2, [pc, #300]	; (80021b8 <HAL_GPIO_Init+0x2a0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x19e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4a      	ldr	r2, [pc, #296]	; (80021bc <HAL_GPIO_Init+0x2a4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x19a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <HAL_GPIO_Init+0x2a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x196>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a48      	ldr	r2, [pc, #288]	; (80021c4 <HAL_GPIO_Init+0x2ac>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x192>
 80020a6:	2303      	movs	r3, #3
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x1a0>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e004      	b.n	80020b8 <HAL_GPIO_Init+0x1a0>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_Init+0x1a0>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_GPIO_Init+0x1a0>
 80020b6:	2300      	movs	r3, #0
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	f002 0203 	and.w	r2, r2, #3
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	4093      	lsls	r3, r2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020c8:	493a      	ldr	r1, [pc, #232]	; (80021b4 <HAL_GPIO_Init+0x29c>)
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	089b      	lsrs	r3, r3, #2
 80020ce:	3302      	adds	r3, #2
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4938      	ldr	r1, [pc, #224]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
 80020ee:	e006      	b.n	80020fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020f0:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4933      	ldr	r1, [pc, #204]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800210a:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	492e      	ldr	r1, [pc, #184]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
 8002116:	e006      	b.n	8002126 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	43db      	mvns	r3, r3
 8002120:	4929      	ldr	r1, [pc, #164]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 8002122:	4013      	ands	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d006      	beq.n	8002140 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	4924      	ldr	r1, [pc, #144]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
 800213e:	e006      	b.n	800214e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	491f      	ldr	r1, [pc, #124]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 800214a:	4013      	ands	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	491a      	ldr	r1, [pc, #104]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	60cb      	str	r3, [r1, #12]
 8002166:	e006      	b.n	8002176 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	43db      	mvns	r3, r3
 8002170:	4915      	ldr	r1, [pc, #84]	; (80021c8 <HAL_GPIO_Init+0x2b0>)
 8002172:	4013      	ands	r3, r2
 8002174:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	3301      	adds	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	fa22 f303 	lsr.w	r3, r2, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	f47f aed0 	bne.w	8001f2c <HAL_GPIO_Init+0x14>
  }
}
 800218c:	bf00      	nop
 800218e:	372c      	adds	r7, #44	; 0x2c
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	10210000 	.word	0x10210000
 800219c:	10110000 	.word	0x10110000
 80021a0:	10120000 	.word	0x10120000
 80021a4:	10310000 	.word	0x10310000
 80021a8:	10320000 	.word	0x10320000
 80021ac:	10220000 	.word	0x10220000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40010800 	.word	0x40010800
 80021bc:	40010c00 	.word	0x40010c00
 80021c0:	40011000 	.word	0x40011000
 80021c4:	40011400 	.word	0x40011400
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e11f      	b.n	800244e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe f942 	bl	80004ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002260:	f001 f90e 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8002264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a7b      	ldr	r2, [pc, #492]	; (8002458 <HAL_I2C_Init+0x25c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d807      	bhi.n	8002280 <HAL_I2C_Init+0x84>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a7a      	ldr	r2, [pc, #488]	; (800245c <HAL_I2C_Init+0x260>)
 8002274:	4293      	cmp	r3, r2
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e006      	b.n	800228e <HAL_I2C_Init+0x92>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a77      	ldr	r2, [pc, #476]	; (8002460 <HAL_I2C_Init+0x264>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0db      	b.n	800244e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a72      	ldr	r2, [pc, #456]	; (8002464 <HAL_I2C_Init+0x268>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a64      	ldr	r2, [pc, #400]	; (8002458 <HAL_I2C_Init+0x25c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d802      	bhi.n	80022d0 <HAL_I2C_Init+0xd4>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	e009      	b.n	80022e4 <HAL_I2C_Init+0xe8>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	4a63      	ldr	r2, [pc, #396]	; (8002468 <HAL_I2C_Init+0x26c>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	3301      	adds	r3, #1
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4956      	ldr	r1, [pc, #344]	; (8002458 <HAL_I2C_Init+0x25c>)
 8002300:	428b      	cmp	r3, r1
 8002302:	d80d      	bhi.n	8002320 <HAL_I2C_Init+0x124>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e59      	subs	r1, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b04      	cmp	r3, #4
 800231a:	bf38      	it	cc
 800231c:	2304      	movcc	r3, #4
 800231e:	e04f      	b.n	80023c0 <HAL_I2C_Init+0x1c4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d111      	bne.n	800234c <HAL_I2C_Init+0x150>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1e58      	subs	r0, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	440b      	add	r3, r1
 8002336:	fbb0 f3f3 	udiv	r3, r0, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e012      	b.n	8002372 <HAL_I2C_Init+0x176>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	0099      	lsls	r1, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_I2C_Init+0x17e>
 8002376:	2301      	movs	r3, #1
 8002378:	e022      	b.n	80023c0 <HAL_I2C_Init+0x1c4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10e      	bne.n	80023a0 <HAL_I2C_Init+0x1a4>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e58      	subs	r0, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	440b      	add	r3, r1
 8002390:	fbb0 f3f3 	udiv	r3, r0, r3
 8002394:	3301      	adds	r3, #1
 8002396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239e:	e00f      	b.n	80023c0 <HAL_I2C_Init+0x1c4>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	0099      	lsls	r1, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	6809      	ldr	r1, [r1, #0]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6911      	ldr	r1, [r2, #16]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68d2      	ldr	r2, [r2, #12]
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	430b      	orrs	r3, r1
 8002402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	000186a0 	.word	0x000186a0
 800245c:	001e847f 	.word	0x001e847f
 8002460:	003d08ff 	.word	0x003d08ff
 8002464:	431bde83 	.word	0x431bde83
 8002468:	10624dd3 	.word	0x10624dd3

0800246c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	461a      	mov	r2, r3
 8002478:	460b      	mov	r3, r1
 800247a:	817b      	strh	r3, [r7, #10]
 800247c:	4613      	mov	r3, r2
 800247e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7fe fd9a 	bl	8000fb8 <HAL_GetTick>
 8002484:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b20      	cmp	r3, #32
 8002490:	f040 80e0 	bne.w	8002654 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2319      	movs	r3, #25
 800249a:	2201      	movs	r2, #1
 800249c:	4970      	ldr	r1, [pc, #448]	; (8002660 <HAL_I2C_Master_Transmit+0x1f4>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa92 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0d3      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_I2C_Master_Transmit+0x50>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0cc      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ea>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d007      	beq.n	80024e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2221      	movs	r2, #33	; 0x21
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2210      	movs	r2, #16
 80024fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	893a      	ldrh	r2, [r7, #8]
 8002512:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a50      	ldr	r2, [pc, #320]	; (8002664 <HAL_I2C_Master_Transmit+0x1f8>)
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002524:	8979      	ldrh	r1, [r7, #10]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	6a3a      	ldr	r2, [r7, #32]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f9ca 	bl	80028c4 <I2C_MasterRequestWrite>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08d      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002550:	e066      	b.n	8002620 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	6a39      	ldr	r1, [r7, #32]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fb0c 	bl	8002b74 <I2C_WaitOnTXEFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00d      	beq.n	800257e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b04      	cmp	r3, #4
 8002568:	d107      	bne.n	800257a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e06b      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d11b      	bne.n	80025f4 <HAL_I2C_Master_Transmit+0x188>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d017      	beq.n	80025f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	6a39      	ldr	r1, [r7, #32]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fafc 	bl	8002bf6 <I2C_WaitOnBTFFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2b04      	cmp	r3, #4
 800260a:	d107      	bne.n	800261c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e01a      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	d194      	bne.n	8002552 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
  }
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	00100002 	.word	0x00100002
 8002664:	ffff0000 	.word	0xffff0000

08002668 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	460b      	mov	r3, r1
 8002676:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7fe fc9e 	bl	8000fb8 <HAL_GetTick>
 800267c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800267e:	2301      	movs	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	f040 8111 	bne.w	80028b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	2201      	movs	r2, #1
 8002698:	4988      	ldr	r1, [pc, #544]	; (80028bc <HAL_I2C_IsDeviceReady+0x254>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f994 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
 80026a8:	e104      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_I2C_IsDeviceReady+0x50>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e0fd      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x24c>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d007      	beq.n	80026de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2224      	movs	r2, #36	; 0x24
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a70      	ldr	r2, [pc, #448]	; (80028c0 <HAL_I2C_IsDeviceReady+0x258>)
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002710:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f952 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002738:	d103      	bne.n	8002742 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0b6      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002754:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002756:	f7fe fc2f 	bl	8000fb8 <HAL_GetTick>
 800275a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800278a:	e025      	b.n	80027d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800278c:	f7fe fc14 	bl	8000fb8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d302      	bcc.n	80027a2 <HAL_I2C_IsDeviceReady+0x13a>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	22a0      	movs	r2, #160	; 0xa0
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2ba0      	cmp	r3, #160	; 0xa0
 80027e2:	d005      	beq.n	80027f0 <HAL_I2C_IsDeviceReady+0x188>
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <HAL_I2C_IsDeviceReady+0x188>
 80027ea:	7dbb      	ldrb	r3, [r7, #22]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0cd      	beq.n	800278c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d129      	bne.n	800285a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002814:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	2319      	movs	r3, #25
 8002832:	2201      	movs	r2, #1
 8002834:	4921      	ldr	r1, [pc, #132]	; (80028bc <HAL_I2C_IsDeviceReady+0x254>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f8c6 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e036      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e02c      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002868:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002872:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2319      	movs	r3, #25
 800287a:	2201      	movs	r2, #1
 800287c:	490f      	ldr	r1, [pc, #60]	; (80028bc <HAL_I2C_IsDeviceReady+0x254>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f8a2 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e012      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3301      	adds	r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	429a      	cmp	r2, r3
 800289a:	f4ff af32 	bcc.w	8002702 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	00100002 	.word	0x00100002
 80028c0:	ffff0000 	.word	0xffff0000

080028c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	460b      	mov	r3, r1
 80028d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d006      	beq.n	80028ee <I2C_MasterRequestWrite+0x2a>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d003      	beq.n	80028ee <I2C_MasterRequestWrite+0x2a>
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028ec:	d108      	bne.n	8002900 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	e00b      	b.n	8002918 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	2b12      	cmp	r3, #18
 8002906:	d107      	bne.n	8002918 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f84f 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293e:	d103      	bne.n	8002948 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e035      	b.n	80029b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002954:	d108      	bne.n	8002968 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002964:	611a      	str	r2, [r3, #16]
 8002966:	e01b      	b.n	80029a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002968:	897b      	ldrh	r3, [r7, #10]
 800296a:	11db      	asrs	r3, r3, #7
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f003 0306 	and.w	r3, r3, #6
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f063 030f 	orn	r3, r3, #15
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	490e      	ldr	r1, [pc, #56]	; (80029c0 <I2C_MasterRequestWrite+0xfc>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f875 	bl	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e010      	b.n	80029b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002996:	897b      	ldrh	r3, [r7, #10]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <I2C_MasterRequestWrite+0x100>)
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f865 	bl	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	00010008 	.word	0x00010008
 80029c4:	00010002 	.word	0x00010002

080029c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d8:	e025      	b.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e0:	d021      	beq.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7fe fae9 	bl	8000fb8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d116      	bne.n	8002a26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e023      	b.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10d      	bne.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf0c      	ite	eq
 8002a42:	2301      	moveq	r3, #1
 8002a44:	2300      	movne	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	e00c      	b.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d0b6      	beq.n	80029da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a84:	e051      	b.n	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a94:	d123      	bne.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f043 0204 	orr.w	r2, r3, #4
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e046      	b.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae4:	d021      	beq.n	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7fe fa67 	bl	8000fb8 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d116      	bne.n	8002b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0220 	orr.w	r2, r3, #32
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e020      	b.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d10c      	bne.n	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	e00b      	b.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	43da      	mvns	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d18d      	bne.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b80:	e02d      	b.n	8002bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f878 	bl	8002c78 <I2C_IsAcknowledgeFailed>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e02d      	b.n	8002bee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b98:	d021      	beq.n	8002bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fe fa0d 	bl	8000fb8 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e007      	b.n	8002bee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d1ca      	bne.n	8002b82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c02:	e02d      	b.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f837 	bl	8002c78 <I2C_IsAcknowledgeFailed>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e02d      	b.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c1a:	d021      	beq.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1c:	f7fe f9cc 	bl	8000fb8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d302      	bcc.n	8002c32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e007      	b.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d1ca      	bne.n	8002c04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d11b      	bne.n	8002cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e26c      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8087 	beq.w	8002e02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cf4:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d00c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d00:	4b8f      	ldr	r3, [pc, #572]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d112      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d18:	d10b      	bne.n	8002d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1a:	4b89      	ldr	r3, [pc, #548]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x12c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d168      	bne.n	8002e00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e246      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x76>
 8002d3c:	4b80      	ldr	r3, [pc, #512]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7f      	ldr	r2, [pc, #508]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e02e      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b7b      	ldr	r3, [pc, #492]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7a      	ldr	r2, [pc, #488]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a77      	ldr	r2, [pc, #476]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e01d      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d74:	d10c      	bne.n	8002d90 <HAL_RCC_OscConfig+0xbc>
 8002d76:	4b72      	ldr	r3, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a71      	ldr	r2, [pc, #452]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCC_OscConfig+0xd4>
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a67      	ldr	r2, [pc, #412]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d013      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe f902 	bl	8000fb8 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe f8fe 	bl	8000fb8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1fa      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	4b5d      	ldr	r3, [pc, #372]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCC_OscConfig+0xe4>
 8002dd6:	e014      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe f8ee 	bl	8000fb8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe f8ea 	bl	8000fb8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e1e6      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x10c>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d063      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e0e:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e1a:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d11c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
 8002e26:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d116      	bne.n	8002e60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e1ba      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4939      	ldr	r1, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5e:	e03a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f8a3 	bl	8000fb8 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe f89f 	bl	8000fb8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e19b      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4927      	ldr	r1, [pc, #156]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	e015      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <HAL_RCC_OscConfig+0x270>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe f882 	bl	8000fb8 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7fe f87e 	bl	8000fb8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e17a      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03a      	beq.n	8002f58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d019      	beq.n	8002f1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f862 	bl	8000fb8 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7fe f85e 	bl	8000fb8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e15a      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f000 fac6 	bl	80034a8 <RCC_Delay>
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_OscConfig+0x274>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f24:	f7fe f848 	bl	8000fb8 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7fe f844 	bl	8000fb8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d908      	bls.n	8002f4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e140      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	42420000 	.word	0x42420000
 8002f48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b9e      	ldr	r3, [pc, #632]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e9      	bne.n	8002f2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a6 	beq.w	80030b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b97      	ldr	r3, [pc, #604]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4b94      	ldr	r3, [pc, #592]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4a93      	ldr	r2, [pc, #588]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	61d3      	str	r3, [r2, #28]
 8002f82:	4b91      	ldr	r3, [pc, #580]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b8e      	ldr	r3, [pc, #568]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a8a      	ldr	r2, [pc, #552]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fe f805 	bl	8000fb8 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe f801 	bl	8000fb8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b64      	cmp	r3, #100	; 0x64
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0fd      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b81      	ldr	r3, [pc, #516]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x312>
 8002fd8:	4b7b      	ldr	r3, [pc, #492]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a7a      	ldr	r2, [pc, #488]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6213      	str	r3, [r2, #32]
 8002fe4:	e02d      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x334>
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a75      	ldr	r2, [pc, #468]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	4b73      	ldr	r3, [pc, #460]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a72      	ldr	r2, [pc, #456]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	f023 0304 	bic.w	r3, r3, #4
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	e01c      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b05      	cmp	r3, #5
 800300e:	d10c      	bne.n	800302a <HAL_RCC_OscConfig+0x356>
 8003010:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a6c      	ldr	r2, [pc, #432]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	f043 0304 	orr.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	e00b      	b.n	8003042 <HAL_RCC_OscConfig+0x36e>
 800302a:	4b67      	ldr	r3, [pc, #412]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a66      	ldr	r2, [pc, #408]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6213      	str	r3, [r2, #32]
 8003036:	4b64      	ldr	r3, [pc, #400]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a63      	ldr	r2, [pc, #396]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d015      	beq.n	8003076 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fd ffb5 	bl	8000fb8 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fd ffb1 	bl	8000fb8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0ab      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	4b57      	ldr	r3, [pc, #348]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ee      	beq.n	8003052 <HAL_RCC_OscConfig+0x37e>
 8003074:	e014      	b.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fd ff9f 	bl	8000fb8 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307e:	f7fd ff9b 	bl	8000fb8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	; 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e095      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	4b4c      	ldr	r3, [pc, #304]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ee      	bne.n	800307e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4a47      	ldr	r2, [pc, #284]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8081 	beq.w	80031be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030bc:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d061      	beq.n	800318c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d146      	bne.n	800315e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_OscConfig+0x4fc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d6:	f7fd ff6f 	bl	8000fb8 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030de:	f7fd ff6b 	bl	8000fb8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e067      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d108      	bne.n	8003118 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003106:	4b30      	ldr	r3, [pc, #192]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	492d      	ldr	r1, [pc, #180]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a19      	ldr	r1, [r3, #32]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	430b      	orrs	r3, r1
 800312a:	4927      	ldr	r1, [pc, #156]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x4fc>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fd ff3f 	bl	8000fb8 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313e:	f7fd ff3b 	bl	8000fb8 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e037      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003150:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x46a>
 800315c:	e02f      	b.n	80031be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_RCC_OscConfig+0x4fc>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fd ff28 	bl	8000fb8 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fd ff24 	bl	8000fb8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e020      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x498>
 800318a:	e018      	b.n	80031be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e013      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_OscConfig+0x4f4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40007000 	.word	0x40007000
 80031d0:	42420060 	.word	0x42420060

080031d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d0      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b67      	ldr	r3, [pc, #412]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4965      	ldr	r1, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800323a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d040      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d115      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e073      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06b      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4936      	ldr	r1, [pc, #216]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fd fe78 	bl	8000fb8 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fd fe74 	bl	8000fb8 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e053      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b2d      	ldr	r3, [pc, #180]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b27      	ldr	r3, [pc, #156]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d210      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0207 	bic.w	r2, r3, #7
 800330a:	4922      	ldr	r1, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4601      	mov	r1, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1c8>)
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	fa21 f303 	lsr.w	r3, r1, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1cc>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fdd6 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40022000 	.word	0x40022000
 8003398:	40021000 	.word	0x40021000
 800339c:	08004e5c 	.word	0x08004e5c
 80033a0:	20000008 	.word	0x20000008
 80033a4:	2000000c 	.word	0x2000000c

080033a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b490      	push	{r4, r7}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033ae:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033b0:	1d3c      	adds	r4, r7, #4
 80033b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033b8:	4b28      	ldr	r3, [pc, #160]	; (800345c <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033d2:	4b23      	ldr	r3, [pc, #140]	; (8003460 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d002      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x40>
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d003      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0x46>
 80033e6:	e02d      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e8:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033ea:	623b      	str	r3, [r7, #32]
      break;
 80033ec:	e02d      	b.n	800344a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	0c9b      	lsrs	r3, r3, #18
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033fa:	4413      	add	r3, r2
 80033fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003400:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800340c:	4b14      	ldr	r3, [pc, #80]	; (8003460 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0c5b      	lsrs	r3, r3, #17
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800341a:	4413      	add	r3, r2
 800341c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003420:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003426:	fb02 f203 	mul.w	r2, r2, r3
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	e004      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	623b      	str	r3, [r7, #32]
      break;
 8003442:	e002      	b.n	800344a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003446:	623b      	str	r3, [r7, #32]
      break;
 8003448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344a:	6a3b      	ldr	r3, [r7, #32]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3728      	adds	r7, #40	; 0x28
 8003450:	46bd      	mov	sp, r7
 8003452:	bc90      	pop	{r4, r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	080046dc 	.word	0x080046dc
 800345c:	080046ec 	.word	0x080046ec
 8003460:	40021000 	.word	0x40021000
 8003464:	007a1200 	.word	0x007a1200
 8003468:	003d0900 	.word	0x003d0900

0800346c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003470:	4b02      	ldr	r3, [pc, #8]	; (800347c <HAL_RCC_GetHCLKFreq+0x10>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	20000008 	.word	0x20000008

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff2 	bl	800346c <HAL_RCC_GetHCLKFreq>
 8003488:	4601      	mov	r1, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4a03      	ldr	r2, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5cd3      	ldrb	r3, [r2, r3]
 8003498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08004e6c 	.word	0x08004e6c

080034a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <RCC_Delay+0x34>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <RCC_Delay+0x38>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	0a5b      	lsrs	r3, r3, #9
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034c4:	bf00      	nop
  }
  while (Delay --);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1e5a      	subs	r2, r3, #1
 80034ca:	60fa      	str	r2, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f9      	bne.n	80034c4 <RCC_Delay+0x1c>
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000008 	.word	0x20000008
 80034e0:	10624dd3 	.word	0x10624dd3

080034e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d07d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003500:	2300      	movs	r3, #0
 8003502:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003504:	4b4f      	ldr	r3, [pc, #316]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10d      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003510:	4b4c      	ldr	r3, [pc, #304]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351a:	61d3      	str	r3, [r2, #28]
 800351c:	4b49      	ldr	r3, [pc, #292]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	4b46      	ldr	r3, [pc, #280]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d118      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003538:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a42      	ldr	r2, [pc, #264]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800353e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003542:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003544:	f7fd fd38 	bl	8000fb8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354a:	e008      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354c:	f7fd fd34 	bl	8000fb8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e06d      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	4b3a      	ldr	r3, [pc, #232]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800356a:	4b36      	ldr	r3, [pc, #216]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003572:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02e      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d027      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003588:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003598:	4b2c      	ldr	r3, [pc, #176]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800359e:	4a29      	ldr	r2, [pc, #164]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d014      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd fd03 	bl	8000fb8 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	e00a      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fd fcff 	bl	8000fb8 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e036      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0ee      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4917      	ldr	r1, [pc, #92]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	490b      	ldr	r1, [pc, #44]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4904      	ldr	r1, [pc, #16]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	40007000 	.word	0x40007000
 800364c:	42420440 	.word	0x42420440

08003650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e041      	b.n	80036e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fbfc 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fa64 	bl	8003b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d001      	beq.n	8003708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e03a      	b.n	800377e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <HAL_TIM_Base_Start_IT+0x98>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x58>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d009      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x58>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a14      	ldr	r2, [pc, #80]	; (800378c <HAL_TIM_Base_Start_IT+0x9c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x58>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <HAL_TIM_Base_Start_IT+0xa0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d111      	bne.n	800376c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b06      	cmp	r3, #6
 8003758:	d010      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376a:	e007      	b.n	800377c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800

08003794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d122      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d11b      	bne.n	80037f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0202 	mvn.w	r2, #2
 80037c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f9a4 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f997 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f9a6 	bl	8003b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d122      	bne.n	8003844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b04      	cmp	r3, #4
 800380a:	d11b      	bne.n	8003844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f06f 0204 	mvn.w	r2, #4
 8003814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f97a 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 8003830:	e005      	b.n	800383e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f96d 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f97c 	bl	8003b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b08      	cmp	r3, #8
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b08      	cmp	r3, #8
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0208 	mvn.w	r2, #8
 8003868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2204      	movs	r2, #4
 800386e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f950 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f943 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f952 	bl	8003b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0210 	mvn.w	r2, #16
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2208      	movs	r2, #8
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f926 	bl	8003b24 <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f919 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f928 	bl	8003b36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0201 	mvn.w	r2, #1
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fc fef0 	bl	80006f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	2b80      	cmp	r3, #128	; 0x80
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003930:	2b80      	cmp	r3, #128	; 0x80
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fa6b 	bl	8003e1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8ec 	bl	8003b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b20      	cmp	r3, #32
 800397c:	d10e      	bne.n	800399c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b20      	cmp	r3, #32
 800398a:	d107      	bne.n	800399c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0220 	mvn.w	r2, #32
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa36 	bl	8003e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIM_ConfigClockSource+0x18>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0a6      	b.n	8003b0a <HAL_TIM_ConfigClockSource+0x166>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d067      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x120>
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d80b      	bhi.n	8003a10 <HAL_TIM_ConfigClockSource+0x6c>
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d073      	beq.n	8003ae4 <HAL_TIM_ConfigClockSource+0x140>
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d802      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x62>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d06f      	beq.n	8003ae4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a04:	e078      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d06c      	beq.n	8003ae4 <HAL_TIM_ConfigClockSource+0x140>
 8003a0a:	2b30      	cmp	r3, #48	; 0x30
 8003a0c:	d06a      	beq.n	8003ae4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a0e:	e073      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d00d      	beq.n	8003a30 <HAL_TIM_ConfigClockSource+0x8c>
 8003a14:	2b70      	cmp	r3, #112	; 0x70
 8003a16:	d804      	bhi.n	8003a22 <HAL_TIM_ConfigClockSource+0x7e>
 8003a18:	2b50      	cmp	r3, #80	; 0x50
 8003a1a:	d033      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0xe0>
 8003a1c:	2b60      	cmp	r3, #96	; 0x60
 8003a1e:	d041      	beq.n	8003aa4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a20:	e06a      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a26:	d066      	beq.n	8003af6 <HAL_TIM_ConfigClockSource+0x152>
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2c:	d017      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a2e:	e063      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6899      	ldr	r1, [r3, #8]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f000 f965 	bl	8003d0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	609a      	str	r2, [r3, #8]
      break;
 8003a5c:	e04c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f000 f94e 	bl	8003d0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a80:	609a      	str	r2, [r3, #8]
      break;
 8003a82:	e039      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f000 f8c5 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2150      	movs	r1, #80	; 0x50
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f91c 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003aa2:	e029      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f000 f8e3 	bl	8003c7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2160      	movs	r1, #96	; 0x60
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 f90c 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003ac2:	e019      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	f000 f8a5 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2140      	movs	r1, #64	; 0x40
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f8fc 	bl	8003cda <TIM_ITRx_SetConfig>
      break;
 8003ae2:	e009      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f000 f8f3 	bl	8003cda <TIM_ITRx_SetConfig>
        break;
 8003af4:	e000      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
	...

08003b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <TIM_Base_SetConfig+0xb8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_Base_SetConfig+0x30>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d007      	beq.n	8003b8c <TIM_Base_SetConfig+0x30>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <TIM_Base_SetConfig+0xbc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_Base_SetConfig+0x30>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a25      	ldr	r2, [pc, #148]	; (8003c1c <TIM_Base_SetConfig+0xc0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d108      	bne.n	8003b9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a1c      	ldr	r2, [pc, #112]	; (8003c14 <TIM_Base_SetConfig+0xb8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <TIM_Base_SetConfig+0x62>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d007      	beq.n	8003bbe <TIM_Base_SetConfig+0x62>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <TIM_Base_SetConfig+0xbc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_Base_SetConfig+0x62>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a18      	ldr	r2, [pc, #96]	; (8003c1c <TIM_Base_SetConfig+0xc0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d108      	bne.n	8003bd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <TIM_Base_SetConfig+0xb8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d103      	bne.n	8003c04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	615a      	str	r2, [r3, #20]
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800

08003c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 030a 	bic.w	r3, r3, #10
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f023 0210 	bic.w	r2, r3, #16
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	031b      	lsls	r3, r3, #12
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	621a      	str	r2, [r3, #32]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f043 0307 	orr.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b087      	sub	sp, #28
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	021a      	lsls	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	609a      	str	r2, [r3, #8]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e046      	b.n	8003df2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db0:	d009      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10c      	bne.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800

08003e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <__errno>:
 8003e2c:	4b01      	ldr	r3, [pc, #4]	; (8003e34 <__errno+0x8>)
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000014 	.word	0x20000014

08003e38 <__libc_init_array>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	4e0c      	ldr	r6, [pc, #48]	; (8003e70 <__libc_init_array+0x38>)
 8003e3e:	4c0d      	ldr	r4, [pc, #52]	; (8003e74 <__libc_init_array+0x3c>)
 8003e40:	1ba4      	subs	r4, r4, r6
 8003e42:	10a4      	asrs	r4, r4, #2
 8003e44:	42a5      	cmp	r5, r4
 8003e46:	d109      	bne.n	8003e5c <__libc_init_array+0x24>
 8003e48:	f000 fc34 	bl	80046b4 <_init>
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	4e0a      	ldr	r6, [pc, #40]	; (8003e78 <__libc_init_array+0x40>)
 8003e50:	4c0a      	ldr	r4, [pc, #40]	; (8003e7c <__libc_init_array+0x44>)
 8003e52:	1ba4      	subs	r4, r4, r6
 8003e54:	10a4      	asrs	r4, r4, #2
 8003e56:	42a5      	cmp	r5, r4
 8003e58:	d105      	bne.n	8003e66 <__libc_init_array+0x2e>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e60:	4798      	blx	r3
 8003e62:	3501      	adds	r5, #1
 8003e64:	e7ee      	b.n	8003e44 <__libc_init_array+0xc>
 8003e66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e6a:	4798      	blx	r3
 8003e6c:	3501      	adds	r5, #1
 8003e6e:	e7f2      	b.n	8003e56 <__libc_init_array+0x1e>
 8003e70:	08004ea8 	.word	0x08004ea8
 8003e74:	08004ea8 	.word	0x08004ea8
 8003e78:	08004ea8 	.word	0x08004ea8
 8003e7c:	08004eac 	.word	0x08004eac

08003e80 <memset>:
 8003e80:	4603      	mov	r3, r0
 8003e82:	4402      	add	r2, r0
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d100      	bne.n	8003e8a <memset+0xa>
 8003e88:	4770      	bx	lr
 8003e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e8e:	e7f9      	b.n	8003e84 <memset+0x4>

08003e90 <siprintf>:
 8003e90:	b40e      	push	{r1, r2, r3}
 8003e92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e96:	b500      	push	{lr}
 8003e98:	b09c      	sub	sp, #112	; 0x70
 8003e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e9c:	9002      	str	r0, [sp, #8]
 8003e9e:	9006      	str	r0, [sp, #24]
 8003ea0:	9107      	str	r1, [sp, #28]
 8003ea2:	9104      	str	r1, [sp, #16]
 8003ea4:	4808      	ldr	r0, [pc, #32]	; (8003ec8 <siprintf+0x38>)
 8003ea6:	4909      	ldr	r1, [pc, #36]	; (8003ecc <siprintf+0x3c>)
 8003ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003eac:	9105      	str	r1, [sp, #20]
 8003eae:	6800      	ldr	r0, [r0, #0]
 8003eb0:	a902      	add	r1, sp, #8
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	f000 f866 	bl	8003f84 <_svfiprintf_r>
 8003eb8:	2200      	movs	r2, #0
 8003eba:	9b02      	ldr	r3, [sp, #8]
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	b01c      	add	sp, #112	; 0x70
 8003ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ec4:	b003      	add	sp, #12
 8003ec6:	4770      	bx	lr
 8003ec8:	20000014 	.word	0x20000014
 8003ecc:	ffff0208 	.word	0xffff0208

08003ed0 <__ssputs_r>:
 8003ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed4:	688e      	ldr	r6, [r1, #8]
 8003ed6:	4682      	mov	sl, r0
 8003ed8:	429e      	cmp	r6, r3
 8003eda:	460c      	mov	r4, r1
 8003edc:	4690      	mov	r8, r2
 8003ede:	4699      	mov	r9, r3
 8003ee0:	d837      	bhi.n	8003f52 <__ssputs_r+0x82>
 8003ee2:	898a      	ldrh	r2, [r1, #12]
 8003ee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ee8:	d031      	beq.n	8003f4e <__ssputs_r+0x7e>
 8003eea:	2302      	movs	r3, #2
 8003eec:	6825      	ldr	r5, [r4, #0]
 8003eee:	6909      	ldr	r1, [r1, #16]
 8003ef0:	1a6f      	subs	r7, r5, r1
 8003ef2:	6965      	ldr	r5, [r4, #20]
 8003ef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ef8:	fb95 f5f3 	sdiv	r5, r5, r3
 8003efc:	f109 0301 	add.w	r3, r9, #1
 8003f00:	443b      	add	r3, r7
 8003f02:	429d      	cmp	r5, r3
 8003f04:	bf38      	it	cc
 8003f06:	461d      	movcc	r5, r3
 8003f08:	0553      	lsls	r3, r2, #21
 8003f0a:	d530      	bpl.n	8003f6e <__ssputs_r+0x9e>
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f000 fb37 	bl	8004580 <_malloc_r>
 8003f12:	4606      	mov	r6, r0
 8003f14:	b950      	cbnz	r0, 8003f2c <__ssputs_r+0x5c>
 8003f16:	230c      	movs	r3, #12
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f1c:	f8ca 3000 	str.w	r3, [sl]
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f2c:	463a      	mov	r2, r7
 8003f2e:	6921      	ldr	r1, [r4, #16]
 8003f30:	f000 fab6 	bl	80044a0 <memcpy>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f3e:	81a3      	strh	r3, [r4, #12]
 8003f40:	6126      	str	r6, [r4, #16]
 8003f42:	443e      	add	r6, r7
 8003f44:	6026      	str	r6, [r4, #0]
 8003f46:	464e      	mov	r6, r9
 8003f48:	6165      	str	r5, [r4, #20]
 8003f4a:	1bed      	subs	r5, r5, r7
 8003f4c:	60a5      	str	r5, [r4, #8]
 8003f4e:	454e      	cmp	r6, r9
 8003f50:	d900      	bls.n	8003f54 <__ssputs_r+0x84>
 8003f52:	464e      	mov	r6, r9
 8003f54:	4632      	mov	r2, r6
 8003f56:	4641      	mov	r1, r8
 8003f58:	6820      	ldr	r0, [r4, #0]
 8003f5a:	f000 faac 	bl	80044b6 <memmove>
 8003f5e:	68a3      	ldr	r3, [r4, #8]
 8003f60:	2000      	movs	r0, #0
 8003f62:	1b9b      	subs	r3, r3, r6
 8003f64:	60a3      	str	r3, [r4, #8]
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	441e      	add	r6, r3
 8003f6a:	6026      	str	r6, [r4, #0]
 8003f6c:	e7dc      	b.n	8003f28 <__ssputs_r+0x58>
 8003f6e:	462a      	mov	r2, r5
 8003f70:	f000 fb60 	bl	8004634 <_realloc_r>
 8003f74:	4606      	mov	r6, r0
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d1e2      	bne.n	8003f40 <__ssputs_r+0x70>
 8003f7a:	6921      	ldr	r1, [r4, #16]
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	f000 fab3 	bl	80044e8 <_free_r>
 8003f82:	e7c8      	b.n	8003f16 <__ssputs_r+0x46>

08003f84 <_svfiprintf_r>:
 8003f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f88:	461d      	mov	r5, r3
 8003f8a:	898b      	ldrh	r3, [r1, #12]
 8003f8c:	b09d      	sub	sp, #116	; 0x74
 8003f8e:	061f      	lsls	r7, r3, #24
 8003f90:	4680      	mov	r8, r0
 8003f92:	460c      	mov	r4, r1
 8003f94:	4616      	mov	r6, r2
 8003f96:	d50f      	bpl.n	8003fb8 <_svfiprintf_r+0x34>
 8003f98:	690b      	ldr	r3, [r1, #16]
 8003f9a:	b96b      	cbnz	r3, 8003fb8 <_svfiprintf_r+0x34>
 8003f9c:	2140      	movs	r1, #64	; 0x40
 8003f9e:	f000 faef 	bl	8004580 <_malloc_r>
 8003fa2:	6020      	str	r0, [r4, #0]
 8003fa4:	6120      	str	r0, [r4, #16]
 8003fa6:	b928      	cbnz	r0, 8003fb4 <_svfiprintf_r+0x30>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	f8c8 3000 	str.w	r3, [r8]
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb2:	e0c8      	b.n	8004146 <_svfiprintf_r+0x1c2>
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	6163      	str	r3, [r4, #20]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9309      	str	r3, [sp, #36]	; 0x24
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fc2:	2330      	movs	r3, #48	; 0x30
 8003fc4:	f04f 0b01 	mov.w	fp, #1
 8003fc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fcc:	9503      	str	r5, [sp, #12]
 8003fce:	4637      	mov	r7, r6
 8003fd0:	463d      	mov	r5, r7
 8003fd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003fd6:	b10b      	cbz	r3, 8003fdc <_svfiprintf_r+0x58>
 8003fd8:	2b25      	cmp	r3, #37	; 0x25
 8003fda:	d13e      	bne.n	800405a <_svfiprintf_r+0xd6>
 8003fdc:	ebb7 0a06 	subs.w	sl, r7, r6
 8003fe0:	d00b      	beq.n	8003ffa <_svfiprintf_r+0x76>
 8003fe2:	4653      	mov	r3, sl
 8003fe4:	4632      	mov	r2, r6
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	4640      	mov	r0, r8
 8003fea:	f7ff ff71 	bl	8003ed0 <__ssputs_r>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	f000 80a4 	beq.w	800413c <_svfiprintf_r+0x1b8>
 8003ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff6:	4453      	add	r3, sl
 8003ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffa:	783b      	ldrb	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 809d 	beq.w	800413c <_svfiprintf_r+0x1b8>
 8004002:	2300      	movs	r3, #0
 8004004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	9307      	str	r3, [sp, #28]
 8004010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004014:	931a      	str	r3, [sp, #104]	; 0x68
 8004016:	462f      	mov	r7, r5
 8004018:	2205      	movs	r2, #5
 800401a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800401e:	4850      	ldr	r0, [pc, #320]	; (8004160 <_svfiprintf_r+0x1dc>)
 8004020:	f000 fa30 	bl	8004484 <memchr>
 8004024:	9b04      	ldr	r3, [sp, #16]
 8004026:	b9d0      	cbnz	r0, 800405e <_svfiprintf_r+0xda>
 8004028:	06d9      	lsls	r1, r3, #27
 800402a:	bf44      	itt	mi
 800402c:	2220      	movmi	r2, #32
 800402e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004032:	071a      	lsls	r2, r3, #28
 8004034:	bf44      	itt	mi
 8004036:	222b      	movmi	r2, #43	; 0x2b
 8004038:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800403c:	782a      	ldrb	r2, [r5, #0]
 800403e:	2a2a      	cmp	r2, #42	; 0x2a
 8004040:	d015      	beq.n	800406e <_svfiprintf_r+0xea>
 8004042:	462f      	mov	r7, r5
 8004044:	2000      	movs	r0, #0
 8004046:	250a      	movs	r5, #10
 8004048:	9a07      	ldr	r2, [sp, #28]
 800404a:	4639      	mov	r1, r7
 800404c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004050:	3b30      	subs	r3, #48	; 0x30
 8004052:	2b09      	cmp	r3, #9
 8004054:	d94d      	bls.n	80040f2 <_svfiprintf_r+0x16e>
 8004056:	b1b8      	cbz	r0, 8004088 <_svfiprintf_r+0x104>
 8004058:	e00f      	b.n	800407a <_svfiprintf_r+0xf6>
 800405a:	462f      	mov	r7, r5
 800405c:	e7b8      	b.n	8003fd0 <_svfiprintf_r+0x4c>
 800405e:	4a40      	ldr	r2, [pc, #256]	; (8004160 <_svfiprintf_r+0x1dc>)
 8004060:	463d      	mov	r5, r7
 8004062:	1a80      	subs	r0, r0, r2
 8004064:	fa0b f000 	lsl.w	r0, fp, r0
 8004068:	4318      	orrs	r0, r3
 800406a:	9004      	str	r0, [sp, #16]
 800406c:	e7d3      	b.n	8004016 <_svfiprintf_r+0x92>
 800406e:	9a03      	ldr	r2, [sp, #12]
 8004070:	1d11      	adds	r1, r2, #4
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	9103      	str	r1, [sp, #12]
 8004076:	2a00      	cmp	r2, #0
 8004078:	db01      	blt.n	800407e <_svfiprintf_r+0xfa>
 800407a:	9207      	str	r2, [sp, #28]
 800407c:	e004      	b.n	8004088 <_svfiprintf_r+0x104>
 800407e:	4252      	negs	r2, r2
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	9207      	str	r2, [sp, #28]
 8004086:	9304      	str	r3, [sp, #16]
 8004088:	783b      	ldrb	r3, [r7, #0]
 800408a:	2b2e      	cmp	r3, #46	; 0x2e
 800408c:	d10c      	bne.n	80040a8 <_svfiprintf_r+0x124>
 800408e:	787b      	ldrb	r3, [r7, #1]
 8004090:	2b2a      	cmp	r3, #42	; 0x2a
 8004092:	d133      	bne.n	80040fc <_svfiprintf_r+0x178>
 8004094:	9b03      	ldr	r3, [sp, #12]
 8004096:	3702      	adds	r7, #2
 8004098:	1d1a      	adds	r2, r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	9203      	str	r2, [sp, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bfb8      	it	lt
 80040a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040a6:	9305      	str	r3, [sp, #20]
 80040a8:	4d2e      	ldr	r5, [pc, #184]	; (8004164 <_svfiprintf_r+0x1e0>)
 80040aa:	2203      	movs	r2, #3
 80040ac:	7839      	ldrb	r1, [r7, #0]
 80040ae:	4628      	mov	r0, r5
 80040b0:	f000 f9e8 	bl	8004484 <memchr>
 80040b4:	b138      	cbz	r0, 80040c6 <_svfiprintf_r+0x142>
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	1b40      	subs	r0, r0, r5
 80040ba:	fa03 f000 	lsl.w	r0, r3, r0
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	3701      	adds	r7, #1
 80040c2:	4303      	orrs	r3, r0
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	7839      	ldrb	r1, [r7, #0]
 80040c8:	2206      	movs	r2, #6
 80040ca:	4827      	ldr	r0, [pc, #156]	; (8004168 <_svfiprintf_r+0x1e4>)
 80040cc:	1c7e      	adds	r6, r7, #1
 80040ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040d2:	f000 f9d7 	bl	8004484 <memchr>
 80040d6:	2800      	cmp	r0, #0
 80040d8:	d038      	beq.n	800414c <_svfiprintf_r+0x1c8>
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <_svfiprintf_r+0x1e8>)
 80040dc:	bb13      	cbnz	r3, 8004124 <_svfiprintf_r+0x1a0>
 80040de:	9b03      	ldr	r3, [sp, #12]
 80040e0:	3307      	adds	r3, #7
 80040e2:	f023 0307 	bic.w	r3, r3, #7
 80040e6:	3308      	adds	r3, #8
 80040e8:	9303      	str	r3, [sp, #12]
 80040ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ec:	444b      	add	r3, r9
 80040ee:	9309      	str	r3, [sp, #36]	; 0x24
 80040f0:	e76d      	b.n	8003fce <_svfiprintf_r+0x4a>
 80040f2:	fb05 3202 	mla	r2, r5, r2, r3
 80040f6:	2001      	movs	r0, #1
 80040f8:	460f      	mov	r7, r1
 80040fa:	e7a6      	b.n	800404a <_svfiprintf_r+0xc6>
 80040fc:	2300      	movs	r3, #0
 80040fe:	250a      	movs	r5, #10
 8004100:	4619      	mov	r1, r3
 8004102:	3701      	adds	r7, #1
 8004104:	9305      	str	r3, [sp, #20]
 8004106:	4638      	mov	r0, r7
 8004108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800410c:	3a30      	subs	r2, #48	; 0x30
 800410e:	2a09      	cmp	r2, #9
 8004110:	d903      	bls.n	800411a <_svfiprintf_r+0x196>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0c8      	beq.n	80040a8 <_svfiprintf_r+0x124>
 8004116:	9105      	str	r1, [sp, #20]
 8004118:	e7c6      	b.n	80040a8 <_svfiprintf_r+0x124>
 800411a:	fb05 2101 	mla	r1, r5, r1, r2
 800411e:	2301      	movs	r3, #1
 8004120:	4607      	mov	r7, r0
 8004122:	e7f0      	b.n	8004106 <_svfiprintf_r+0x182>
 8004124:	ab03      	add	r3, sp, #12
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	4622      	mov	r2, r4
 800412a:	4b11      	ldr	r3, [pc, #68]	; (8004170 <_svfiprintf_r+0x1ec>)
 800412c:	a904      	add	r1, sp, #16
 800412e:	4640      	mov	r0, r8
 8004130:	f3af 8000 	nop.w
 8004134:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004138:	4681      	mov	r9, r0
 800413a:	d1d6      	bne.n	80040ea <_svfiprintf_r+0x166>
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	065b      	lsls	r3, r3, #25
 8004140:	f53f af35 	bmi.w	8003fae <_svfiprintf_r+0x2a>
 8004144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004146:	b01d      	add	sp, #116	; 0x74
 8004148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414c:	ab03      	add	r3, sp, #12
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	4622      	mov	r2, r4
 8004152:	4b07      	ldr	r3, [pc, #28]	; (8004170 <_svfiprintf_r+0x1ec>)
 8004154:	a904      	add	r1, sp, #16
 8004156:	4640      	mov	r0, r8
 8004158:	f000 f882 	bl	8004260 <_printf_i>
 800415c:	e7ea      	b.n	8004134 <_svfiprintf_r+0x1b0>
 800415e:	bf00      	nop
 8004160:	08004e74 	.word	0x08004e74
 8004164:	08004e7a 	.word	0x08004e7a
 8004168:	08004e7e 	.word	0x08004e7e
 800416c:	00000000 	.word	0x00000000
 8004170:	08003ed1 	.word	0x08003ed1

08004174 <_printf_common>:
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	4691      	mov	r9, r2
 800417a:	461f      	mov	r7, r3
 800417c:	688a      	ldr	r2, [r1, #8]
 800417e:	690b      	ldr	r3, [r1, #16]
 8004180:	4606      	mov	r6, r0
 8004182:	4293      	cmp	r3, r2
 8004184:	bfb8      	it	lt
 8004186:	4613      	movlt	r3, r2
 8004188:	f8c9 3000 	str.w	r3, [r9]
 800418c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004190:	460c      	mov	r4, r1
 8004192:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004196:	b112      	cbz	r2, 800419e <_printf_common+0x2a>
 8004198:	3301      	adds	r3, #1
 800419a:	f8c9 3000 	str.w	r3, [r9]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	0699      	lsls	r1, r3, #26
 80041a2:	bf42      	ittt	mi
 80041a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041a8:	3302      	addmi	r3, #2
 80041aa:	f8c9 3000 	strmi.w	r3, [r9]
 80041ae:	6825      	ldr	r5, [r4, #0]
 80041b0:	f015 0506 	ands.w	r5, r5, #6
 80041b4:	d107      	bne.n	80041c6 <_printf_common+0x52>
 80041b6:	f104 0a19 	add.w	sl, r4, #25
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	f8d9 2000 	ldr.w	r2, [r9]
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	42ab      	cmp	r3, r5
 80041c4:	dc29      	bgt.n	800421a <_printf_common+0xa6>
 80041c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	3300      	adds	r3, #0
 80041ce:	bf18      	it	ne
 80041d0:	2301      	movne	r3, #1
 80041d2:	0692      	lsls	r2, r2, #26
 80041d4:	d42e      	bmi.n	8004234 <_printf_common+0xc0>
 80041d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041da:	4639      	mov	r1, r7
 80041dc:	4630      	mov	r0, r6
 80041de:	47c0      	blx	r8
 80041e0:	3001      	adds	r0, #1
 80041e2:	d021      	beq.n	8004228 <_printf_common+0xb4>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	68e5      	ldr	r5, [r4, #12]
 80041e8:	f003 0306 	and.w	r3, r3, #6
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	bf18      	it	ne
 80041f0:	2500      	movne	r5, #0
 80041f2:	f8d9 2000 	ldr.w	r2, [r9]
 80041f6:	f04f 0900 	mov.w	r9, #0
 80041fa:	bf08      	it	eq
 80041fc:	1aad      	subeq	r5, r5, r2
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	6922      	ldr	r2, [r4, #16]
 8004202:	bf08      	it	eq
 8004204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004208:	4293      	cmp	r3, r2
 800420a:	bfc4      	itt	gt
 800420c:	1a9b      	subgt	r3, r3, r2
 800420e:	18ed      	addgt	r5, r5, r3
 8004210:	341a      	adds	r4, #26
 8004212:	454d      	cmp	r5, r9
 8004214:	d11a      	bne.n	800424c <_printf_common+0xd8>
 8004216:	2000      	movs	r0, #0
 8004218:	e008      	b.n	800422c <_printf_common+0xb8>
 800421a:	2301      	movs	r3, #1
 800421c:	4652      	mov	r2, sl
 800421e:	4639      	mov	r1, r7
 8004220:	4630      	mov	r0, r6
 8004222:	47c0      	blx	r8
 8004224:	3001      	adds	r0, #1
 8004226:	d103      	bne.n	8004230 <_printf_common+0xbc>
 8004228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800422c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004230:	3501      	adds	r5, #1
 8004232:	e7c2      	b.n	80041ba <_printf_common+0x46>
 8004234:	2030      	movs	r0, #48	; 0x30
 8004236:	18e1      	adds	r1, r4, r3
 8004238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004242:	4422      	add	r2, r4
 8004244:	3302      	adds	r3, #2
 8004246:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800424a:	e7c4      	b.n	80041d6 <_printf_common+0x62>
 800424c:	2301      	movs	r3, #1
 800424e:	4622      	mov	r2, r4
 8004250:	4639      	mov	r1, r7
 8004252:	4630      	mov	r0, r6
 8004254:	47c0      	blx	r8
 8004256:	3001      	adds	r0, #1
 8004258:	d0e6      	beq.n	8004228 <_printf_common+0xb4>
 800425a:	f109 0901 	add.w	r9, r9, #1
 800425e:	e7d8      	b.n	8004212 <_printf_common+0x9e>

08004260 <_printf_i>:
 8004260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004264:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004268:	460c      	mov	r4, r1
 800426a:	7e09      	ldrb	r1, [r1, #24]
 800426c:	b085      	sub	sp, #20
 800426e:	296e      	cmp	r1, #110	; 0x6e
 8004270:	4617      	mov	r7, r2
 8004272:	4606      	mov	r6, r0
 8004274:	4698      	mov	r8, r3
 8004276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004278:	f000 80b3 	beq.w	80043e2 <_printf_i+0x182>
 800427c:	d822      	bhi.n	80042c4 <_printf_i+0x64>
 800427e:	2963      	cmp	r1, #99	; 0x63
 8004280:	d036      	beq.n	80042f0 <_printf_i+0x90>
 8004282:	d80a      	bhi.n	800429a <_printf_i+0x3a>
 8004284:	2900      	cmp	r1, #0
 8004286:	f000 80b9 	beq.w	80043fc <_printf_i+0x19c>
 800428a:	2958      	cmp	r1, #88	; 0x58
 800428c:	f000 8083 	beq.w	8004396 <_printf_i+0x136>
 8004290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004294:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004298:	e032      	b.n	8004300 <_printf_i+0xa0>
 800429a:	2964      	cmp	r1, #100	; 0x64
 800429c:	d001      	beq.n	80042a2 <_printf_i+0x42>
 800429e:	2969      	cmp	r1, #105	; 0x69
 80042a0:	d1f6      	bne.n	8004290 <_printf_i+0x30>
 80042a2:	6820      	ldr	r0, [r4, #0]
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	0605      	lsls	r5, r0, #24
 80042a8:	f103 0104 	add.w	r1, r3, #4
 80042ac:	d52a      	bpl.n	8004304 <_printf_i+0xa4>
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6011      	str	r1, [r2, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	da03      	bge.n	80042be <_printf_i+0x5e>
 80042b6:	222d      	movs	r2, #45	; 0x2d
 80042b8:	425b      	negs	r3, r3
 80042ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042be:	486f      	ldr	r0, [pc, #444]	; (800447c <_printf_i+0x21c>)
 80042c0:	220a      	movs	r2, #10
 80042c2:	e039      	b.n	8004338 <_printf_i+0xd8>
 80042c4:	2973      	cmp	r1, #115	; 0x73
 80042c6:	f000 809d 	beq.w	8004404 <_printf_i+0x1a4>
 80042ca:	d808      	bhi.n	80042de <_printf_i+0x7e>
 80042cc:	296f      	cmp	r1, #111	; 0x6f
 80042ce:	d020      	beq.n	8004312 <_printf_i+0xb2>
 80042d0:	2970      	cmp	r1, #112	; 0x70
 80042d2:	d1dd      	bne.n	8004290 <_printf_i+0x30>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f043 0320 	orr.w	r3, r3, #32
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	e003      	b.n	80042e6 <_printf_i+0x86>
 80042de:	2975      	cmp	r1, #117	; 0x75
 80042e0:	d017      	beq.n	8004312 <_printf_i+0xb2>
 80042e2:	2978      	cmp	r1, #120	; 0x78
 80042e4:	d1d4      	bne.n	8004290 <_printf_i+0x30>
 80042e6:	2378      	movs	r3, #120	; 0x78
 80042e8:	4865      	ldr	r0, [pc, #404]	; (8004480 <_printf_i+0x220>)
 80042ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ee:	e055      	b.n	800439c <_printf_i+0x13c>
 80042f0:	6813      	ldr	r3, [r2, #0]
 80042f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f6:	1d19      	adds	r1, r3, #4
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6011      	str	r1, [r2, #0]
 80042fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004300:	2301      	movs	r3, #1
 8004302:	e08c      	b.n	800441e <_printf_i+0x1be>
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f010 0f40 	tst.w	r0, #64	; 0x40
 800430a:	6011      	str	r1, [r2, #0]
 800430c:	bf18      	it	ne
 800430e:	b21b      	sxthne	r3, r3
 8004310:	e7cf      	b.n	80042b2 <_printf_i+0x52>
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	6825      	ldr	r5, [r4, #0]
 8004316:	1d18      	adds	r0, r3, #4
 8004318:	6010      	str	r0, [r2, #0]
 800431a:	0628      	lsls	r0, r5, #24
 800431c:	d501      	bpl.n	8004322 <_printf_i+0xc2>
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	e002      	b.n	8004328 <_printf_i+0xc8>
 8004322:	0668      	lsls	r0, r5, #25
 8004324:	d5fb      	bpl.n	800431e <_printf_i+0xbe>
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	296f      	cmp	r1, #111	; 0x6f
 800432a:	bf14      	ite	ne
 800432c:	220a      	movne	r2, #10
 800432e:	2208      	moveq	r2, #8
 8004330:	4852      	ldr	r0, [pc, #328]	; (800447c <_printf_i+0x21c>)
 8004332:	2100      	movs	r1, #0
 8004334:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004338:	6865      	ldr	r5, [r4, #4]
 800433a:	2d00      	cmp	r5, #0
 800433c:	60a5      	str	r5, [r4, #8]
 800433e:	f2c0 8095 	blt.w	800446c <_printf_i+0x20c>
 8004342:	6821      	ldr	r1, [r4, #0]
 8004344:	f021 0104 	bic.w	r1, r1, #4
 8004348:	6021      	str	r1, [r4, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d13d      	bne.n	80043ca <_printf_i+0x16a>
 800434e:	2d00      	cmp	r5, #0
 8004350:	f040 808e 	bne.w	8004470 <_printf_i+0x210>
 8004354:	4665      	mov	r5, ip
 8004356:	2a08      	cmp	r2, #8
 8004358:	d10b      	bne.n	8004372 <_printf_i+0x112>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	07db      	lsls	r3, r3, #31
 800435e:	d508      	bpl.n	8004372 <_printf_i+0x112>
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	6862      	ldr	r2, [r4, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	bfde      	ittt	le
 8004368:	2330      	movle	r3, #48	; 0x30
 800436a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800436e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004372:	ebac 0305 	sub.w	r3, ip, r5
 8004376:	6123      	str	r3, [r4, #16]
 8004378:	f8cd 8000 	str.w	r8, [sp]
 800437c:	463b      	mov	r3, r7
 800437e:	aa03      	add	r2, sp, #12
 8004380:	4621      	mov	r1, r4
 8004382:	4630      	mov	r0, r6
 8004384:	f7ff fef6 	bl	8004174 <_printf_common>
 8004388:	3001      	adds	r0, #1
 800438a:	d14d      	bne.n	8004428 <_printf_i+0x1c8>
 800438c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004390:	b005      	add	sp, #20
 8004392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004396:	4839      	ldr	r0, [pc, #228]	; (800447c <_printf_i+0x21c>)
 8004398:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800439c:	6813      	ldr	r3, [r2, #0]
 800439e:	6821      	ldr	r1, [r4, #0]
 80043a0:	1d1d      	adds	r5, r3, #4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6015      	str	r5, [r2, #0]
 80043a6:	060a      	lsls	r2, r1, #24
 80043a8:	d50b      	bpl.n	80043c2 <_printf_i+0x162>
 80043aa:	07ca      	lsls	r2, r1, #31
 80043ac:	bf44      	itt	mi
 80043ae:	f041 0120 	orrmi.w	r1, r1, #32
 80043b2:	6021      	strmi	r1, [r4, #0]
 80043b4:	b91b      	cbnz	r3, 80043be <_printf_i+0x15e>
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	f022 0220 	bic.w	r2, r2, #32
 80043bc:	6022      	str	r2, [r4, #0]
 80043be:	2210      	movs	r2, #16
 80043c0:	e7b7      	b.n	8004332 <_printf_i+0xd2>
 80043c2:	064d      	lsls	r5, r1, #25
 80043c4:	bf48      	it	mi
 80043c6:	b29b      	uxthmi	r3, r3
 80043c8:	e7ef      	b.n	80043aa <_printf_i+0x14a>
 80043ca:	4665      	mov	r5, ip
 80043cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80043d0:	fb02 3311 	mls	r3, r2, r1, r3
 80043d4:	5cc3      	ldrb	r3, [r0, r3]
 80043d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80043da:	460b      	mov	r3, r1
 80043dc:	2900      	cmp	r1, #0
 80043de:	d1f5      	bne.n	80043cc <_printf_i+0x16c>
 80043e0:	e7b9      	b.n	8004356 <_printf_i+0xf6>
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	1d18      	adds	r0, r3, #4
 80043e8:	6961      	ldr	r1, [r4, #20]
 80043ea:	6010      	str	r0, [r2, #0]
 80043ec:	0628      	lsls	r0, r5, #24
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	d501      	bpl.n	80043f6 <_printf_i+0x196>
 80043f2:	6019      	str	r1, [r3, #0]
 80043f4:	e002      	b.n	80043fc <_printf_i+0x19c>
 80043f6:	066a      	lsls	r2, r5, #25
 80043f8:	d5fb      	bpl.n	80043f2 <_printf_i+0x192>
 80043fa:	8019      	strh	r1, [r3, #0]
 80043fc:	2300      	movs	r3, #0
 80043fe:	4665      	mov	r5, ip
 8004400:	6123      	str	r3, [r4, #16]
 8004402:	e7b9      	b.n	8004378 <_printf_i+0x118>
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	1d19      	adds	r1, r3, #4
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	681d      	ldr	r5, [r3, #0]
 800440c:	6862      	ldr	r2, [r4, #4]
 800440e:	2100      	movs	r1, #0
 8004410:	4628      	mov	r0, r5
 8004412:	f000 f837 	bl	8004484 <memchr>
 8004416:	b108      	cbz	r0, 800441c <_printf_i+0x1bc>
 8004418:	1b40      	subs	r0, r0, r5
 800441a:	6060      	str	r0, [r4, #4]
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	6123      	str	r3, [r4, #16]
 8004420:	2300      	movs	r3, #0
 8004422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004426:	e7a7      	b.n	8004378 <_printf_i+0x118>
 8004428:	6923      	ldr	r3, [r4, #16]
 800442a:	462a      	mov	r2, r5
 800442c:	4639      	mov	r1, r7
 800442e:	4630      	mov	r0, r6
 8004430:	47c0      	blx	r8
 8004432:	3001      	adds	r0, #1
 8004434:	d0aa      	beq.n	800438c <_printf_i+0x12c>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	079b      	lsls	r3, r3, #30
 800443a:	d413      	bmi.n	8004464 <_printf_i+0x204>
 800443c:	68e0      	ldr	r0, [r4, #12]
 800443e:	9b03      	ldr	r3, [sp, #12]
 8004440:	4298      	cmp	r0, r3
 8004442:	bfb8      	it	lt
 8004444:	4618      	movlt	r0, r3
 8004446:	e7a3      	b.n	8004390 <_printf_i+0x130>
 8004448:	2301      	movs	r3, #1
 800444a:	464a      	mov	r2, r9
 800444c:	4639      	mov	r1, r7
 800444e:	4630      	mov	r0, r6
 8004450:	47c0      	blx	r8
 8004452:	3001      	adds	r0, #1
 8004454:	d09a      	beq.n	800438c <_printf_i+0x12c>
 8004456:	3501      	adds	r5, #1
 8004458:	68e3      	ldr	r3, [r4, #12]
 800445a:	9a03      	ldr	r2, [sp, #12]
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	42ab      	cmp	r3, r5
 8004460:	dcf2      	bgt.n	8004448 <_printf_i+0x1e8>
 8004462:	e7eb      	b.n	800443c <_printf_i+0x1dc>
 8004464:	2500      	movs	r5, #0
 8004466:	f104 0919 	add.w	r9, r4, #25
 800446a:	e7f5      	b.n	8004458 <_printf_i+0x1f8>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ac      	bne.n	80043ca <_printf_i+0x16a>
 8004470:	7803      	ldrb	r3, [r0, #0]
 8004472:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004476:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800447a:	e76c      	b.n	8004356 <_printf_i+0xf6>
 800447c:	08004e85 	.word	0x08004e85
 8004480:	08004e96 	.word	0x08004e96

08004484 <memchr>:
 8004484:	b510      	push	{r4, lr}
 8004486:	b2c9      	uxtb	r1, r1
 8004488:	4402      	add	r2, r0
 800448a:	4290      	cmp	r0, r2
 800448c:	4603      	mov	r3, r0
 800448e:	d101      	bne.n	8004494 <memchr+0x10>
 8004490:	2300      	movs	r3, #0
 8004492:	e003      	b.n	800449c <memchr+0x18>
 8004494:	781c      	ldrb	r4, [r3, #0]
 8004496:	3001      	adds	r0, #1
 8004498:	428c      	cmp	r4, r1
 800449a:	d1f6      	bne.n	800448a <memchr+0x6>
 800449c:	4618      	mov	r0, r3
 800449e:	bd10      	pop	{r4, pc}

080044a0 <memcpy>:
 80044a0:	b510      	push	{r4, lr}
 80044a2:	1e43      	subs	r3, r0, #1
 80044a4:	440a      	add	r2, r1
 80044a6:	4291      	cmp	r1, r2
 80044a8:	d100      	bne.n	80044ac <memcpy+0xc>
 80044aa:	bd10      	pop	{r4, pc}
 80044ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b4:	e7f7      	b.n	80044a6 <memcpy+0x6>

080044b6 <memmove>:
 80044b6:	4288      	cmp	r0, r1
 80044b8:	b510      	push	{r4, lr}
 80044ba:	eb01 0302 	add.w	r3, r1, r2
 80044be:	d807      	bhi.n	80044d0 <memmove+0x1a>
 80044c0:	1e42      	subs	r2, r0, #1
 80044c2:	4299      	cmp	r1, r3
 80044c4:	d00a      	beq.n	80044dc <memmove+0x26>
 80044c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ca:	f802 4f01 	strb.w	r4, [r2, #1]!
 80044ce:	e7f8      	b.n	80044c2 <memmove+0xc>
 80044d0:	4283      	cmp	r3, r0
 80044d2:	d9f5      	bls.n	80044c0 <memmove+0xa>
 80044d4:	1881      	adds	r1, r0, r2
 80044d6:	1ad2      	subs	r2, r2, r3
 80044d8:	42d3      	cmn	r3, r2
 80044da:	d100      	bne.n	80044de <memmove+0x28>
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80044e6:	e7f7      	b.n	80044d8 <memmove+0x22>

080044e8 <_free_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4605      	mov	r5, r0
 80044ec:	2900      	cmp	r1, #0
 80044ee:	d043      	beq.n	8004578 <_free_r+0x90>
 80044f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f4:	1f0c      	subs	r4, r1, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bfb8      	it	lt
 80044fa:	18e4      	addlt	r4, r4, r3
 80044fc:	f000 f8d0 	bl	80046a0 <__malloc_lock>
 8004500:	4a1e      	ldr	r2, [pc, #120]	; (800457c <_free_r+0x94>)
 8004502:	6813      	ldr	r3, [r2, #0]
 8004504:	4610      	mov	r0, r2
 8004506:	b933      	cbnz	r3, 8004516 <_free_r+0x2e>
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	6014      	str	r4, [r2, #0]
 800450c:	4628      	mov	r0, r5
 800450e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004512:	f000 b8c6 	b.w	80046a2 <__malloc_unlock>
 8004516:	42a3      	cmp	r3, r4
 8004518:	d90b      	bls.n	8004532 <_free_r+0x4a>
 800451a:	6821      	ldr	r1, [r4, #0]
 800451c:	1862      	adds	r2, r4, r1
 800451e:	4293      	cmp	r3, r2
 8004520:	bf01      	itttt	eq
 8004522:	681a      	ldreq	r2, [r3, #0]
 8004524:	685b      	ldreq	r3, [r3, #4]
 8004526:	1852      	addeq	r2, r2, r1
 8004528:	6022      	streq	r2, [r4, #0]
 800452a:	6063      	str	r3, [r4, #4]
 800452c:	6004      	str	r4, [r0, #0]
 800452e:	e7ed      	b.n	800450c <_free_r+0x24>
 8004530:	4613      	mov	r3, r2
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	b10a      	cbz	r2, 800453a <_free_r+0x52>
 8004536:	42a2      	cmp	r2, r4
 8004538:	d9fa      	bls.n	8004530 <_free_r+0x48>
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	1858      	adds	r0, r3, r1
 800453e:	42a0      	cmp	r0, r4
 8004540:	d10b      	bne.n	800455a <_free_r+0x72>
 8004542:	6820      	ldr	r0, [r4, #0]
 8004544:	4401      	add	r1, r0
 8004546:	1858      	adds	r0, r3, r1
 8004548:	4282      	cmp	r2, r0
 800454a:	6019      	str	r1, [r3, #0]
 800454c:	d1de      	bne.n	800450c <_free_r+0x24>
 800454e:	6810      	ldr	r0, [r2, #0]
 8004550:	6852      	ldr	r2, [r2, #4]
 8004552:	4401      	add	r1, r0
 8004554:	6019      	str	r1, [r3, #0]
 8004556:	605a      	str	r2, [r3, #4]
 8004558:	e7d8      	b.n	800450c <_free_r+0x24>
 800455a:	d902      	bls.n	8004562 <_free_r+0x7a>
 800455c:	230c      	movs	r3, #12
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	e7d4      	b.n	800450c <_free_r+0x24>
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	1821      	adds	r1, r4, r0
 8004566:	428a      	cmp	r2, r1
 8004568:	bf01      	itttt	eq
 800456a:	6811      	ldreq	r1, [r2, #0]
 800456c:	6852      	ldreq	r2, [r2, #4]
 800456e:	1809      	addeq	r1, r1, r0
 8004570:	6021      	streq	r1, [r4, #0]
 8004572:	6062      	str	r2, [r4, #4]
 8004574:	605c      	str	r4, [r3, #4]
 8004576:	e7c9      	b.n	800450c <_free_r+0x24>
 8004578:	bd38      	pop	{r3, r4, r5, pc}
 800457a:	bf00      	nop
 800457c:	200004a4 	.word	0x200004a4

08004580 <_malloc_r>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	1ccd      	adds	r5, r1, #3
 8004584:	f025 0503 	bic.w	r5, r5, #3
 8004588:	3508      	adds	r5, #8
 800458a:	2d0c      	cmp	r5, #12
 800458c:	bf38      	it	cc
 800458e:	250c      	movcc	r5, #12
 8004590:	2d00      	cmp	r5, #0
 8004592:	4606      	mov	r6, r0
 8004594:	db01      	blt.n	800459a <_malloc_r+0x1a>
 8004596:	42a9      	cmp	r1, r5
 8004598:	d903      	bls.n	80045a2 <_malloc_r+0x22>
 800459a:	230c      	movs	r3, #12
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	2000      	movs	r0, #0
 80045a0:	bd70      	pop	{r4, r5, r6, pc}
 80045a2:	f000 f87d 	bl	80046a0 <__malloc_lock>
 80045a6:	4a21      	ldr	r2, [pc, #132]	; (800462c <_malloc_r+0xac>)
 80045a8:	6814      	ldr	r4, [r2, #0]
 80045aa:	4621      	mov	r1, r4
 80045ac:	b991      	cbnz	r1, 80045d4 <_malloc_r+0x54>
 80045ae:	4c20      	ldr	r4, [pc, #128]	; (8004630 <_malloc_r+0xb0>)
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	b91b      	cbnz	r3, 80045bc <_malloc_r+0x3c>
 80045b4:	4630      	mov	r0, r6
 80045b6:	f000 f863 	bl	8004680 <_sbrk_r>
 80045ba:	6020      	str	r0, [r4, #0]
 80045bc:	4629      	mov	r1, r5
 80045be:	4630      	mov	r0, r6
 80045c0:	f000 f85e 	bl	8004680 <_sbrk_r>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d124      	bne.n	8004612 <_malloc_r+0x92>
 80045c8:	230c      	movs	r3, #12
 80045ca:	4630      	mov	r0, r6
 80045cc:	6033      	str	r3, [r6, #0]
 80045ce:	f000 f868 	bl	80046a2 <__malloc_unlock>
 80045d2:	e7e4      	b.n	800459e <_malloc_r+0x1e>
 80045d4:	680b      	ldr	r3, [r1, #0]
 80045d6:	1b5b      	subs	r3, r3, r5
 80045d8:	d418      	bmi.n	800460c <_malloc_r+0x8c>
 80045da:	2b0b      	cmp	r3, #11
 80045dc:	d90f      	bls.n	80045fe <_malloc_r+0x7e>
 80045de:	600b      	str	r3, [r1, #0]
 80045e0:	18cc      	adds	r4, r1, r3
 80045e2:	50cd      	str	r5, [r1, r3]
 80045e4:	4630      	mov	r0, r6
 80045e6:	f000 f85c 	bl	80046a2 <__malloc_unlock>
 80045ea:	f104 000b 	add.w	r0, r4, #11
 80045ee:	1d23      	adds	r3, r4, #4
 80045f0:	f020 0007 	bic.w	r0, r0, #7
 80045f4:	1ac3      	subs	r3, r0, r3
 80045f6:	d0d3      	beq.n	80045a0 <_malloc_r+0x20>
 80045f8:	425a      	negs	r2, r3
 80045fa:	50e2      	str	r2, [r4, r3]
 80045fc:	e7d0      	b.n	80045a0 <_malloc_r+0x20>
 80045fe:	684b      	ldr	r3, [r1, #4]
 8004600:	428c      	cmp	r4, r1
 8004602:	bf16      	itet	ne
 8004604:	6063      	strne	r3, [r4, #4]
 8004606:	6013      	streq	r3, [r2, #0]
 8004608:	460c      	movne	r4, r1
 800460a:	e7eb      	b.n	80045e4 <_malloc_r+0x64>
 800460c:	460c      	mov	r4, r1
 800460e:	6849      	ldr	r1, [r1, #4]
 8004610:	e7cc      	b.n	80045ac <_malloc_r+0x2c>
 8004612:	1cc4      	adds	r4, r0, #3
 8004614:	f024 0403 	bic.w	r4, r4, #3
 8004618:	42a0      	cmp	r0, r4
 800461a:	d005      	beq.n	8004628 <_malloc_r+0xa8>
 800461c:	1a21      	subs	r1, r4, r0
 800461e:	4630      	mov	r0, r6
 8004620:	f000 f82e 	bl	8004680 <_sbrk_r>
 8004624:	3001      	adds	r0, #1
 8004626:	d0cf      	beq.n	80045c8 <_malloc_r+0x48>
 8004628:	6025      	str	r5, [r4, #0]
 800462a:	e7db      	b.n	80045e4 <_malloc_r+0x64>
 800462c:	200004a4 	.word	0x200004a4
 8004630:	200004a8 	.word	0x200004a8

08004634 <_realloc_r>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	4607      	mov	r7, r0
 8004638:	4614      	mov	r4, r2
 800463a:	460e      	mov	r6, r1
 800463c:	b921      	cbnz	r1, 8004648 <_realloc_r+0x14>
 800463e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004642:	4611      	mov	r1, r2
 8004644:	f7ff bf9c 	b.w	8004580 <_malloc_r>
 8004648:	b922      	cbnz	r2, 8004654 <_realloc_r+0x20>
 800464a:	f7ff ff4d 	bl	80044e8 <_free_r>
 800464e:	4625      	mov	r5, r4
 8004650:	4628      	mov	r0, r5
 8004652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004654:	f000 f826 	bl	80046a4 <_malloc_usable_size_r>
 8004658:	42a0      	cmp	r0, r4
 800465a:	d20f      	bcs.n	800467c <_realloc_r+0x48>
 800465c:	4621      	mov	r1, r4
 800465e:	4638      	mov	r0, r7
 8004660:	f7ff ff8e 	bl	8004580 <_malloc_r>
 8004664:	4605      	mov	r5, r0
 8004666:	2800      	cmp	r0, #0
 8004668:	d0f2      	beq.n	8004650 <_realloc_r+0x1c>
 800466a:	4631      	mov	r1, r6
 800466c:	4622      	mov	r2, r4
 800466e:	f7ff ff17 	bl	80044a0 <memcpy>
 8004672:	4631      	mov	r1, r6
 8004674:	4638      	mov	r0, r7
 8004676:	f7ff ff37 	bl	80044e8 <_free_r>
 800467a:	e7e9      	b.n	8004650 <_realloc_r+0x1c>
 800467c:	4635      	mov	r5, r6
 800467e:	e7e7      	b.n	8004650 <_realloc_r+0x1c>

08004680 <_sbrk_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	2300      	movs	r3, #0
 8004684:	4c05      	ldr	r4, [pc, #20]	; (800469c <_sbrk_r+0x1c>)
 8004686:	4605      	mov	r5, r0
 8004688:	4608      	mov	r0, r1
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	f7fc fb68 	bl	8000d60 <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d102      	bne.n	800469a <_sbrk_r+0x1a>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	b103      	cbz	r3, 800469a <_sbrk_r+0x1a>
 8004698:	602b      	str	r3, [r5, #0]
 800469a:	bd38      	pop	{r3, r4, r5, pc}
 800469c:	200005f4 	.word	0x200005f4

080046a0 <__malloc_lock>:
 80046a0:	4770      	bx	lr

080046a2 <__malloc_unlock>:
 80046a2:	4770      	bx	lr

080046a4 <_malloc_usable_size_r>:
 80046a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a8:	1f18      	subs	r0, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	bfbc      	itt	lt
 80046ae:	580b      	ldrlt	r3, [r1, r0]
 80046b0:	18c0      	addlt	r0, r0, r3
 80046b2:	4770      	bx	lr

080046b4 <_init>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	bf00      	nop
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr

080046c0 <_fini>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr
